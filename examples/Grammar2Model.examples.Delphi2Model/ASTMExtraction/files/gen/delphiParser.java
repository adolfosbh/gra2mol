// $ANTLR 3.2 Sep 23, 2009 12:02:23 delphi.g 2016-08-30 19:22:33

	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/** Delphi 7 grammar
  * Author: Javier Canovas (jlcanovas@um.es)
  * Notes:
  *  This grammar has been extracted from the grammar included in the help section
  *  of Borland Delphi 7 tool
  */
public class delphiParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "ID", "INT", "HEX", "QVALUE", "DQVALUE", "SLASH", "QUOTE", "DOUBLEQUOTE", "COMMENT", "MORECOMMENT", "LINE_COMMENT", "WS", "'program'", "'('", "')'", "';'", "'.'", "'unit'", "'package'", "'end'", "'library'", "'uses'", "'platform'", "'deprecated'", "'interface'", "'implementation'", "'name'", "'index'", "'exports'", "','", "'label'", "'const'", "'='", "':'", "'type'", "'class'", "'of'", "'real48'", "'real'", "'single'", "'double'", "'extended'", "'currency'", "'comp'", "'shortint'", "'smallint'", "'integer'", "'byte'", "'longint'", "'int64'", "'word'", "'boolean'", "'char'", "'widechar'", "'longword'", "'pchar'", "'variant'", "'olevariant'", "'..'", "'string'", "'ansistring'", "'widestring'", "'packed'", "'array'", "'['", "']'", "'record'", "'case'", "'set'", "'file'", "'^'", "'object'", "'var'", "'absolute'", "'+'", "'-'", "'@'", "'nil'", "'not'", "'>'", "'<'", "'<='", "'>='", "'<>'", "'in'", "'is'", "'as'", "'or'", "'xor'", "'*'", "'/'", "'div'", "'mod'", "'and'", "'shl'", "'shr'", "'&'", "':='", "'inherited'", "'goto'", "'begin'", "'if'", "'then'", "'else'", "'repeat'", "'until'", "'while'", "'do'", "'for'", "'to'", "'downto'", "'with'", "'try'", "'except'", "'finally'", "'on'", "'id'", "'raise'", "'at'", "'asm'", "'function'", "'procedure'", "'out'", "'cdecl'", "'register'", "'dynamic'", "'virtual'", "'export'", "'external'", "'near'", "'far'", "'forward'", "'message'", "'override'", "'overload'", "'pascal'", "'reintroduce'", "'safecall'", "'stdcall'", "'varargs'", "'local'", "'abstract'", "'constructor'", "'destructor'", "'initialization'", "'finalization'", "'public'", "'protected'", "'private'", "'published'", "'property'", "'read'", "'write'", "'stored'", "'default'", "'nodefault'", "'implements'", "'requires'", "'contains'", "'#'"
    };
    public static final int T__144=144;
    public static final int T__143=143;
    public static final int T__146=146;
    public static final int T__50=50;
    public static final int T__145=145;
    public static final int T__140=140;
    public static final int T__142=142;
    public static final int T__141=141;
    public static final int T__59=59;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int ID=4;
    public static final int T__51=51;
    public static final int T__137=137;
    public static final int T__52=52;
    public static final int T__136=136;
    public static final int T__53=53;
    public static final int T__139=139;
    public static final int T__54=54;
    public static final int T__138=138;
    public static final int T__133=133;
    public static final int T__132=132;
    public static final int T__60=60;
    public static final int T__135=135;
    public static final int T__61=61;
    public static final int T__134=134;
    public static final int T__131=131;
    public static final int T__130=130;
    public static final int LINE_COMMENT=14;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__129=129;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__62=62;
    public static final int T__126=126;
    public static final int T__63=63;
    public static final int T__125=125;
    public static final int T__64=64;
    public static final int T__128=128;
    public static final int T__65=65;
    public static final int T__127=127;
    public static final int T__162=162;
    public static final int T__161=161;
    public static final int T__163=163;
    public static final int T__160=160;
    public static final int COMMENT=12;
    public static final int T__37=37;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__33=33;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int T__159=159;
    public static final int T__30=30;
    public static final int T__158=158;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__155=155;
    public static final int T__154=154;
    public static final int T__157=157;
    public static final int T__156=156;
    public static final int T__151=151;
    public static final int T__150=150;
    public static final int T__153=153;
    public static final int T__152=152;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__40=40;
    public static final int T__148=148;
    public static final int T__41=41;
    public static final int T__147=147;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int T__149=149;
    public static final int T__91=91;
    public static final int T__100=100;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__102=102;
    public static final int T__94=94;
    public static final int T__101=101;
    public static final int T__90=90;
    public static final int T__19=19;
    public static final int T__16=16;
    public static final int T__17=17;
    public static final int T__18=18;
    public static final int T__99=99;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int QVALUE=7;
    public static final int T__26=26;
    public static final int T__27=27;
    public static final int T__28=28;
    public static final int T__29=29;
    public static final int T__22=22;
    public static final int T__23=23;
    public static final int T__24=24;
    public static final int T__25=25;
    public static final int T__20=20;
    public static final int T__21=21;
    public static final int T__122=122;
    public static final int T__70=70;
    public static final int T__121=121;
    public static final int QUOTE=10;
    public static final int T__71=71;
    public static final int T__124=124;
    public static final int T__72=72;
    public static final int T__123=123;
    public static final int T__120=120;
    public static final int MORECOMMENT=13;
    public static final int INT=5;
    public static final int DOUBLEQUOTE=11;
    public static final int T__77=77;
    public static final int T__119=119;
    public static final int T__78=78;
    public static final int T__118=118;
    public static final int T__79=79;
    public static final int T__73=73;
    public static final int T__115=115;
    public static final int WS=15;
    public static final int EOF=-1;
    public static final int T__74=74;
    public static final int T__114=114;
    public static final int T__75=75;
    public static final int T__117=117;
    public static final int DQVALUE=8;
    public static final int T__76=76;
    public static final int T__116=116;
    public static final int T__80=80;
    public static final int T__111=111;
    public static final int T__81=81;
    public static final int T__110=110;
    public static final int T__82=82;
    public static final int T__113=113;
    public static final int T__83=83;
    public static final int T__112=112;
    public static final int SLASH=9;
    public static final int T__88=88;
    public static final int T__108=108;
    public static final int T__89=89;
    public static final int T__107=107;
    public static final int HEX=6;
    public static final int T__109=109;
    public static final int T__84=84;
    public static final int T__104=104;
    public static final int T__85=85;
    public static final int T__103=103;
    public static final int T__86=86;
    public static final int T__106=106;
    public static final int T__87=87;
    public static final int T__105=105;

    // delegates
    // delegators


        public delphiParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public delphiParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[407+1];
             
             
        }
        
    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("delphiParserTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return delphiParser.tokenNames; }
    public String getGrammarFileName() { return "delphi.g"; }


    public static class mainRule_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "mainRule"
    // delphi.g:26:1: mainRule returns [Node returnNode] : (programGen+= program | packageDeclGen+= packageDecl | libraryGen+= library | unitGen+= unit );
    public final delphiParser.mainRule_return mainRule() throws RecognitionException {
        delphiParser.mainRule_return retval = new delphiParser.mainRule_return();
        retval.start = input.LT(1);
        int mainRule_StartIndex = input.index();
        List list_programGen=null;
        List list_packageDeclGen=null;
        List list_libraryGen=null;
        List list_unitGen=null;
        RuleReturnScope programGen = null;
        RuleReturnScope packageDeclGen = null;
        RuleReturnScope libraryGen = null;
        RuleReturnScope unitGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // delphi.g:27:1: (programGen+= program | packageDeclGen+= packageDecl | libraryGen+= library | unitGen+= unit )
            int alt1=4;
            switch ( input.LA(1) ) {
            case 16:
            case 25:
            case 32:
            case 34:
            case 35:
            case 38:
            case 39:
            case 76:
            case 104:
            case 124:
            case 125:
                {
                alt1=1;
                }
                break;
            case 22:
                {
                alt1=2;
                }
                break;
            case 24:
                {
                alt1=3;
                }
                break;
            case 21:
                {
                alt1=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 1, 0, input);

                throw nvae;
            }

            switch (alt1) {
                case 1 :
                    // delphi.g:27:4: programGen+= program
                    {
                    pushFollow(FOLLOW_program_in_mainRule55);
                    programGen=program();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_programGen==null) list_programGen=new ArrayList();
                    list_programGen.add(programGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mainRuleReturnNode.setKind("mainRule");
                      	    // Create a CST Node
                      		if(list_programGen != null) {
                      	        for(Iterator it = list_programGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.program_return r = (delphiParser.program_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("program");
                      	            	mainRuleReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mainRuleReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:45:6: packageDeclGen+= packageDecl
                    {
                    pushFollow(FOLLOW_packageDecl_in_mainRule69);
                    packageDeclGen=packageDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_packageDeclGen==null) list_packageDeclGen=new ArrayList();
                    list_packageDeclGen.add(packageDeclGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mainRuleReturnNode.setKind("mainRule");
                      	    // Create a CST Node
                      		if(list_packageDeclGen != null) {
                      	        for(Iterator it = list_packageDeclGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.packageDecl_return r = (delphiParser.packageDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("packageDecl");
                      	            	mainRuleReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mainRuleReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:63:6: libraryGen+= library
                    {
                    pushFollow(FOLLOW_library_in_mainRule83);
                    libraryGen=library();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_libraryGen==null) list_libraryGen=new ArrayList();
                    list_libraryGen.add(libraryGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mainRuleReturnNode.setKind("mainRule");
                      	    // Create a CST Node
                      		if(list_libraryGen != null) {
                      	        for(Iterator it = list_libraryGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.library_return r = (delphiParser.library_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("library");
                      	            	mainRuleReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mainRuleReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:81:5: unitGen+= unit
                    {
                    pushFollow(FOLLOW_unit_in_mainRule96);
                    unitGen=unit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unitGen==null) list_unitGen=new ArrayList();
                    list_unitGen.add(unitGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mainRuleReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mainRuleReturnNode.setKind("mainRule");
                      	    // Create a CST Node
                      		if(list_unitGen != null) {
                      	        for(Iterator it = list_unitGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.unit_return r = (delphiParser.unit_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unit");
                      	            	mainRuleReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mainRuleReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, mainRule_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mainRule"

    public static class program_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "program"
    // delphi.g:101:1: program returns [Node returnNode] : (TK_0= 'program' identGen+= ident (TK_1= '(' identListGen+= identList TK_2= ')' )? TK_3= ';' )? programBlockGen+= programBlock TK_4= '.' ;
    public final delphiParser.program_return program() throws RecognitionException {
        delphiParser.program_return retval = new delphiParser.program_return();
        retval.start = input.LT(1);
        int program_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        List list_identGen=null;
        List list_identListGen=null;
        List list_programBlockGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope identListGen = null;
        RuleReturnScope programBlockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // delphi.g:102:1: ( (TK_0= 'program' identGen+= ident (TK_1= '(' identListGen+= identList TK_2= ')' )? TK_3= ';' )? programBlockGen+= programBlock TK_4= '.' )
            // delphi.g:102:3: (TK_0= 'program' identGen+= ident (TK_1= '(' identListGen+= identList TK_2= ')' )? TK_3= ';' )? programBlockGen+= programBlock TK_4= '.'
            {
            // delphi.g:102:3: (TK_0= 'program' identGen+= ident (TK_1= '(' identListGen+= identList TK_2= ')' )? TK_3= ';' )?
            int alt3=2;
            int LA3_0 = input.LA(1);

            if ( (LA3_0==16) ) {
                alt3=1;
            }
            switch (alt3) {
                case 1 :
                    // delphi.g:102:5: TK_0= 'program' identGen+= ident (TK_1= '(' identListGen+= identList TK_2= ')' )? TK_3= ';'
                    {
                    TK_0=(Token)match(input,16,FOLLOW_16_in_program120); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_program125);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    // delphi.g:102:37: (TK_1= '(' identListGen+= identList TK_2= ')' )?
                    int alt2=2;
                    int LA2_0 = input.LA(1);

                    if ( (LA2_0==17) ) {
                        alt2=1;
                    }
                    switch (alt2) {
                        case 1 :
                            // delphi.g:102:39: TK_1= '(' identListGen+= identList TK_2= ')'
                            {
                            TK_1=(Token)match(input,17,FOLLOW_17_in_program131); if (state.failed) return retval;
                            pushFollow(FOLLOW_identList_in_program136);
                            identListGen=identList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_identListGen==null) list_identListGen=new ArrayList();
                            list_identListGen.add(identListGen);

                            TK_2=(Token)match(input,18,FOLLOW_18_in_program141); if (state.failed) return retval;

                            }
                            break;

                    }

                    TK_3=(Token)match(input,19,FOLLOW_19_in_program148); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_programBlock_in_program155);
            programBlockGen=programBlock();

            state._fsp--;
            if (state.failed) return retval;
            if (list_programBlockGen==null) list_programBlockGen=new ArrayList();
            list_programBlockGen.add(programBlockGen);

            TK_4=(Token)match(input,20,FOLLOW_20_in_program160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node programReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		programReturnNode.setKind("program");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		programReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	programReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		programReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	programReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		programReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		programReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_programBlockGen != null) {
              	        for(Iterator it = list_programBlockGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.programBlock_return r = (delphiParser.programBlock_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("programBlock");
              	            	programReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		programReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = programReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, program_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "program"

    public static class unit_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "unit"
    // delphi.g:167:1: unit returns [Node returnNode] : TK_0= 'unit' identGen+= ident (portabilityDirectiveGen+= portabilityDirective )? TK_1= ';' interfaceSectionGen+= interfaceSection implementationSectionGen+= implementationSection initSectionGen+= initSection TK_2= '.' ;
    public final delphiParser.unit_return unit() throws RecognitionException {
        delphiParser.unit_return retval = new delphiParser.unit_return();
        retval.start = input.LT(1);
        int unit_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_identGen=null;
        List list_portabilityDirectiveGen=null;
        List list_interfaceSectionGen=null;
        List list_implementationSectionGen=null;
        List list_initSectionGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        RuleReturnScope interfaceSectionGen = null;
        RuleReturnScope implementationSectionGen = null;
        RuleReturnScope initSectionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // delphi.g:168:1: (TK_0= 'unit' identGen+= ident (portabilityDirectiveGen+= portabilityDirective )? TK_1= ';' interfaceSectionGen+= interfaceSection implementationSectionGen+= implementationSection initSectionGen+= initSection TK_2= '.' )
            // delphi.g:168:5: TK_0= 'unit' identGen+= ident (portabilityDirectiveGen+= portabilityDirective )? TK_1= ';' interfaceSectionGen+= interfaceSection implementationSectionGen+= implementationSection initSectionGen+= initSection TK_2= '.'
            {
            TK_0=(Token)match(input,21,FOLLOW_21_in_unit203); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_unit208);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:168:34: (portabilityDirectiveGen+= portabilityDirective )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==24||(LA4_0>=26 && LA4_0<=27)) ) {
                alt4=1;
            }
            switch (alt4) {
                case 1 :
                    // delphi.g:168:36: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_unit214);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            TK_1=(Token)match(input,19,FOLLOW_19_in_unit221); if (state.failed) return retval;
            pushFollow(FOLLOW_interfaceSection_in_unit226);
            interfaceSectionGen=interfaceSection();

            state._fsp--;
            if (state.failed) return retval;
            if (list_interfaceSectionGen==null) list_interfaceSectionGen=new ArrayList();
            list_interfaceSectionGen.add(interfaceSectionGen);

            pushFollow(FOLLOW_implementationSection_in_unit231);
            implementationSectionGen=implementationSection();

            state._fsp--;
            if (state.failed) return retval;
            if (list_implementationSectionGen==null) list_implementationSectionGen=new ArrayList();
            list_implementationSectionGen.add(implementationSectionGen);

            pushFollow(FOLLOW_initSection_in_unit236);
            initSectionGen=initSection();

            state._fsp--;
            if (state.failed) return retval;
            if (list_initSectionGen==null) list_initSectionGen=new ArrayList();
            list_initSectionGen.add(initSectionGen);

            TK_2=(Token)match(input,20,FOLLOW_20_in_unit241); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node unitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		unitReturnNode.setKind("unit");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		unitReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	unitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	unitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		unitReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_interfaceSectionGen != null) {
              	        for(Iterator it = list_interfaceSectionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.interfaceSection_return r = (delphiParser.interfaceSection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceSection");
              	            	unitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_implementationSectionGen != null) {
              	        for(Iterator it = list_implementationSectionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.implementationSection_return r = (delphiParser.implementationSection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("implementationSection");
              	            	unitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_initSectionGen != null) {
              	        for(Iterator it = list_initSectionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.initSection_return r = (delphiParser.initSection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("initSection");
              	            	unitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		unitReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = unitReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, unit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unit"

    public static class packageDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "packageDecl"
    // delphi.g:243:1: packageDecl returns [Node returnNode] : TK_0= 'package' identGen+= ident TK_1= ';' (requiresClauseGen+= requiresClause )? (containsClauseGen+= containsClause )? TK_2= 'end' TK_3= '.' ;
    public final delphiParser.packageDecl_return packageDecl() throws RecognitionException {
        delphiParser.packageDecl_return retval = new delphiParser.packageDecl_return();
        retval.start = input.LT(1);
        int packageDecl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_identGen=null;
        List list_requiresClauseGen=null;
        List list_containsClauseGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope requiresClauseGen = null;
        RuleReturnScope containsClauseGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // delphi.g:244:1: (TK_0= 'package' identGen+= ident TK_1= ';' (requiresClauseGen+= requiresClause )? (containsClauseGen+= containsClause )? TK_2= 'end' TK_3= '.' )
            // delphi.g:244:5: TK_0= 'package' identGen+= ident TK_1= ';' (requiresClauseGen+= requiresClause )? (containsClauseGen+= containsClause )? TK_2= 'end' TK_3= '.'
            {
            TK_0=(Token)match(input,22,FOLLOW_22_in_packageDecl264); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_packageDecl269);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            TK_1=(Token)match(input,19,FOLLOW_19_in_packageDecl274); if (state.failed) return retval;
            // delphi.g:244:47: (requiresClauseGen+= requiresClause )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==161) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // delphi.g:244:49: requiresClauseGen+= requiresClause
                    {
                    pushFollow(FOLLOW_requiresClause_in_packageDecl280);
                    requiresClauseGen=requiresClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_requiresClauseGen==null) list_requiresClauseGen=new ArrayList();
                    list_requiresClauseGen.add(requiresClauseGen);


                    }
                    break;

            }

            // delphi.g:244:85: (containsClauseGen+= containsClause )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==162) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // delphi.g:244:87: containsClauseGen+= containsClause
                    {
                    pushFollow(FOLLOW_containsClause_in_packageDecl288);
                    containsClauseGen=containsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_containsClauseGen==null) list_containsClauseGen=new ArrayList();
                    list_containsClauseGen.add(containsClauseGen);


                    }
                    break;

            }

            TK_2=(Token)match(input,23,FOLLOW_23_in_packageDecl295); if (state.failed) return retval;
            TK_3=(Token)match(input,20,FOLLOW_20_in_packageDecl300); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node packageDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		packageDeclReturnNode.setKind("packageDecl");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		packageDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	packageDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		packageDeclReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_requiresClauseGen != null) {
              	        for(Iterator it = list_requiresClauseGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.requiresClause_return r = (delphiParser.requiresClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("requiresClause");
              	            	packageDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_containsClauseGen != null) {
              	        for(Iterator it = list_containsClauseGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.containsClause_return r = (delphiParser.containsClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("containsClause");
              	            	packageDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		packageDeclReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		packageDeclReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = packageDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, packageDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDecl"

    public static class library_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "library"
    // delphi.g:304:1: library returns [Node returnNode] : TK_0= 'library' identGen+= ident TK_1= ';' programBlockGen+= programBlock TK_2= '.' ;
    public final delphiParser.library_return library() throws RecognitionException {
        delphiParser.library_return retval = new delphiParser.library_return();
        retval.start = input.LT(1);
        int library_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_identGen=null;
        List list_programBlockGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope programBlockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // delphi.g:305:1: (TK_0= 'library' identGen+= ident TK_1= ';' programBlockGen+= programBlock TK_2= '.' )
            // delphi.g:305:5: TK_0= 'library' identGen+= ident TK_1= ';' programBlockGen+= programBlock TK_2= '.'
            {
            TK_0=(Token)match(input,24,FOLLOW_24_in_library323); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_library328);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            TK_1=(Token)match(input,19,FOLLOW_19_in_library333); if (state.failed) return retval;
            pushFollow(FOLLOW_programBlock_in_library338);
            programBlockGen=programBlock();

            state._fsp--;
            if (state.failed) return retval;
            if (list_programBlockGen==null) list_programBlockGen=new ArrayList();
            list_programBlockGen.add(programBlockGen);

            TK_2=(Token)match(input,20,FOLLOW_20_in_library343); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node libraryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		libraryReturnNode.setKind("library");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		libraryReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	libraryReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		libraryReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_programBlockGen != null) {
              	        for(Iterator it = list_programBlockGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.programBlock_return r = (delphiParser.programBlock_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("programBlock");
              	            	libraryReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		libraryReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = libraryReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, library_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "library"

    public static class programBlock_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "programBlock"
    // delphi.g:350:1: programBlock returns [Node returnNode] : (usesClauseGen+= usesClause )? blockGen+= block ;
    public final delphiParser.programBlock_return programBlock() throws RecognitionException {
        delphiParser.programBlock_return retval = new delphiParser.programBlock_return();
        retval.start = input.LT(1);
        int programBlock_StartIndex = input.index();
        List list_usesClauseGen=null;
        List list_blockGen=null;
        RuleReturnScope usesClauseGen = null;
        RuleReturnScope blockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // delphi.g:351:1: ( (usesClauseGen+= usesClause )? blockGen+= block )
            // delphi.g:351:4: (usesClauseGen+= usesClause )? blockGen+= block
            {
            // delphi.g:351:4: (usesClauseGen+= usesClause )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==25) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // delphi.g:351:6: usesClauseGen+= usesClause
                    {
                    pushFollow(FOLLOW_usesClause_in_programBlock367);
                    usesClauseGen=usesClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_usesClauseGen==null) list_usesClauseGen=new ArrayList();
                    list_usesClauseGen.add(usesClauseGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_programBlock374);
            blockGen=block();

            state._fsp--;
            if (state.failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node programBlockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		programBlockReturnNode.setKind("programBlock");
              	    // Create a CST Node
              		if(list_usesClauseGen != null) {
              	        for(Iterator it = list_usesClauseGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.usesClause_return r = (delphiParser.usesClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("usesClause");
              	            	programBlockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.block_return r = (delphiParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	programBlockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = programBlockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, programBlock_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "programBlock"

    public static class usesClause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "usesClause"
    // delphi.g:381:1: usesClause returns [Node returnNode] : TK_0= 'uses' identListGen+= identList TK_1= ';' ;
    public final delphiParser.usesClause_return usesClause() throws RecognitionException {
        delphiParser.usesClause_return retval = new delphiParser.usesClause_return();
        retval.start = input.LT(1);
        int usesClause_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identListGen=null;
        RuleReturnScope identListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // delphi.g:382:1: (TK_0= 'uses' identListGen+= identList TK_1= ';' )
            // delphi.g:382:5: TK_0= 'uses' identListGen+= identList TK_1= ';'
            {
            TK_0=(Token)match(input,25,FOLLOW_25_in_usesClause399); if (state.failed) return retval;
            pushFollow(FOLLOW_identList_in_usesClause404);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_1=(Token)match(input,19,FOLLOW_19_in_usesClause409); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node usesClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		usesClauseReturnNode.setKind("usesClause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		usesClauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	usesClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		usesClauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = usesClauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, usesClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "usesClause"

    public static class portabilityDirective_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "portabilityDirective"
    // delphi.g:412:1: portabilityDirective returns [Node returnNode] : (TK_0= 'platform' | TK_0= 'deprecated' | TK_0= 'library' );
    public final delphiParser.portabilityDirective_return portabilityDirective() throws RecognitionException {
        delphiParser.portabilityDirective_return retval = new delphiParser.portabilityDirective_return();
        retval.start = input.LT(1);
        int portabilityDirective_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // delphi.g:413:1: (TK_0= 'platform' | TK_0= 'deprecated' | TK_0= 'library' )
            int alt8=3;
            switch ( input.LA(1) ) {
            case 26:
                {
                alt8=1;
                }
                break;
            case 27:
                {
                alt8=2;
                }
                break;
            case 24:
                {
                alt8=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 8, 0, input);

                throw nvae;
            }

            switch (alt8) {
                case 1 :
                    // delphi.g:413:5: TK_0= 'platform'
                    {
                    TK_0=(Token)match(input,26,FOLLOW_26_in_portabilityDirective432); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node portabilityDirectiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		portabilityDirectiveReturnNode.setKind("portabilityDirective");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		portabilityDirectiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = portabilityDirectiveReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:426:9: TK_0= 'deprecated'
                    {
                    TK_0=(Token)match(input,27,FOLLOW_27_in_portabilityDirective448); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node portabilityDirectiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		portabilityDirectiveReturnNode.setKind("portabilityDirective");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		portabilityDirectiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = portabilityDirectiveReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:439:9: TK_0= 'library'
                    {
                    TK_0=(Token)match(input,24,FOLLOW_24_in_portabilityDirective464); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node portabilityDirectiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		portabilityDirectiveReturnNode.setKind("portabilityDirective");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		portabilityDirectiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = portabilityDirectiveReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, portabilityDirective_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "portabilityDirective"

    public static class interfaceSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceSection"
    // delphi.g:454:1: interfaceSection returns [Node returnNode] : TK_0= 'interface' (usesClauseGen+= usesClause )? (interfaceDeclGen+= interfaceDecl )* ;
    public final delphiParser.interfaceSection_return interfaceSection() throws RecognitionException {
        delphiParser.interfaceSection_return retval = new delphiParser.interfaceSection_return();
        retval.start = input.LT(1);
        int interfaceSection_StartIndex = input.index();
        Token TK_0=null;
        List list_usesClauseGen=null;
        List list_interfaceDeclGen=null;
        RuleReturnScope usesClauseGen = null;
        RuleReturnScope interfaceDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // delphi.g:455:1: (TK_0= 'interface' (usesClauseGen+= usesClause )? (interfaceDeclGen+= interfaceDecl )* )
            // delphi.g:455:5: TK_0= 'interface' (usesClauseGen+= usesClause )? (interfaceDeclGen+= interfaceDecl )*
            {
            TK_0=(Token)match(input,28,FOLLOW_28_in_interfaceSection487); if (state.failed) return retval;
            // delphi.g:455:22: (usesClauseGen+= usesClause )?
            int alt9=2;
            int LA9_0 = input.LA(1);

            if ( (LA9_0==25) ) {
                alt9=1;
            }
            switch (alt9) {
                case 1 :
                    // delphi.g:455:24: usesClauseGen+= usesClause
                    {
                    pushFollow(FOLLOW_usesClause_in_interfaceSection493);
                    usesClauseGen=usesClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_usesClauseGen==null) list_usesClauseGen=new ArrayList();
                    list_usesClauseGen.add(usesClauseGen);


                    }
                    break;

            }

            // delphi.g:455:52: (interfaceDeclGen+= interfaceDecl )*
            loop10:
            do {
                int alt10=2;
                int LA10_0 = input.LA(1);

                if ( (LA10_0==35||(LA10_0>=38 && LA10_0<=39)||LA10_0==76||(LA10_0>=124 && LA10_0<=125)) ) {
                    alt10=1;
                }


                switch (alt10) {
            	case 1 :
            	    // delphi.g:455:54: interfaceDeclGen+= interfaceDecl
            	    {
            	    pushFollow(FOLLOW_interfaceDecl_in_interfaceSection501);
            	    interfaceDeclGen=interfaceDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_interfaceDeclGen==null) list_interfaceDeclGen=new ArrayList();
            	    list_interfaceDeclGen.add(interfaceDeclGen);


            	    }
            	    break;

            	default :
            	    break loop10;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceSectionReturnNode.setKind("interfaceSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		interfaceSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_usesClauseGen != null) {
              	        for(Iterator it = list_usesClauseGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.usesClause_return r = (delphiParser.usesClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("usesClause");
              	            	interfaceSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_interfaceDeclGen != null) {
              	        for(Iterator it = list_interfaceDeclGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.interfaceDecl_return r = (delphiParser.interfaceDecl_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceDecl");
              	            	interfaceSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, interfaceSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceSection"

    public static class interfaceDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceDecl"
    // delphi.g:490:1: interfaceDecl returns [Node returnNode] : (constSectionGen+= constSection | typeSectionGen+= typeSection | varSectionGen+= varSection | exportedHeadingGen+= exportedHeading );
    public final delphiParser.interfaceDecl_return interfaceDecl() throws RecognitionException {
        delphiParser.interfaceDecl_return retval = new delphiParser.interfaceDecl_return();
        retval.start = input.LT(1);
        int interfaceDecl_StartIndex = input.index();
        List list_constSectionGen=null;
        List list_typeSectionGen=null;
        List list_varSectionGen=null;
        List list_exportedHeadingGen=null;
        RuleReturnScope constSectionGen = null;
        RuleReturnScope typeSectionGen = null;
        RuleReturnScope varSectionGen = null;
        RuleReturnScope exportedHeadingGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // delphi.g:491:1: (constSectionGen+= constSection | typeSectionGen+= typeSection | varSectionGen+= varSection | exportedHeadingGen+= exportedHeading )
            int alt11=4;
            switch ( input.LA(1) ) {
            case 35:
                {
                alt11=1;
                }
                break;
            case 38:
                {
                alt11=2;
                }
                break;
            case 76:
                {
                alt11=3;
                }
                break;
            case 39:
            case 124:
            case 125:
                {
                alt11=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }

            switch (alt11) {
                case 1 :
                    // delphi.g:491:5: constSectionGen+= constSection
                    {
                    pushFollow(FOLLOW_constSection_in_interfaceDecl526);
                    constSectionGen=constSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constSectionGen==null) list_constSectionGen=new ArrayList();
                    list_constSectionGen.add(constSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclReturnNode.setKind("interfaceDecl");
                      	    // Create a CST Node
                      		if(list_constSectionGen != null) {
                      	        for(Iterator it = list_constSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constSection_return r = (delphiParser.constSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constSection");
                      	            	interfaceDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:509:9: typeSectionGen+= typeSection
                    {
                    pushFollow(FOLLOW_typeSection_in_interfaceDecl542);
                    typeSectionGen=typeSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeSectionGen==null) list_typeSectionGen=new ArrayList();
                    list_typeSectionGen.add(typeSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclReturnNode.setKind("interfaceDecl");
                      	    // Create a CST Node
                      		if(list_typeSectionGen != null) {
                      	        for(Iterator it = list_typeSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.typeSection_return r = (delphiParser.typeSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeSection");
                      	            	interfaceDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:527:9: varSectionGen+= varSection
                    {
                    pushFollow(FOLLOW_varSection_in_interfaceDecl558);
                    varSectionGen=varSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_varSectionGen==null) list_varSectionGen=new ArrayList();
                    list_varSectionGen.add(varSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclReturnNode.setKind("interfaceDecl");
                      	    // Create a CST Node
                      		if(list_varSectionGen != null) {
                      	        for(Iterator it = list_varSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.varSection_return r = (delphiParser.varSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("varSection");
                      	            	interfaceDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:545:9: exportedHeadingGen+= exportedHeading
                    {
                    pushFollow(FOLLOW_exportedHeading_in_interfaceDecl574);
                    exportedHeadingGen=exportedHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_exportedHeadingGen==null) list_exportedHeadingGen=new ArrayList();
                    list_exportedHeadingGen.add(exportedHeadingGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclReturnNode.setKind("interfaceDecl");
                      	    // Create a CST Node
                      		if(list_exportedHeadingGen != null) {
                      	        for(Iterator it = list_exportedHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.exportedHeading_return r = (delphiParser.exportedHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exportedHeading");
                      	            	interfaceDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, interfaceDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDecl"

    public static class exportedHeading_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exportedHeading"
    // delphi.g:565:1: exportedHeading returns [Node returnNode] : (procedureHeadingGen+= procedureHeading TK_0= ';' (directiveGen+= directive )? | functionHeadingGen+= functionHeading TK_0= ';' (directiveGen+= directive )? );
    public final delphiParser.exportedHeading_return exportedHeading() throws RecognitionException {
        delphiParser.exportedHeading_return retval = new delphiParser.exportedHeading_return();
        retval.start = input.LT(1);
        int exportedHeading_StartIndex = input.index();
        Token TK_0=null;
        List list_procedureHeadingGen=null;
        List list_directiveGen=null;
        List list_functionHeadingGen=null;
        RuleReturnScope procedureHeadingGen = null;
        RuleReturnScope directiveGen = null;
        RuleReturnScope functionHeadingGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // delphi.g:566:1: (procedureHeadingGen+= procedureHeading TK_0= ';' (directiveGen+= directive )? | functionHeadingGen+= functionHeading TK_0= ';' (directiveGen+= directive )? )
            int alt14=2;
            switch ( input.LA(1) ) {
            case 39:
                {
                int LA14_1 = input.LA(2);

                if ( (LA14_1==125) ) {
                    alt14=1;
                }
                else if ( (LA14_1==124) ) {
                    alt14=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 14, 1, input);

                    throw nvae;
                }
                }
                break;
            case 125:
                {
                alt14=1;
                }
                break;
            case 124:
                {
                alt14=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 14, 0, input);

                throw nvae;
            }

            switch (alt14) {
                case 1 :
                    // delphi.g:566:5: procedureHeadingGen+= procedureHeading TK_0= ';' (directiveGen+= directive )?
                    {
                    pushFollow(FOLLOW_procedureHeading_in_exportedHeading597);
                    procedureHeadingGen=procedureHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_procedureHeadingGen==null) list_procedureHeadingGen=new ArrayList();
                    list_procedureHeadingGen.add(procedureHeadingGen);

                    TK_0=(Token)match(input,19,FOLLOW_19_in_exportedHeading602); if (state.failed) return retval;
                    // delphi.g:566:53: (directiveGen+= directive )?
                    int alt12=2;
                    int LA12_0 = input.LA(1);

                    if ( ((LA12_0>=127 && LA12_0<=145)) ) {
                        alt12=1;
                    }
                    switch (alt12) {
                        case 1 :
                            // delphi.g:566:55: directiveGen+= directive
                            {
                            pushFollow(FOLLOW_directive_in_exportedHeading608);
                            directiveGen=directive();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_directiveGen==null) list_directiveGen=new ArrayList();
                            list_directiveGen.add(directiveGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node exportedHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		exportedHeadingReturnNode.setKind("exportedHeading");
                      	    // Create a CST Node
                      		if(list_procedureHeadingGen != null) {
                      	        for(Iterator it = list_procedureHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.procedureHeading_return r = (delphiParser.procedureHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedureHeading");
                      	            	exportedHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		exportedHeadingReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_directiveGen != null) {
                      	        for(Iterator it = list_directiveGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.directive_return r = (delphiParser.directive_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("directive");
                      	            	exportedHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = exportedHeadingReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:599:6: functionHeadingGen+= functionHeading TK_0= ';' (directiveGen+= directive )?
                    {
                    pushFollow(FOLLOW_functionHeading_in_exportedHeading623);
                    functionHeadingGen=functionHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_functionHeadingGen==null) list_functionHeadingGen=new ArrayList();
                    list_functionHeadingGen.add(functionHeadingGen);

                    TK_0=(Token)match(input,19,FOLLOW_19_in_exportedHeading628); if (state.failed) return retval;
                    // delphi.g:599:52: (directiveGen+= directive )?
                    int alt13=2;
                    int LA13_0 = input.LA(1);

                    if ( ((LA13_0>=127 && LA13_0<=145)) ) {
                        alt13=1;
                    }
                    switch (alt13) {
                        case 1 :
                            // delphi.g:599:54: directiveGen+= directive
                            {
                            pushFollow(FOLLOW_directive_in_exportedHeading634);
                            directiveGen=directive();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_directiveGen==null) list_directiveGen=new ArrayList();
                            list_directiveGen.add(directiveGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node exportedHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		exportedHeadingReturnNode.setKind("exportedHeading");
                      	    // Create a CST Node
                      		if(list_functionHeadingGen != null) {
                      	        for(Iterator it = list_functionHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.functionHeading_return r = (delphiParser.functionHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("functionHeading");
                      	            	exportedHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		exportedHeadingReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_directiveGen != null) {
                      	        for(Iterator it = list_directiveGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.directive_return r = (delphiParser.directive_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("directive");
                      	            	exportedHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = exportedHeadingReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, exportedHeading_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exportedHeading"

    public static class implementationSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "implementationSection"
    // delphi.g:634:1: implementationSection returns [Node returnNode] : TK_0= 'implementation' (usesClauseGen+= usesClause )? (declSectionGen+= declSection )* (exportsStmtGen+= exportsStmt )* ;
    public final delphiParser.implementationSection_return implementationSection() throws RecognitionException {
        delphiParser.implementationSection_return retval = new delphiParser.implementationSection_return();
        retval.start = input.LT(1);
        int implementationSection_StartIndex = input.index();
        Token TK_0=null;
        List list_usesClauseGen=null;
        List list_declSectionGen=null;
        List list_exportsStmtGen=null;
        RuleReturnScope usesClauseGen = null;
        RuleReturnScope declSectionGen = null;
        RuleReturnScope exportsStmtGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // delphi.g:635:1: (TK_0= 'implementation' (usesClauseGen+= usesClause )? (declSectionGen+= declSection )* (exportsStmtGen+= exportsStmt )* )
            // delphi.g:635:5: TK_0= 'implementation' (usesClauseGen+= usesClause )? (declSectionGen+= declSection )* (exportsStmtGen+= exportsStmt )*
            {
            TK_0=(Token)match(input,29,FOLLOW_29_in_implementationSection659); if (state.failed) return retval;
            // delphi.g:635:27: (usesClauseGen+= usesClause )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==25) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // delphi.g:635:29: usesClauseGen+= usesClause
                    {
                    pushFollow(FOLLOW_usesClause_in_implementationSection665);
                    usesClauseGen=usesClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_usesClauseGen==null) list_usesClauseGen=new ArrayList();
                    list_usesClauseGen.add(usesClauseGen);


                    }
                    break;

            }

            // delphi.g:635:57: (declSectionGen+= declSection )*
            loop16:
            do {
                int alt16=2;
                int LA16_0 = input.LA(1);

                if ( ((LA16_0>=34 && LA16_0<=35)||(LA16_0>=38 && LA16_0<=39)||LA16_0==76||(LA16_0>=124 && LA16_0<=125)) ) {
                    alt16=1;
                }


                switch (alt16) {
            	case 1 :
            	    // delphi.g:635:59: declSectionGen+= declSection
            	    {
            	    pushFollow(FOLLOW_declSection_in_implementationSection673);
            	    declSectionGen=declSection();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_declSectionGen==null) list_declSectionGen=new ArrayList();
            	    list_declSectionGen.add(declSectionGen);


            	    }
            	    break;

            	default :
            	    break loop16;
                }
            } while (true);

            // delphi.g:635:89: (exportsStmtGen+= exportsStmt )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==32) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // delphi.g:635:91: exportsStmtGen+= exportsStmt
            	    {
            	    pushFollow(FOLLOW_exportsStmt_in_implementationSection681);
            	    exportsStmtGen=exportsStmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_exportsStmtGen==null) list_exportsStmtGen=new ArrayList();
            	    list_exportsStmtGen.add(exportsStmtGen);


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node implementationSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		implementationSectionReturnNode.setKind("implementationSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		implementationSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_usesClauseGen != null) {
              	        for(Iterator it = list_usesClauseGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.usesClause_return r = (delphiParser.usesClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("usesClause");
              	            	implementationSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_declSectionGen != null) {
              	        for(Iterator it = list_declSectionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.declSection_return r = (delphiParser.declSection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("declSection");
              	            	implementationSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_exportsStmtGen != null) {
              	        for(Iterator it = list_exportsStmtGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.exportsStmt_return r = (delphiParser.exportsStmt_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exportsStmt");
              	            	implementationSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = implementationSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, implementationSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "implementationSection"

    public static class block_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "block"
    // delphi.g:680:1: block returns [Node returnNode] : (declSectionGen+= declSection )? (exportsStmtGen+= exportsStmt )* compoundStmtGen+= compoundStmt (exportsStmtGen_1+= exportsStmt )* ;
    public final delphiParser.block_return block() throws RecognitionException {
        delphiParser.block_return retval = new delphiParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        List list_declSectionGen=null;
        List list_exportsStmtGen=null;
        List list_compoundStmtGen=null;
        List list_exportsStmtGen_1=null;
        RuleReturnScope declSectionGen = null;
        RuleReturnScope exportsStmtGen = null;
        RuleReturnScope compoundStmtGen = null;
        RuleReturnScope exportsStmtGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // delphi.g:681:1: ( (declSectionGen+= declSection )? (exportsStmtGen+= exportsStmt )* compoundStmtGen+= compoundStmt (exportsStmtGen_1+= exportsStmt )* )
            // delphi.g:681:4: (declSectionGen+= declSection )? (exportsStmtGen+= exportsStmt )* compoundStmtGen+= compoundStmt (exportsStmtGen_1+= exportsStmt )*
            {
            // delphi.g:681:4: (declSectionGen+= declSection )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( ((LA18_0>=34 && LA18_0<=35)||(LA18_0>=38 && LA18_0<=39)||LA18_0==76||(LA18_0>=124 && LA18_0<=125)) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // delphi.g:681:6: declSectionGen+= declSection
                    {
                    pushFollow(FOLLOW_declSection_in_block707);
                    declSectionGen=declSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_declSectionGen==null) list_declSectionGen=new ArrayList();
                    list_declSectionGen.add(declSectionGen);


                    }
                    break;

            }

            // delphi.g:681:36: (exportsStmtGen+= exportsStmt )*
            loop19:
            do {
                int alt19=2;
                int LA19_0 = input.LA(1);

                if ( (LA19_0==32) ) {
                    alt19=1;
                }


                switch (alt19) {
            	case 1 :
            	    // delphi.g:681:38: exportsStmtGen+= exportsStmt
            	    {
            	    pushFollow(FOLLOW_exportsStmt_in_block715);
            	    exportsStmtGen=exportsStmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_exportsStmtGen==null) list_exportsStmtGen=new ArrayList();
            	    list_exportsStmtGen.add(exportsStmtGen);


            	    }
            	    break;

            	default :
            	    break loop19;
                }
            } while (true);

            pushFollow(FOLLOW_compoundStmt_in_block722);
            compoundStmtGen=compoundStmt();

            state._fsp--;
            if (state.failed) return retval;
            if (list_compoundStmtGen==null) list_compoundStmtGen=new ArrayList();
            list_compoundStmtGen.add(compoundStmtGen);

            // delphi.g:681:99: (exportsStmtGen_1+= exportsStmt )*
            loop20:
            do {
                int alt20=2;
                int LA20_0 = input.LA(1);

                if ( (LA20_0==32) ) {
                    alt20=1;
                }


                switch (alt20) {
            	case 1 :
            	    // delphi.g:681:101: exportsStmtGen_1+= exportsStmt
            	    {
            	    pushFollow(FOLLOW_exportsStmt_in_block728);
            	    exportsStmtGen_1=exportsStmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_exportsStmtGen_1==null) list_exportsStmtGen_1=new ArrayList();
            	    list_exportsStmtGen_1.add(exportsStmtGen_1);


            	    }
            	    break;

            	default :
            	    break loop20;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		blockReturnNode.setKind("block");
              	    // Create a CST Node
              		if(list_declSectionGen != null) {
              	        for(Iterator it = list_declSectionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.declSection_return r = (delphiParser.declSection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("declSection");
              	            	blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_exportsStmtGen != null) {
              	        for(Iterator it = list_exportsStmtGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.exportsStmt_return r = (delphiParser.exportsStmt_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exportsStmt");
              	            	blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_compoundStmtGen != null) {
              	        for(Iterator it = list_compoundStmtGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.compoundStmt_return r = (delphiParser.compoundStmt_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("compoundStmt");
              	            	blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_exportsStmtGen_1 != null) {
              	        for(Iterator it = list_exportsStmtGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.exportsStmt_return r = (delphiParser.exportsStmt_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exportsStmt");
              	            	blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = blockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class exportsItem_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exportsItem"
    // delphi.g:732:1: exportsItem returns [Node returnNode] : identGen+= ident (TK_0= 'name' | TK_1= 'index' constExprGen+= constExpr )? (TK_2= 'index' | TK_3= 'name' constExprGen_1+= constExpr )? ;
    public final delphiParser.exportsItem_return exportsItem() throws RecognitionException {
        delphiParser.exportsItem_return retval = new delphiParser.exportsItem_return();
        retval.start = input.LT(1);
        int exportsItem_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_identGen=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        RuleReturnScope identGen = null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // delphi.g:734:2: (identGen+= ident (TK_0= 'name' | TK_1= 'index' constExprGen+= constExpr )? (TK_2= 'index' | TK_3= 'name' constExprGen_1+= constExpr )? )
            // delphi.g:734:6: identGen+= ident (TK_0= 'name' | TK_1= 'index' constExprGen+= constExpr )? (TK_2= 'index' | TK_3= 'name' constExprGen_1+= constExpr )?
            {
            pushFollow(FOLLOW_ident_in_exportsItem756);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:734:22: (TK_0= 'name' | TK_1= 'index' constExprGen+= constExpr )?
            int alt21=3;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==30) ) {
                int LA21_1 = input.LA(2);

                if ( (LA21_1==EOF||(LA21_1>=19 && LA21_1<=20)||LA21_1==23||(LA21_1>=30 && LA21_1<=33)||LA21_1==104||LA21_1==148) ) {
                    alt21=1;
                }
            }
            else if ( (LA21_0==31) ) {
                int LA21_2 = input.LA(2);

                if ( ((LA21_2>=ID && LA21_2<=INT)||(LA21_2>=QVALUE && LA21_2<=DQVALUE)||LA21_2==17||LA21_2==68||(LA21_2>=78 && LA21_2<=82)||LA21_2==100||LA21_2==163) ) {
                    alt21=2;
                }
            }
            switch (alt21) {
                case 1 :
                    // delphi.g:734:24: TK_0= 'name'
                    {
                    TK_0=(Token)match(input,30,FOLLOW_30_in_exportsItem762); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // delphi.g:734:39: TK_1= 'index' constExprGen+= constExpr
                    {
                    TK_1=(Token)match(input,31,FOLLOW_31_in_exportsItem769); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_exportsItem775);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);


                    }
                    break;

            }

            // delphi.g:734:80: (TK_2= 'index' | TK_3= 'name' constExprGen_1+= constExpr )?
            int alt22=3;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==31) ) {
                alt22=1;
            }
            else if ( (LA22_0==30) ) {
                alt22=2;
            }
            switch (alt22) {
                case 1 :
                    // delphi.g:734:82: TK_2= 'index'
                    {
                    TK_2=(Token)match(input,31,FOLLOW_31_in_exportsItem783); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // delphi.g:734:98: TK_3= 'name' constExprGen_1+= constExpr
                    {
                    TK_3=(Token)match(input,30,FOLLOW_30_in_exportsItem790); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_exportsItem795);
                    constExprGen_1=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
                    list_constExprGen_1.add(constExprGen_1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node exportsItemReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exportsItemReturnNode.setKind("exportsItem");
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	exportsItemReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		exportsItemReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		exportsItemReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	exportsItemReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		exportsItemReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		exportsItemReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen_1 != null) {
              	        for(Iterator it = list_constExprGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	exportsItemReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exportsItemReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, exportsItem_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exportsItem"

    public static class exportsStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exportsStmt"
    // delphi.g:793:1: exportsStmt returns [Node returnNode] : TK_0= 'exports' exportsItemGen+= exportsItem (TK_1= ',' exportsItemGen_1+= exportsItem )* ;
    public final delphiParser.exportsStmt_return exportsStmt() throws RecognitionException {
        delphiParser.exportsStmt_return retval = new delphiParser.exportsStmt_return();
        retval.start = input.LT(1);
        int exportsStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_exportsItemGen=null;
        List list_exportsItemGen_1=null;
        RuleReturnScope exportsItemGen = null;
        RuleReturnScope exportsItemGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // delphi.g:794:1: (TK_0= 'exports' exportsItemGen+= exportsItem (TK_1= ',' exportsItemGen_1+= exportsItem )* )
            // delphi.g:794:5: TK_0= 'exports' exportsItemGen+= exportsItem (TK_1= ',' exportsItemGen_1+= exportsItem )*
            {
            TK_0=(Token)match(input,32,FOLLOW_32_in_exportsStmt819); if (state.failed) return retval;
            pushFollow(FOLLOW_exportsItem_in_exportsStmt824);
            exportsItemGen=exportsItem();

            state._fsp--;
            if (state.failed) return retval;
            if (list_exportsItemGen==null) list_exportsItemGen=new ArrayList();
            list_exportsItemGen.add(exportsItemGen);

            // delphi.g:794:49: (TK_1= ',' exportsItemGen_1+= exportsItem )*
            loop23:
            do {
                int alt23=2;
                int LA23_0 = input.LA(1);

                if ( (LA23_0==33) ) {
                    alt23=1;
                }


                switch (alt23) {
            	case 1 :
            	    // delphi.g:794:51: TK_1= ',' exportsItemGen_1+= exportsItem
            	    {
            	    TK_1=(Token)match(input,33,FOLLOW_33_in_exportsStmt830); if (state.failed) return retval;
            	    pushFollow(FOLLOW_exportsItem_in_exportsStmt835);
            	    exportsItemGen_1=exportsItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_exportsItemGen_1==null) list_exportsItemGen_1=new ArrayList();
            	    list_exportsItemGen_1.add(exportsItemGen_1);


            	    }
            	    break;

            	default :
            	    break loop23;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node exportsStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exportsStmtReturnNode.setKind("exportsStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		exportsStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exportsItemGen != null) {
              	        for(Iterator it = list_exportsItemGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.exportsItem_return r = (delphiParser.exportsItem_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exportsItem");
              	            	exportsStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal exportsItemGen_1 aggregation
              		if(list_exportsItemGen_1 != null) {
              	    for(int pos = 0; pos < list_exportsItemGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		exportsStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_exportsItemGen_1 != null) {		
              	    	delphiParser.exportsItem_return r = (delphiParser.exportsItem_return) list_exportsItemGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("exportsItem");
              	    		exportsStmtReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exportsStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, exportsStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exportsStmt"

    public static class declSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "declSection"
    // delphi.g:840:1: declSection returns [Node returnNode] : (labelDeclSectionGen+= labelDeclSection | constSectionGen+= constSection | typeSectionGen+= typeSection | varSectionGen+= varSection | procedureDeclSectionGen+= procedureDeclSection );
    public final delphiParser.declSection_return declSection() throws RecognitionException {
        delphiParser.declSection_return retval = new delphiParser.declSection_return();
        retval.start = input.LT(1);
        int declSection_StartIndex = input.index();
        List list_labelDeclSectionGen=null;
        List list_constSectionGen=null;
        List list_typeSectionGen=null;
        List list_varSectionGen=null;
        List list_procedureDeclSectionGen=null;
        RuleReturnScope labelDeclSectionGen = null;
        RuleReturnScope constSectionGen = null;
        RuleReturnScope typeSectionGen = null;
        RuleReturnScope varSectionGen = null;
        RuleReturnScope procedureDeclSectionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // delphi.g:841:1: (labelDeclSectionGen+= labelDeclSection | constSectionGen+= constSection | typeSectionGen+= typeSection | varSectionGen+= varSection | procedureDeclSectionGen+= procedureDeclSection )
            int alt24=5;
            switch ( input.LA(1) ) {
            case 34:
                {
                alt24=1;
                }
                break;
            case 35:
                {
                alt24=2;
                }
                break;
            case 38:
                {
                alt24=3;
                }
                break;
            case 76:
                {
                alt24=4;
                }
                break;
            case 39:
            case 124:
            case 125:
                {
                alt24=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 24, 0, input);

                throw nvae;
            }

            switch (alt24) {
                case 1 :
                    // delphi.g:841:5: labelDeclSectionGen+= labelDeclSection
                    {
                    pushFollow(FOLLOW_labelDeclSection_in_declSection861);
                    labelDeclSectionGen=labelDeclSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_labelDeclSectionGen==null) list_labelDeclSectionGen=new ArrayList();
                    list_labelDeclSectionGen.add(labelDeclSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node declSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declSectionReturnNode.setKind("declSection");
                      	    // Create a CST Node
                      		if(list_labelDeclSectionGen != null) {
                      	        for(Iterator it = list_labelDeclSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.labelDeclSection_return r = (delphiParser.labelDeclSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("labelDeclSection");
                      	            	declSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:859:9: constSectionGen+= constSection
                    {
                    pushFollow(FOLLOW_constSection_in_declSection877);
                    constSectionGen=constSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constSectionGen==null) list_constSectionGen=new ArrayList();
                    list_constSectionGen.add(constSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node declSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declSectionReturnNode.setKind("declSection");
                      	    // Create a CST Node
                      		if(list_constSectionGen != null) {
                      	        for(Iterator it = list_constSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constSection_return r = (delphiParser.constSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constSection");
                      	            	declSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:877:10: typeSectionGen+= typeSection
                    {
                    pushFollow(FOLLOW_typeSection_in_declSection894);
                    typeSectionGen=typeSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeSectionGen==null) list_typeSectionGen=new ArrayList();
                    list_typeSectionGen.add(typeSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node declSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declSectionReturnNode.setKind("declSection");
                      	    // Create a CST Node
                      		if(list_typeSectionGen != null) {
                      	        for(Iterator it = list_typeSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.typeSection_return r = (delphiParser.typeSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeSection");
                      	            	declSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:895:10: varSectionGen+= varSection
                    {
                    pushFollow(FOLLOW_varSection_in_declSection911);
                    varSectionGen=varSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_varSectionGen==null) list_varSectionGen=new ArrayList();
                    list_varSectionGen.add(varSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node declSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declSectionReturnNode.setKind("declSection");
                      	    // Create a CST Node
                      		if(list_varSectionGen != null) {
                      	        for(Iterator it = list_varSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.varSection_return r = (delphiParser.varSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("varSection");
                      	            	declSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:913:10: procedureDeclSectionGen+= procedureDeclSection
                    {
                    pushFollow(FOLLOW_procedureDeclSection_in_declSection928);
                    procedureDeclSectionGen=procedureDeclSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_procedureDeclSectionGen==null) list_procedureDeclSectionGen=new ArrayList();
                    list_procedureDeclSectionGen.add(procedureDeclSectionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node declSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		declSectionReturnNode.setKind("declSection");
                      	    // Create a CST Node
                      		if(list_procedureDeclSectionGen != null) {
                      	        for(Iterator it = list_procedureDeclSectionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.procedureDeclSection_return r = (delphiParser.procedureDeclSection_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedureDeclSection");
                      	            	declSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = declSectionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, declSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "declSection"

    public static class labelDeclSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "labelDeclSection"
    // delphi.g:933:1: labelDeclSection returns [Node returnNode] : TK_0= 'label' labelIdGen+= labelId ;
    public final delphiParser.labelDeclSection_return labelDeclSection() throws RecognitionException {
        delphiParser.labelDeclSection_return retval = new delphiParser.labelDeclSection_return();
        retval.start = input.LT(1);
        int labelDeclSection_StartIndex = input.index();
        Token TK_0=null;
        List list_labelIdGen=null;
        RuleReturnScope labelIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // delphi.g:934:1: (TK_0= 'label' labelIdGen+= labelId )
            // delphi.g:934:5: TK_0= 'label' labelIdGen+= labelId
            {
            TK_0=(Token)match(input,34,FOLLOW_34_in_labelDeclSection951); if (state.failed) return retval;
            pushFollow(FOLLOW_labelId_in_labelDeclSection956);
            labelIdGen=labelId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_labelIdGen==null) list_labelIdGen=new ArrayList();
            list_labelIdGen.add(labelIdGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node labelDeclSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		labelDeclSectionReturnNode.setKind("labelDeclSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		labelDeclSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_labelIdGen != null) {
              	        for(Iterator it = list_labelIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.labelId_return r = (delphiParser.labelId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("labelId");
              	            	labelDeclSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = labelDeclSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, labelDeclSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "labelDeclSection"

    public static class constSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constSection"
    // delphi.g:959:1: constSection returns [Node returnNode] : TK_0= 'const' (constantDeclGen+= constantDecl TK_1= ';' )* ;
    public final delphiParser.constSection_return constSection() throws RecognitionException {
        delphiParser.constSection_return retval = new delphiParser.constSection_return();
        retval.start = input.LT(1);
        int constSection_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_constantDeclGen=null;
        RuleReturnScope constantDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // delphi.g:960:1: (TK_0= 'const' (constantDeclGen+= constantDecl TK_1= ';' )* )
            // delphi.g:960:5: TK_0= 'const' (constantDeclGen+= constantDecl TK_1= ';' )*
            {
            TK_0=(Token)match(input,35,FOLLOW_35_in_constSection979); if (state.failed) return retval;
            // delphi.g:960:18: (constantDeclGen+= constantDecl TK_1= ';' )*
            loop25:
            do {
                int alt25=2;
                int LA25_0 = input.LA(1);

                if ( (LA25_0==ID||LA25_0==100) ) {
                    alt25=1;
                }


                switch (alt25) {
            	case 1 :
            	    // delphi.g:960:20: constantDeclGen+= constantDecl TK_1= ';'
            	    {
            	    pushFollow(FOLLOW_constantDecl_in_constSection985);
            	    constantDeclGen=constantDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_constantDeclGen==null) list_constantDeclGen=new ArrayList();
            	    list_constantDeclGen.add(constantDeclGen);

            	    TK_1=(Token)match(input,19,FOLLOW_19_in_constSection990); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop25;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constSectionReturnNode.setKind("constSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		constSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}

              		// Create a special CST Node for terminal constantDeclGen aggregation
              		if(list_constantDeclGen != null) {
              	    for(int pos = 0; pos < list_constantDeclGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_constantDeclGen != null) {		
              	    	delphiParser.constantDecl_return r = (delphiParser.constantDecl_return) list_constantDeclGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("constantDecl");
              	    		constSectionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		constSectionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, constSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constSection"

    public static class constantDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constantDecl"
    // delphi.g:995:1: constantDecl returns [Node returnNode] : (identGen+= ident TK_0= '=' constExprGen+= constExpr (portabilityDirectiveGen+= portabilityDirective )? | identGen+= ident TK_0= ':' typeIdGen+= typeId TK_1= '=' typedConstantGen+= typedConstant (portabilityDirectiveGen+= portabilityDirective )? );
    public final delphiParser.constantDecl_return constantDecl() throws RecognitionException {
        delphiParser.constantDecl_return retval = new delphiParser.constantDecl_return();
        retval.start = input.LT(1);
        int constantDecl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identGen=null;
        List list_constExprGen=null;
        List list_portabilityDirectiveGen=null;
        List list_typeIdGen=null;
        List list_typedConstantGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        RuleReturnScope typeIdGen = null;
        RuleReturnScope typedConstantGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // delphi.g:996:1: (identGen+= ident TK_0= '=' constExprGen+= constExpr (portabilityDirectiveGen+= portabilityDirective )? | identGen+= ident TK_0= ':' typeIdGen+= typeId TK_1= '=' typedConstantGen+= typedConstant (portabilityDirectiveGen+= portabilityDirective )? )
            int alt28=2;
            alt28 = dfa28.predict(input);
            switch (alt28) {
                case 1 :
                    // delphi.g:996:5: identGen+= ident TK_0= '=' constExprGen+= constExpr (portabilityDirectiveGen+= portabilityDirective )?
                    {
                    pushFollow(FOLLOW_ident_in_constantDecl1015);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    TK_0=(Token)match(input,36,FOLLOW_36_in_constantDecl1020); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_constantDecl1025);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);

                    // delphi.g:996:56: (portabilityDirectiveGen+= portabilityDirective )?
                    int alt26=2;
                    int LA26_0 = input.LA(1);

                    if ( (LA26_0==24||(LA26_0>=26 && LA26_0<=27)) ) {
                        alt26=1;
                    }
                    switch (alt26) {
                        case 1 :
                            // delphi.g:996:58: portabilityDirectiveGen+= portabilityDirective
                            {
                            pushFollow(FOLLOW_portabilityDirective_in_constantDecl1031);
                            portabilityDirectiveGen=portabilityDirective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                            list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node constantDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		constantDeclReturnNode.setKind("constantDecl");
                      	    // Create a CST Node
                      		if(list_identGen != null) {
                      	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ident");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		constantDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constExprGen != null) {
                      	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constExpr");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_portabilityDirectiveGen != null) {
                      	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("portabilityDirective");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = constantDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1039:9: identGen+= ident TK_0= ':' typeIdGen+= typeId TK_1= '=' typedConstantGen+= typedConstant (portabilityDirectiveGen+= portabilityDirective )?
                    {
                    pushFollow(FOLLOW_ident_in_constantDecl1049);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    TK_0=(Token)match(input,37,FOLLOW_37_in_constantDecl1054); if (state.failed) return retval;
                    pushFollow(FOLLOW_typeId_in_constantDecl1059);
                    typeIdGen=typeId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
                    list_typeIdGen.add(typeIdGen);

                    TK_1=(Token)match(input,36,FOLLOW_36_in_constantDecl1064); if (state.failed) return retval;
                    pushFollow(FOLLOW_typedConstant_in_constantDecl1069);
                    typedConstantGen=typedConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typedConstantGen==null) list_typedConstantGen=new ArrayList();
                    list_typedConstantGen.add(typedConstantGen);

                    // delphi.g:1039:97: (portabilityDirectiveGen+= portabilityDirective )?
                    int alt27=2;
                    int LA27_0 = input.LA(1);

                    if ( (LA27_0==24||(LA27_0>=26 && LA27_0<=27)) ) {
                        alt27=1;
                    }
                    switch (alt27) {
                        case 1 :
                            // delphi.g:1039:99: portabilityDirectiveGen+= portabilityDirective
                            {
                            pushFollow(FOLLOW_portabilityDirective_in_constantDecl1075);
                            portabilityDirectiveGen=portabilityDirective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                            list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node constantDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		constantDeclReturnNode.setKind("constantDecl");
                      	    // Create a CST Node
                      		if(list_identGen != null) {
                      	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ident");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		constantDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeIdGen != null) {
                      	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeId");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		constantDeclReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typedConstantGen != null) {
                      	        for(Iterator it = list_typedConstantGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.typedConstant_return r = (delphiParser.typedConstant_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typedConstant");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_portabilityDirectiveGen != null) {
                      	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("portabilityDirective");
                      	            	constantDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = constantDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, constantDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDecl"

    public static class typeSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeSection"
    // delphi.g:1099:1: typeSection returns [Node returnNode] : TK_0= 'type' (typeDeclGen+= typeDecl TK_1= ';' )* ;
    public final delphiParser.typeSection_return typeSection() throws RecognitionException {
        delphiParser.typeSection_return retval = new delphiParser.typeSection_return();
        retval.start = input.LT(1);
        int typeSection_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_typeDeclGen=null;
        RuleReturnScope typeDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // delphi.g:1100:1: (TK_0= 'type' (typeDeclGen+= typeDecl TK_1= ';' )* )
            // delphi.g:1100:4: TK_0= 'type' (typeDeclGen+= typeDecl TK_1= ';' )*
            {
            TK_0=(Token)match(input,38,FOLLOW_38_in_typeSection1099); if (state.failed) return retval;
            // delphi.g:1100:16: (typeDeclGen+= typeDecl TK_1= ';' )*
            loop29:
            do {
                int alt29=2;
                int LA29_0 = input.LA(1);

                if ( (LA29_0==ID||LA29_0==100) ) {
                    alt29=1;
                }


                switch (alt29) {
            	case 1 :
            	    // delphi.g:1100:18: typeDeclGen+= typeDecl TK_1= ';'
            	    {
            	    pushFollow(FOLLOW_typeDecl_in_typeSection1105);
            	    typeDeclGen=typeDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeDeclGen==null) list_typeDeclGen=new ArrayList();
            	    list_typeDeclGen.add(typeDeclGen);

            	    TK_1=(Token)match(input,19,FOLLOW_19_in_typeSection1110); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop29;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typeSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeSectionReturnNode.setKind("typeSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		typeSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}

              		// Create a special CST Node for terminal typeDeclGen aggregation
              		if(list_typeDeclGen != null) {
              	    for(int pos = 0; pos < list_typeDeclGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_typeDeclGen != null) {		
              	    	delphiParser.typeDecl_return r = (delphiParser.typeDecl_return) list_typeDeclGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("typeDecl");
              	    		typeSectionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		typeSectionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, typeSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeSection"

    public static class typeDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeDecl"
    // delphi.g:1135:1: typeDecl returns [Node returnNode] : (identGen+= ident TK_0= '=' (TK_1= 'type' )? typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? | identGen+= ident TK_0= '=' (TK_1= 'type' )? restrictedTypeGen+= restrictedType (portabilityDirectiveGen+= portabilityDirective )? );
    public final delphiParser.typeDecl_return typeDecl() throws RecognitionException {
        delphiParser.typeDecl_return retval = new delphiParser.typeDecl_return();
        retval.start = input.LT(1);
        int typeDecl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identGen=null;
        List list_typeGen=null;
        List list_portabilityDirectiveGen=null;
        List list_restrictedTypeGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        RuleReturnScope restrictedTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // delphi.g:1136:1: (identGen+= ident TK_0= '=' (TK_1= 'type' )? typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? | identGen+= ident TK_0= '=' (TK_1= 'type' )? restrictedTypeGen+= restrictedType (portabilityDirectiveGen+= portabilityDirective )? )
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==ID) ) {
                int LA34_1 = input.LA(2);

                if ( (synpred42_delphi()) ) {
                    alt34=1;
                }
                else if ( (true) ) {
                    alt34=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 34, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA34_0==100) ) {
                int LA34_2 = input.LA(2);

                if ( (synpred42_delphi()) ) {
                    alt34=1;
                }
                else if ( (true) ) {
                    alt34=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 34, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 34, 0, input);

                throw nvae;
            }
            switch (alt34) {
                case 1 :
                    // delphi.g:1136:5: identGen+= ident TK_0= '=' (TK_1= 'type' )? typeGen+= type (portabilityDirectiveGen+= portabilityDirective )?
                    {
                    pushFollow(FOLLOW_ident_in_typeDecl1135);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    TK_0=(Token)match(input,36,FOLLOW_36_in_typeDecl1140); if (state.failed) return retval;
                    // delphi.g:1136:31: (TK_1= 'type' )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==38) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // delphi.g:1136:33: TK_1= 'type'
                            {
                            TK_1=(Token)match(input,38,FOLLOW_38_in_typeDecl1146); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_type_in_typeDecl1153);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);

                    // delphi.g:1136:62: (portabilityDirectiveGen+= portabilityDirective )?
                    int alt31=2;
                    int LA31_0 = input.LA(1);

                    if ( (LA31_0==24||(LA31_0>=26 && LA31_0<=27)) ) {
                        alt31=1;
                    }
                    switch (alt31) {
                        case 1 :
                            // delphi.g:1136:64: portabilityDirectiveGen+= portabilityDirective
                            {
                            pushFollow(FOLLOW_portabilityDirective_in_typeDecl1159);
                            portabilityDirectiveGen=portabilityDirective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                            list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeDeclReturnNode.setKind("typeDecl");
                      	    // Create a CST Node
                      		if(list_identGen != null) {
                      	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ident");
                      	            	typeDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		typeDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		typeDeclReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	typeDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_portabilityDirectiveGen != null) {
                      	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("portabilityDirective");
                      	            	typeDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1184:5: identGen+= ident TK_0= '=' (TK_1= 'type' )? restrictedTypeGen+= restrictedType (portabilityDirectiveGen+= portabilityDirective )?
                    {
                    pushFollow(FOLLOW_ident_in_typeDecl1173);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    TK_0=(Token)match(input,36,FOLLOW_36_in_typeDecl1178); if (state.failed) return retval;
                    // delphi.g:1184:31: (TK_1= 'type' )?
                    int alt32=2;
                    int LA32_0 = input.LA(1);

                    if ( (LA32_0==38) ) {
                        alt32=1;
                    }
                    switch (alt32) {
                        case 1 :
                            // delphi.g:1184:33: TK_1= 'type'
                            {
                            TK_1=(Token)match(input,38,FOLLOW_38_in_typeDecl1184); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_restrictedType_in_typeDecl1191);
                    restrictedTypeGen=restrictedType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_restrictedTypeGen==null) list_restrictedTypeGen=new ArrayList();
                    list_restrictedTypeGen.add(restrictedTypeGen);

                    // delphi.g:1184:82: (portabilityDirectiveGen+= portabilityDirective )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==24||(LA33_0>=26 && LA33_0<=27)) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // delphi.g:1184:84: portabilityDirectiveGen+= portabilityDirective
                            {
                            pushFollow(FOLLOW_portabilityDirective_in_typeDecl1197);
                            portabilityDirectiveGen=portabilityDirective();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                            list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeDeclReturnNode.setKind("typeDecl");
                      	    // Create a CST Node
                      		if(list_identGen != null) {
                      	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ident");
                      	            	typeDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		typeDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		typeDeclReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_restrictedTypeGen != null) {
                      	        for(Iterator it = list_restrictedTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.restrictedType_return r = (delphiParser.restrictedType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("restrictedType");
                      	            	typeDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_portabilityDirectiveGen != null) {
                      	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("portabilityDirective");
                      	            	typeDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, typeDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDecl"

    public static class typedConstant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typedConstant"
    // delphi.g:1234:1: typedConstant returns [Node returnNode] : (constExprGen+= constExpr | arrayConstantGen+= arrayConstant | recordConstantGen+= recordConstant )? ;
    public final delphiParser.typedConstant_return typedConstant() throws RecognitionException {
        delphiParser.typedConstant_return retval = new delphiParser.typedConstant_return();
        retval.start = input.LT(1);
        int typedConstant_StartIndex = input.index();
        List list_constExprGen=null;
        List list_arrayConstantGen=null;
        List list_recordConstantGen=null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope arrayConstantGen = null;
        RuleReturnScope recordConstantGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // delphi.g:1235:1: ( (constExprGen+= constExpr | arrayConstantGen+= arrayConstant | recordConstantGen+= recordConstant )? )
            // delphi.g:1235:4: (constExprGen+= constExpr | arrayConstantGen+= arrayConstant | recordConstantGen+= recordConstant )?
            {
            // delphi.g:1235:4: (constExprGen+= constExpr | arrayConstantGen+= arrayConstant | recordConstantGen+= recordConstant )?
            int alt35=4;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // delphi.g:1235:6: constExprGen+= constExpr
                    {
                    pushFollow(FOLLOW_constExpr_in_typedConstant1223);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);


                    }
                    break;
                case 2 :
                    // delphi.g:1235:33: arrayConstantGen+= arrayConstant
                    {
                    pushFollow(FOLLOW_arrayConstant_in_typedConstant1230);
                    arrayConstantGen=arrayConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_arrayConstantGen==null) list_arrayConstantGen=new ArrayList();
                    list_arrayConstantGen.add(arrayConstantGen);


                    }
                    break;
                case 3 :
                    // delphi.g:1235:68: recordConstantGen+= recordConstant
                    {
                    pushFollow(FOLLOW_recordConstant_in_typedConstant1237);
                    recordConstantGen=recordConstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_recordConstantGen==null) list_recordConstantGen=new ArrayList();
                    list_recordConstantGen.add(recordConstantGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typedConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typedConstantReturnNode.setKind("typedConstant");
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	typedConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_arrayConstantGen != null) {
              	        for(Iterator it = list_arrayConstantGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.arrayConstant_return r = (delphiParser.arrayConstant_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arrayConstant");
              	            	typedConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_recordConstantGen != null) {
              	        for(Iterator it = list_recordConstantGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.recordConstant_return r = (delphiParser.recordConstant_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("recordConstant");
              	            	typedConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typedConstantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, typedConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typedConstant"

    public static class arrayConstant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "arrayConstant"
    // delphi.g:1275:1: arrayConstant returns [Node returnNode] : TK_0= '(' typedConstantGen+= typedConstant TK_1= ',' TK_2= ')' ;
    public final delphiParser.arrayConstant_return arrayConstant() throws RecognitionException {
        delphiParser.arrayConstant_return retval = new delphiParser.arrayConstant_return();
        retval.start = input.LT(1);
        int arrayConstant_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typedConstantGen=null;
        RuleReturnScope typedConstantGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // delphi.g:1276:1: (TK_0= '(' typedConstantGen+= typedConstant TK_1= ',' TK_2= ')' )
            // delphi.g:1276:5: TK_0= '(' typedConstantGen+= typedConstant TK_1= ',' TK_2= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_arrayConstant1262); if (state.failed) return retval;
            pushFollow(FOLLOW_typedConstant_in_arrayConstant1267);
            typedConstantGen=typedConstant();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typedConstantGen==null) list_typedConstantGen=new ArrayList();
            list_typedConstantGen.add(typedConstantGen);

            TK_1=(Token)match(input,33,FOLLOW_33_in_arrayConstant1272); if (state.failed) return retval;
            TK_2=(Token)match(input,18,FOLLOW_18_in_arrayConstant1277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node arrayConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		arrayConstantReturnNode.setKind("arrayConstant");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		arrayConstantReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typedConstantGen != null) {
              	        for(Iterator it = list_typedConstantGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typedConstant_return r = (delphiParser.typedConstant_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typedConstant");
              	            	arrayConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		arrayConstantReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		arrayConstantReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = arrayConstantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, arrayConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayConstant"

    public static class recordConstant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "recordConstant"
    // delphi.g:1311:1: recordConstant returns [Node returnNode] : TK_0= '(' (recordFieldConstantGen+= recordFieldConstant TK_1= ';' )* TK_2= ')' ;
    public final delphiParser.recordConstant_return recordConstant() throws RecognitionException {
        delphiParser.recordConstant_return retval = new delphiParser.recordConstant_return();
        retval.start = input.LT(1);
        int recordConstant_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_recordFieldConstantGen=null;
        RuleReturnScope recordFieldConstantGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // delphi.g:1312:1: (TK_0= '(' (recordFieldConstantGen+= recordFieldConstant TK_1= ';' )* TK_2= ')' )
            // delphi.g:1312:5: TK_0= '(' (recordFieldConstantGen+= recordFieldConstant TK_1= ';' )* TK_2= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_recordConstant1300); if (state.failed) return retval;
            // delphi.g:1312:14: (recordFieldConstantGen+= recordFieldConstant TK_1= ';' )*
            loop36:
            do {
                int alt36=2;
                int LA36_0 = input.LA(1);

                if ( (LA36_0==ID||LA36_0==100) ) {
                    alt36=1;
                }


                switch (alt36) {
            	case 1 :
            	    // delphi.g:1312:16: recordFieldConstantGen+= recordFieldConstant TK_1= ';'
            	    {
            	    pushFollow(FOLLOW_recordFieldConstant_in_recordConstant1306);
            	    recordFieldConstantGen=recordFieldConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_recordFieldConstantGen==null) list_recordFieldConstantGen=new ArrayList();
            	    list_recordFieldConstantGen.add(recordFieldConstantGen);

            	    TK_1=(Token)match(input,19,FOLLOW_19_in_recordConstant1311); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop36;
                }
            } while (true);

            TK_2=(Token)match(input,18,FOLLOW_18_in_recordConstant1318); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node recordConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		recordConstantReturnNode.setKind("recordConstant");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		recordConstantReturnNode.getChildren().add(TK_0Leaf);
              	 	}

              		// Create a special CST Node for terminal recordFieldConstantGen aggregation
              		if(list_recordFieldConstantGen != null) {
              	    for(int pos = 0; pos < list_recordFieldConstantGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_recordFieldConstantGen != null) {		
              	    	delphiParser.recordFieldConstant_return r = (delphiParser.recordFieldConstant_return) list_recordFieldConstantGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("recordFieldConstant");
              	    		recordConstantReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		recordConstantReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		recordConstantReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = recordConstantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, recordConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "recordConstant"

    public static class recordFieldConstant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "recordFieldConstant"
    // delphi.g:1352:1: recordFieldConstant returns [Node returnNode] : identGen+= ident TK_0= ':' typedConstantGen+= typedConstant ;
    public final delphiParser.recordFieldConstant_return recordFieldConstant() throws RecognitionException {
        delphiParser.recordFieldConstant_return retval = new delphiParser.recordFieldConstant_return();
        retval.start = input.LT(1);
        int recordFieldConstant_StartIndex = input.index();
        Token TK_0=null;
        List list_identGen=null;
        List list_typedConstantGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope typedConstantGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // delphi.g:1353:1: (identGen+= ident TK_0= ':' typedConstantGen+= typedConstant )
            // delphi.g:1353:5: identGen+= ident TK_0= ':' typedConstantGen+= typedConstant
            {
            pushFollow(FOLLOW_ident_in_recordFieldConstant1342);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            TK_0=(Token)match(input,37,FOLLOW_37_in_recordFieldConstant1347); if (state.failed) return retval;
            pushFollow(FOLLOW_typedConstant_in_recordFieldConstant1352);
            typedConstantGen=typedConstant();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typedConstantGen==null) list_typedConstantGen=new ArrayList();
            list_typedConstantGen.add(typedConstantGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node recordFieldConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		recordFieldConstantReturnNode.setKind("recordFieldConstant");
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	recordFieldConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		recordFieldConstantReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typedConstantGen != null) {
              	        for(Iterator it = list_typedConstantGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typedConstant_return r = (delphiParser.typedConstant_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typedConstant");
              	            	recordFieldConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = recordFieldConstantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, recordFieldConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "recordFieldConstant"

    public static class type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type"
    // delphi.g:1388:1: type returns [Node returnNode] : (typeIdGen+= typeId | simpleTypeGen+= simpleType | strucTypeGen+= strucType | pointerTypeGen+= pointerType | stringTypeGen+= stringType | procedureTypeGen+= procedureType | variantTypeGen+= variantType | classRefTypeGen+= classRefType );
    public final delphiParser.type_return type() throws RecognitionException {
        delphiParser.type_return retval = new delphiParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        List list_typeIdGen=null;
        List list_simpleTypeGen=null;
        List list_strucTypeGen=null;
        List list_pointerTypeGen=null;
        List list_stringTypeGen=null;
        List list_procedureTypeGen=null;
        List list_variantTypeGen=null;
        List list_classRefTypeGen=null;
        RuleReturnScope typeIdGen = null;
        RuleReturnScope simpleTypeGen = null;
        RuleReturnScope strucTypeGen = null;
        RuleReturnScope pointerTypeGen = null;
        RuleReturnScope stringTypeGen = null;
        RuleReturnScope procedureTypeGen = null;
        RuleReturnScope variantTypeGen = null;
        RuleReturnScope classRefTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // delphi.g:1389:1: (typeIdGen+= typeId | simpleTypeGen+= simpleType | strucTypeGen+= strucType | pointerTypeGen+= pointerType | stringTypeGen+= stringType | procedureTypeGen+= procedureType | variantTypeGen+= variantType | classRefTypeGen+= classRefType )
            int alt37=8;
            alt37 = dfa37.predict(input);
            switch (alt37) {
                case 1 :
                    // delphi.g:1389:5: typeIdGen+= typeId
                    {
                    pushFollow(FOLLOW_typeId_in_type1375);
                    typeIdGen=typeId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
                    list_typeIdGen.add(typeIdGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_typeIdGen != null) {
                      	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeId");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1407:9: simpleTypeGen+= simpleType
                    {
                    pushFollow(FOLLOW_simpleType_in_type1391);
                    simpleTypeGen=simpleType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_simpleTypeGen==null) list_simpleTypeGen=new ArrayList();
                    list_simpleTypeGen.add(simpleTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_simpleTypeGen != null) {
                      	        for(Iterator it = list_simpleTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.simpleType_return r = (delphiParser.simpleType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("simpleType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:1425:8: strucTypeGen+= strucType
                    {
                    pushFollow(FOLLOW_strucType_in_type1406);
                    strucTypeGen=strucType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_strucTypeGen==null) list_strucTypeGen=new ArrayList();
                    list_strucTypeGen.add(strucTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_strucTypeGen != null) {
                      	        for(Iterator it = list_strucTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.strucType_return r = (delphiParser.strucType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("strucType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:1443:9: pointerTypeGen+= pointerType
                    {
                    pushFollow(FOLLOW_pointerType_in_type1422);
                    pointerTypeGen=pointerType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_pointerTypeGen==null) list_pointerTypeGen=new ArrayList();
                    list_pointerTypeGen.add(pointerTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_pointerTypeGen != null) {
                      	        for(Iterator it = list_pointerTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.pointerType_return r = (delphiParser.pointerType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("pointerType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:1461:9: stringTypeGen+= stringType
                    {
                    pushFollow(FOLLOW_stringType_in_type1438);
                    stringTypeGen=stringType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_stringTypeGen==null) list_stringTypeGen=new ArrayList();
                    list_stringTypeGen.add(stringTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_stringTypeGen != null) {
                      	        for(Iterator it = list_stringTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.stringType_return r = (delphiParser.stringType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("stringType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:1479:9: procedureTypeGen+= procedureType
                    {
                    pushFollow(FOLLOW_procedureType_in_type1455);
                    procedureTypeGen=procedureType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_procedureTypeGen==null) list_procedureTypeGen=new ArrayList();
                    list_procedureTypeGen.add(procedureTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_procedureTypeGen != null) {
                      	        for(Iterator it = list_procedureTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.procedureType_return r = (delphiParser.procedureType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedureType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:1497:8: variantTypeGen+= variantType
                    {
                    pushFollow(FOLLOW_variantType_in_type1470);
                    variantTypeGen=variantType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variantTypeGen==null) list_variantTypeGen=new ArrayList();
                    list_variantTypeGen.add(variantTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_variantTypeGen != null) {
                      	        for(Iterator it = list_variantTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.variantType_return r = (delphiParser.variantType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variantType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // delphi.g:1515:9: classRefTypeGen+= classRefType
                    {
                    pushFollow(FOLLOW_classRefType_in_type1486);
                    classRefTypeGen=classRefType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classRefTypeGen==null) list_classRefTypeGen=new ArrayList();
                    list_classRefTypeGen.add(classRefTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_classRefTypeGen != null) {
                      	        for(Iterator it = list_classRefTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.classRefType_return r = (delphiParser.classRefType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classRefType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class restrictedType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "restrictedType"
    // delphi.g:1535:1: restrictedType returns [Node returnNode] : (objectTypeGen+= objectType | classTypeGen+= classType | interfaceTypeGen+= interfaceType );
    public final delphiParser.restrictedType_return restrictedType() throws RecognitionException {
        delphiParser.restrictedType_return retval = new delphiParser.restrictedType_return();
        retval.start = input.LT(1);
        int restrictedType_StartIndex = input.index();
        List list_objectTypeGen=null;
        List list_classTypeGen=null;
        List list_interfaceTypeGen=null;
        RuleReturnScope objectTypeGen = null;
        RuleReturnScope classTypeGen = null;
        RuleReturnScope interfaceTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // delphi.g:1536:1: (objectTypeGen+= objectType | classTypeGen+= classType | interfaceTypeGen+= interfaceType )
            int alt38=3;
            switch ( input.LA(1) ) {
            case 75:
                {
                alt38=1;
                }
                break;
            case 39:
                {
                alt38=2;
                }
                break;
            case 28:
                {
                alt38=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 38, 0, input);

                throw nvae;
            }

            switch (alt38) {
                case 1 :
                    // delphi.g:1536:5: objectTypeGen+= objectType
                    {
                    pushFollow(FOLLOW_objectType_in_restrictedType1509);
                    objectTypeGen=objectType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_objectTypeGen==null) list_objectTypeGen=new ArrayList();
                    list_objectTypeGen.add(objectTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node restrictedTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		restrictedTypeReturnNode.setKind("restrictedType");
                      	    // Create a CST Node
                      		if(list_objectTypeGen != null) {
                      	        for(Iterator it = list_objectTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.objectType_return r = (delphiParser.objectType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("objectType");
                      	            	restrictedTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = restrictedTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1554:9: classTypeGen+= classType
                    {
                    pushFollow(FOLLOW_classType_in_restrictedType1525);
                    classTypeGen=classType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classTypeGen==null) list_classTypeGen=new ArrayList();
                    list_classTypeGen.add(classTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node restrictedTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		restrictedTypeReturnNode.setKind("restrictedType");
                      	    // Create a CST Node
                      		if(list_classTypeGen != null) {
                      	        for(Iterator it = list_classTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.classType_return r = (delphiParser.classType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classType");
                      	            	restrictedTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = restrictedTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:1572:9: interfaceTypeGen+= interfaceType
                    {
                    pushFollow(FOLLOW_interfaceType_in_restrictedType1541);
                    interfaceTypeGen=interfaceType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceTypeGen==null) list_interfaceTypeGen=new ArrayList();
                    list_interfaceTypeGen.add(interfaceTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node restrictedTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		restrictedTypeReturnNode.setKind("restrictedType");
                      	    // Create a CST Node
                      		if(list_interfaceTypeGen != null) {
                      	        for(Iterator it = list_interfaceTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.interfaceType_return r = (delphiParser.interfaceType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceType");
                      	            	restrictedTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = restrictedTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, restrictedType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "restrictedType"

    public static class classRefType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classRefType"
    // delphi.g:1592:1: classRefType returns [Node returnNode] : TK_0= 'class' TK_1= 'of' typeIdGen+= typeId ;
    public final delphiParser.classRefType_return classRefType() throws RecognitionException {
        delphiParser.classRefType_return retval = new delphiParser.classRefType_return();
        retval.start = input.LT(1);
        int classRefType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_typeIdGen=null;
        RuleReturnScope typeIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // delphi.g:1593:1: (TK_0= 'class' TK_1= 'of' typeIdGen+= typeId )
            // delphi.g:1593:5: TK_0= 'class' TK_1= 'of' typeIdGen+= typeId
            {
            TK_0=(Token)match(input,39,FOLLOW_39_in_classRefType1564); if (state.failed) return retval;
            TK_1=(Token)match(input,40,FOLLOW_40_in_classRefType1569); if (state.failed) return retval;
            pushFollow(FOLLOW_typeId_in_classRefType1574);
            typeIdGen=typeId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
            list_typeIdGen.add(typeIdGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classRefTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classRefTypeReturnNode.setKind("classRefType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		classRefTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		classRefTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeIdGen != null) {
              	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeId");
              	            	classRefTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classRefTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, classRefType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classRefType"

    public static class simpleType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "simpleType"
    // delphi.g:1623:1: simpleType returns [Node returnNode] : (ordinalTypeGen+= ordinalType | realTypeGen+= realType );
    public final delphiParser.simpleType_return simpleType() throws RecognitionException {
        delphiParser.simpleType_return retval = new delphiParser.simpleType_return();
        retval.start = input.LT(1);
        int simpleType_StartIndex = input.index();
        List list_ordinalTypeGen=null;
        List list_realTypeGen=null;
        RuleReturnScope ordinalTypeGen = null;
        RuleReturnScope realTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // delphi.g:1624:1: (ordinalTypeGen+= ordinalType | realTypeGen+= realType )
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( ((LA39_0>=ID && LA39_0<=INT)||(LA39_0>=QVALUE && LA39_0<=DQVALUE)||LA39_0==17||(LA39_0>=48 && LA39_0<=59)||LA39_0==68||(LA39_0>=78 && LA39_0<=82)||LA39_0==100||LA39_0==163) ) {
                alt39=1;
            }
            else if ( ((LA39_0>=41 && LA39_0<=47)) ) {
                alt39=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 39, 0, input);

                throw nvae;
            }
            switch (alt39) {
                case 1 :
                    // delphi.g:1624:5: ordinalTypeGen+= ordinalType
                    {
                    pushFollow(FOLLOW_ordinalType_in_simpleType1597);
                    ordinalTypeGen=ordinalType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ordinalTypeGen==null) list_ordinalTypeGen=new ArrayList();
                    list_ordinalTypeGen.add(ordinalTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simpleTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simpleTypeReturnNode.setKind("simpleType");
                      	    // Create a CST Node
                      		if(list_ordinalTypeGen != null) {
                      	        for(Iterator it = list_ordinalTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ordinalType_return r = (delphiParser.ordinalType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ordinalType");
                      	            	simpleTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simpleTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1642:6: realTypeGen+= realType
                    {
                    pushFollow(FOLLOW_realType_in_simpleType1611);
                    realTypeGen=realType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_realTypeGen==null) list_realTypeGen=new ArrayList();
                    list_realTypeGen.add(realTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simpleTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simpleTypeReturnNode.setKind("simpleType");
                      	    // Create a CST Node
                      		if(list_realTypeGen != null) {
                      	        for(Iterator it = list_realTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.realType_return r = (delphiParser.realType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("realType");
                      	            	simpleTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simpleTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, simpleType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleType"

    public static class realType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "realType"
    // delphi.g:1662:1: realType returns [Node returnNode] : (TK_0= 'real48' | TK_0= 'real' | TK_0= 'single' | TK_0= 'double' | TK_0= 'extended' | TK_0= 'currency' | TK_0= 'comp' );
    public final delphiParser.realType_return realType() throws RecognitionException {
        delphiParser.realType_return retval = new delphiParser.realType_return();
        retval.start = input.LT(1);
        int realType_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // delphi.g:1663:1: (TK_0= 'real48' | TK_0= 'real' | TK_0= 'single' | TK_0= 'double' | TK_0= 'extended' | TK_0= 'currency' | TK_0= 'comp' )
            int alt40=7;
            switch ( input.LA(1) ) {
            case 41:
                {
                alt40=1;
                }
                break;
            case 42:
                {
                alt40=2;
                }
                break;
            case 43:
                {
                alt40=3;
                }
                break;
            case 44:
                {
                alt40=4;
                }
                break;
            case 45:
                {
                alt40=5;
                }
                break;
            case 46:
                {
                alt40=6;
                }
                break;
            case 47:
                {
                alt40=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);

                throw nvae;
            }

            switch (alt40) {
                case 1 :
                    // delphi.g:1663:5: TK_0= 'real48'
                    {
                    TK_0=(Token)match(input,41,FOLLOW_41_in_realType1634); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1676:9: TK_0= 'real'
                    {
                    TK_0=(Token)match(input,42,FOLLOW_42_in_realType1650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:1689:9: TK_0= 'single'
                    {
                    TK_0=(Token)match(input,43,FOLLOW_43_in_realType1666); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:1702:9: TK_0= 'double'
                    {
                    TK_0=(Token)match(input,44,FOLLOW_44_in_realType1682); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:1715:9: TK_0= 'extended'
                    {
                    TK_0=(Token)match(input,45,FOLLOW_45_in_realType1698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:1728:9: TK_0= 'currency'
                    {
                    TK_0=(Token)match(input,46,FOLLOW_46_in_realType1714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:1741:9: TK_0= 'comp'
                    {
                    TK_0=(Token)match(input,47,FOLLOW_47_in_realType1730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node realTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		realTypeReturnNode.setKind("realType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		realTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = realTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, realType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "realType"

    public static class ordinalType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ordinalType"
    // delphi.g:1756:1: ordinalType returns [Node returnNode] : (subrangeTypeGen+= subrangeType | enumeratedTypeGen+= enumeratedType | ordIdentGen+= ordIdent );
    public final delphiParser.ordinalType_return ordinalType() throws RecognitionException {
        delphiParser.ordinalType_return retval = new delphiParser.ordinalType_return();
        retval.start = input.LT(1);
        int ordinalType_StartIndex = input.index();
        List list_subrangeTypeGen=null;
        List list_enumeratedTypeGen=null;
        List list_ordIdentGen=null;
        RuleReturnScope subrangeTypeGen = null;
        RuleReturnScope enumeratedTypeGen = null;
        RuleReturnScope ordIdentGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // delphi.g:1757:1: (subrangeTypeGen+= subrangeType | enumeratedTypeGen+= enumeratedType | ordIdentGen+= ordIdent )
            int alt41=3;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // delphi.g:1757:5: subrangeTypeGen+= subrangeType
                    {
                    pushFollow(FOLLOW_subrangeType_in_ordinalType1753);
                    subrangeTypeGen=subrangeType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_subrangeTypeGen==null) list_subrangeTypeGen=new ArrayList();
                    list_subrangeTypeGen.add(subrangeTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordinalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordinalTypeReturnNode.setKind("ordinalType");
                      	    // Create a CST Node
                      		if(list_subrangeTypeGen != null) {
                      	        for(Iterator it = list_subrangeTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.subrangeType_return r = (delphiParser.subrangeType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("subrangeType");
                      	            	ordinalTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordinalTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1775:6: enumeratedTypeGen+= enumeratedType
                    {
                    pushFollow(FOLLOW_enumeratedType_in_ordinalType1767);
                    enumeratedTypeGen=enumeratedType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_enumeratedTypeGen==null) list_enumeratedTypeGen=new ArrayList();
                    list_enumeratedTypeGen.add(enumeratedTypeGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordinalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordinalTypeReturnNode.setKind("ordinalType");
                      	    // Create a CST Node
                      		if(list_enumeratedTypeGen != null) {
                      	        for(Iterator it = list_enumeratedTypeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.enumeratedType_return r = (delphiParser.enumeratedType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumeratedType");
                      	            	ordinalTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordinalTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:1793:6: ordIdentGen+= ordIdent
                    {
                    pushFollow(FOLLOW_ordIdent_in_ordinalType1781);
                    ordIdentGen=ordIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ordIdentGen==null) list_ordIdentGen=new ArrayList();
                    list_ordIdentGen.add(ordIdentGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordinalTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordinalTypeReturnNode.setKind("ordinalType");
                      	    // Create a CST Node
                      		if(list_ordIdentGen != null) {
                      	        for(Iterator it = list_ordIdentGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ordIdent_return r = (delphiParser.ordIdent_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ordIdent");
                      	            	ordinalTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordinalTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, ordinalType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ordinalType"

    public static class ordIdent_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ordIdent"
    // delphi.g:1813:1: ordIdent returns [Node returnNode] : (TK_0= 'shortint' | TK_0= 'smallint' | TK_0= 'integer' | TK_0= 'byte' | TK_0= 'longint' | TK_0= 'int64' | TK_0= 'word' | TK_0= 'boolean' | TK_0= 'char' | TK_0= 'widechar' | TK_0= 'longword' | TK_0= 'pchar' );
    public final delphiParser.ordIdent_return ordIdent() throws RecognitionException {
        delphiParser.ordIdent_return retval = new delphiParser.ordIdent_return();
        retval.start = input.LT(1);
        int ordIdent_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // delphi.g:1814:1: (TK_0= 'shortint' | TK_0= 'smallint' | TK_0= 'integer' | TK_0= 'byte' | TK_0= 'longint' | TK_0= 'int64' | TK_0= 'word' | TK_0= 'boolean' | TK_0= 'char' | TK_0= 'widechar' | TK_0= 'longword' | TK_0= 'pchar' )
            int alt42=12;
            switch ( input.LA(1) ) {
            case 48:
                {
                alt42=1;
                }
                break;
            case 49:
                {
                alt42=2;
                }
                break;
            case 50:
                {
                alt42=3;
                }
                break;
            case 51:
                {
                alt42=4;
                }
                break;
            case 52:
                {
                alt42=5;
                }
                break;
            case 53:
                {
                alt42=6;
                }
                break;
            case 54:
                {
                alt42=7;
                }
                break;
            case 55:
                {
                alt42=8;
                }
                break;
            case 56:
                {
                alt42=9;
                }
                break;
            case 57:
                {
                alt42=10;
                }
                break;
            case 58:
                {
                alt42=11;
                }
                break;
            case 59:
                {
                alt42=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }

            switch (alt42) {
                case 1 :
                    // delphi.g:1814:5: TK_0= 'shortint'
                    {
                    TK_0=(Token)match(input,48,FOLLOW_48_in_ordIdent1804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1827:9: TK_0= 'smallint'
                    {
                    TK_0=(Token)match(input,49,FOLLOW_49_in_ordIdent1820); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:1840:9: TK_0= 'integer'
                    {
                    TK_0=(Token)match(input,50,FOLLOW_50_in_ordIdent1836); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:1853:9: TK_0= 'byte'
                    {
                    TK_0=(Token)match(input,51,FOLLOW_51_in_ordIdent1852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:1866:6: TK_0= 'longint'
                    {
                    TK_0=(Token)match(input,52,FOLLOW_52_in_ordIdent1865); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:1879:8: TK_0= 'int64'
                    {
                    TK_0=(Token)match(input,53,FOLLOW_53_in_ordIdent1880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:1892:9: TK_0= 'word'
                    {
                    TK_0=(Token)match(input,54,FOLLOW_54_in_ordIdent1896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // delphi.g:1905:9: TK_0= 'boolean'
                    {
                    TK_0=(Token)match(input,55,FOLLOW_55_in_ordIdent1912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // delphi.g:1918:9: TK_0= 'char'
                    {
                    TK_0=(Token)match(input,56,FOLLOW_56_in_ordIdent1928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // delphi.g:1931:9: TK_0= 'widechar'
                    {
                    TK_0=(Token)match(input,57,FOLLOW_57_in_ordIdent1944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // delphi.g:1944:9: TK_0= 'longword'
                    {
                    TK_0=(Token)match(input,58,FOLLOW_58_in_ordIdent1960); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // delphi.g:1957:9: TK_0= 'pchar'
                    {
                    TK_0=(Token)match(input,59,FOLLOW_59_in_ordIdent1976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node ordIdentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		ordIdentReturnNode.setKind("ordIdent");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		ordIdentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = ordIdentReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, ordIdent_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ordIdent"

    public static class variantType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variantType"
    // delphi.g:1972:1: variantType returns [Node returnNode] : (TK_0= 'variant' | TK_0= 'olevariant' );
    public final delphiParser.variantType_return variantType() throws RecognitionException {
        delphiParser.variantType_return retval = new delphiParser.variantType_return();
        retval.start = input.LT(1);
        int variantType_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // delphi.g:1973:1: (TK_0= 'variant' | TK_0= 'olevariant' )
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==60) ) {
                alt43=1;
            }
            else if ( (LA43_0==61) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    // delphi.g:1973:5: TK_0= 'variant'
                    {
                    TK_0=(Token)match(input,60,FOLLOW_60_in_variantType1999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variantTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variantTypeReturnNode.setKind("variantType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		variantTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variantTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:1986:9: TK_0= 'olevariant'
                    {
                    TK_0=(Token)match(input,61,FOLLOW_61_in_variantType2015); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variantTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variantTypeReturnNode.setKind("variantType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		variantTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variantTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, variantType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variantType"

    public static class subrangeType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "subrangeType"
    // delphi.g:2001:1: subrangeType returns [Node returnNode] : constExprGen+= constExpr TK_0= '..' constExprGen_1+= constExpr ;
    public final delphiParser.subrangeType_return subrangeType() throws RecognitionException {
        delphiParser.subrangeType_return retval = new delphiParser.subrangeType_return();
        retval.start = input.LT(1);
        int subrangeType_StartIndex = input.index();
        Token TK_0=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // delphi.g:2002:1: (constExprGen+= constExpr TK_0= '..' constExprGen_1+= constExpr )
            // delphi.g:2002:5: constExprGen+= constExpr TK_0= '..' constExprGen_1+= constExpr
            {
            pushFollow(FOLLOW_constExpr_in_subrangeType2038);
            constExprGen=constExpr();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constExprGen==null) list_constExprGen=new ArrayList();
            list_constExprGen.add(constExprGen);

            TK_0=(Token)match(input,62,FOLLOW_62_in_subrangeType2043); if (state.failed) return retval;
            pushFollow(FOLLOW_constExpr_in_subrangeType2048);
            constExprGen_1=constExpr();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
            list_constExprGen_1.add(constExprGen_1);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node subrangeTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		subrangeTypeReturnNode.setKind("subrangeType");
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	subrangeTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		subrangeTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen_1 != null) {
              	        for(Iterator it = list_constExprGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	subrangeTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = subrangeTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, subrangeType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "subrangeType"

    public static class enumeratedType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumeratedType"
    // delphi.g:2037:1: enumeratedType returns [Node returnNode] : TK_0= '(' (enumeratedTypeElementGen+= enumeratedTypeElement TK_1= ',' )* TK_2= ')' ;
    public final delphiParser.enumeratedType_return enumeratedType() throws RecognitionException {
        delphiParser.enumeratedType_return retval = new delphiParser.enumeratedType_return();
        retval.start = input.LT(1);
        int enumeratedType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_enumeratedTypeElementGen=null;
        RuleReturnScope enumeratedTypeElementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // delphi.g:2038:1: (TK_0= '(' (enumeratedTypeElementGen+= enumeratedTypeElement TK_1= ',' )* TK_2= ')' )
            // delphi.g:2038:5: TK_0= '(' (enumeratedTypeElementGen+= enumeratedTypeElement TK_1= ',' )* TK_2= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_enumeratedType2071); if (state.failed) return retval;
            // delphi.g:2038:14: (enumeratedTypeElementGen+= enumeratedTypeElement TK_1= ',' )*
            loop44:
            do {
                int alt44=2;
                int LA44_0 = input.LA(1);

                if ( (LA44_0==ID||LA44_0==100) ) {
                    alt44=1;
                }


                switch (alt44) {
            	case 1 :
            	    // delphi.g:2038:16: enumeratedTypeElementGen+= enumeratedTypeElement TK_1= ','
            	    {
            	    pushFollow(FOLLOW_enumeratedTypeElement_in_enumeratedType2077);
            	    enumeratedTypeElementGen=enumeratedTypeElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_enumeratedTypeElementGen==null) list_enumeratedTypeElementGen=new ArrayList();
            	    list_enumeratedTypeElementGen.add(enumeratedTypeElementGen);

            	    TK_1=(Token)match(input,33,FOLLOW_33_in_enumeratedType2082); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop44;
                }
            } while (true);

            TK_2=(Token)match(input,18,FOLLOW_18_in_enumeratedType2089); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumeratedTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumeratedTypeReturnNode.setKind("enumeratedType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		enumeratedTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}

              		// Create a special CST Node for terminal enumeratedTypeElementGen aggregation
              		if(list_enumeratedTypeElementGen != null) {
              	    for(int pos = 0; pos < list_enumeratedTypeElementGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_enumeratedTypeElementGen != null) {		
              	    	delphiParser.enumeratedTypeElement_return r = (delphiParser.enumeratedTypeElement_return) list_enumeratedTypeElementGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("enumeratedTypeElement");
              	    		enumeratedTypeReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		enumeratedTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		enumeratedTypeReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumeratedTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, enumeratedType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeratedType"

    public static class enumeratedTypeElement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumeratedTypeElement"
    // delphi.g:2078:1: enumeratedTypeElement returns [Node returnNode] : identGen+= ident (TK_0= '=' constExprGen+= constExpr )? ;
    public final delphiParser.enumeratedTypeElement_return enumeratedTypeElement() throws RecognitionException {
        delphiParser.enumeratedTypeElement_return retval = new delphiParser.enumeratedTypeElement_return();
        retval.start = input.LT(1);
        int enumeratedTypeElement_StartIndex = input.index();
        Token TK_0=null;
        List list_identGen=null;
        List list_constExprGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope constExprGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // delphi.g:2079:1: (identGen+= ident (TK_0= '=' constExprGen+= constExpr )? )
            // delphi.g:2079:5: identGen+= ident (TK_0= '=' constExprGen+= constExpr )?
            {
            pushFollow(FOLLOW_ident_in_enumeratedTypeElement2112);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:2079:21: (TK_0= '=' constExprGen+= constExpr )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==36) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // delphi.g:2079:23: TK_0= '=' constExprGen+= constExpr
                    {
                    TK_0=(Token)match(input,36,FOLLOW_36_in_enumeratedTypeElement2118); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_enumeratedTypeElement2123);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumeratedTypeElementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumeratedTypeElementReturnNode.setKind("enumeratedTypeElement");
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	enumeratedTypeElementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		enumeratedTypeElementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	enumeratedTypeElementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumeratedTypeElementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, enumeratedTypeElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumeratedTypeElement"

    public static class stringType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "stringType"
    // delphi.g:2114:1: stringType returns [Node returnNode] : (TK_0= 'string' | TK_0= 'ansistring' | TK_0= 'widestring' | TK_0= 'string' TK_1= '(' constExprGen+= constExpr TK_2= ')' );
    public final delphiParser.stringType_return stringType() throws RecognitionException {
        delphiParser.stringType_return retval = new delphiParser.stringType_return();
        retval.start = input.LT(1);
        int stringType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_constExprGen=null;
        RuleReturnScope constExprGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // delphi.g:2115:1: (TK_0= 'string' | TK_0= 'ansistring' | TK_0= 'widestring' | TK_0= 'string' TK_1= '(' constExprGen+= constExpr TK_2= ')' )
            int alt46=4;
            switch ( input.LA(1) ) {
            case 63:
                {
                int LA46_1 = input.LA(2);

                if ( (LA46_1==17) ) {
                    alt46=4;
                }
                else if ( (LA46_1==EOF||(LA46_1>=18 && LA46_1<=19)||LA46_1==24||(LA46_1>=26 && LA46_1<=27)||LA46_1==36||LA46_1==40||LA46_1==77||LA46_1==120) ) {
                    alt46=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 46, 1, input);

                    throw nvae;
                }
                }
                break;
            case 64:
                {
                alt46=2;
                }
                break;
            case 65:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);

                throw nvae;
            }

            switch (alt46) {
                case 1 :
                    // delphi.g:2115:5: TK_0= 'string'
                    {
                    TK_0=(Token)match(input,63,FOLLOW_63_in_stringType2149); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node stringTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		stringTypeReturnNode.setKind("stringType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		stringTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = stringTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:2128:9: TK_0= 'ansistring'
                    {
                    TK_0=(Token)match(input,64,FOLLOW_64_in_stringType2165); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node stringTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		stringTypeReturnNode.setKind("stringType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		stringTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = stringTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:2141:9: TK_0= 'widestring'
                    {
                    TK_0=(Token)match(input,65,FOLLOW_65_in_stringType2181); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node stringTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		stringTypeReturnNode.setKind("stringType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		stringTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = stringTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:2154:9: TK_0= 'string' TK_1= '(' constExprGen+= constExpr TK_2= ')'
                    {
                    TK_0=(Token)match(input,63,FOLLOW_63_in_stringType2197); if (state.failed) return retval;
                    TK_1=(Token)match(input,17,FOLLOW_17_in_stringType2202); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_stringType2207);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);

                    TK_2=(Token)match(input,18,FOLLOW_18_in_stringType2212); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node stringTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		stringTypeReturnNode.setKind("stringType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		stringTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		stringTypeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constExprGen != null) {
                      	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constExpr");
                      	            	stringTypeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		stringTypeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = stringTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, stringType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stringType"

    public static class strucType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "strucType"
    // delphi.g:2189:1: strucType returns [Node returnNode] : (TK_0= 'packed' )? (arrayTypeGen+= arrayType | setTypeGen+= setType | fileTypeGen+= fileType | recTypeGen+= recType (TK_1= 'packed' )? ) ;
    public final delphiParser.strucType_return strucType() throws RecognitionException {
        delphiParser.strucType_return retval = new delphiParser.strucType_return();
        retval.start = input.LT(1);
        int strucType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_arrayTypeGen=null;
        List list_setTypeGen=null;
        List list_fileTypeGen=null;
        List list_recTypeGen=null;
        RuleReturnScope arrayTypeGen = null;
        RuleReturnScope setTypeGen = null;
        RuleReturnScope fileTypeGen = null;
        RuleReturnScope recTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // delphi.g:2190:1: ( (TK_0= 'packed' )? (arrayTypeGen+= arrayType | setTypeGen+= setType | fileTypeGen+= fileType | recTypeGen+= recType (TK_1= 'packed' )? ) )
            // delphi.g:2190:4: (TK_0= 'packed' )? (arrayTypeGen+= arrayType | setTypeGen+= setType | fileTypeGen+= fileType | recTypeGen+= recType (TK_1= 'packed' )? )
            {
            // delphi.g:2190:4: (TK_0= 'packed' )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==66) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // delphi.g:2190:6: TK_0= 'packed'
                    {
                    TK_0=(Token)match(input,66,FOLLOW_66_in_strucType2236); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:2190:22: (arrayTypeGen+= arrayType | setTypeGen+= setType | fileTypeGen+= fileType | recTypeGen+= recType (TK_1= 'packed' )? )
            int alt49=4;
            switch ( input.LA(1) ) {
            case 67:
                {
                alt49=1;
                }
                break;
            case 72:
                {
                alt49=2;
                }
                break;
            case 73:
                {
                alt49=3;
                }
                break;
            case 70:
                {
                alt49=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 49, 0, input);

                throw nvae;
            }

            switch (alt49) {
                case 1 :
                    // delphi.g:2190:24: arrayTypeGen+= arrayType
                    {
                    pushFollow(FOLLOW_arrayType_in_strucType2244);
                    arrayTypeGen=arrayType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_arrayTypeGen==null) list_arrayTypeGen=new ArrayList();
                    list_arrayTypeGen.add(arrayTypeGen);


                    }
                    break;
                case 2 :
                    // delphi.g:2190:51: setTypeGen+= setType
                    {
                    pushFollow(FOLLOW_setType_in_strucType2251);
                    setTypeGen=setType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_setTypeGen==null) list_setTypeGen=new ArrayList();
                    list_setTypeGen.add(setTypeGen);


                    }
                    break;
                case 3 :
                    // delphi.g:2190:74: fileTypeGen+= fileType
                    {
                    pushFollow(FOLLOW_fileType_in_strucType2258);
                    fileTypeGen=fileType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_fileTypeGen==null) list_fileTypeGen=new ArrayList();
                    list_fileTypeGen.add(fileTypeGen);


                    }
                    break;
                case 4 :
                    // delphi.g:2190:99: recTypeGen+= recType (TK_1= 'packed' )?
                    {
                    pushFollow(FOLLOW_recType_in_strucType2265);
                    recTypeGen=recType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_recTypeGen==null) list_recTypeGen=new ArrayList();
                    list_recTypeGen.add(recTypeGen);

                    // delphi.g:2190:119: (TK_1= 'packed' )?
                    int alt48=2;
                    int LA48_0 = input.LA(1);

                    if ( (LA48_0==66) ) {
                        alt48=1;
                    }
                    switch (alt48) {
                        case 1 :
                            // delphi.g:2190:121: TK_1= 'packed'
                            {
                            TK_1=(Token)match(input,66,FOLLOW_66_in_strucType2271); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node strucTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		strucTypeReturnNode.setKind("strucType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		strucTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_arrayTypeGen != null) {
              	        for(Iterator it = list_arrayTypeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.arrayType_return r = (delphiParser.arrayType_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arrayType");
              	            	strucTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_setTypeGen != null) {
              	        for(Iterator it = list_setTypeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.setType_return r = (delphiParser.setType_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("setType");
              	            	strucTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_fileTypeGen != null) {
              	        for(Iterator it = list_fileTypeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.fileType_return r = (delphiParser.fileType_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("fileType");
              	            	strucTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_recTypeGen != null) {
              	        for(Iterator it = list_recTypeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.recType_return r = (delphiParser.recType_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("recType");
              	            	strucTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		strucTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = strucTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, strucType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "strucType"

    public static class arrayType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "arrayType"
    // delphi.g:2250:1: arrayType returns [Node returnNode] : TK_0= 'array' (TK_1= '[' ordinalTypeGen+= ordinalType (TK_2= ',' ordinalTypeGen_1+= ordinalType )* TK_3= ']' )? TK_4= 'of' typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.arrayType_return arrayType() throws RecognitionException {
        delphiParser.arrayType_return retval = new delphiParser.arrayType_return();
        retval.start = input.LT(1);
        int arrayType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        List list_ordinalTypeGen=null;
        List list_ordinalTypeGen_1=null;
        List list_typeGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope ordinalTypeGen = null;
        RuleReturnScope ordinalTypeGen_1 = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // delphi.g:2251:1: (TK_0= 'array' (TK_1= '[' ordinalTypeGen+= ordinalType (TK_2= ',' ordinalTypeGen_1+= ordinalType )* TK_3= ']' )? TK_4= 'of' typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2251:5: TK_0= 'array' (TK_1= '[' ordinalTypeGen+= ordinalType (TK_2= ',' ordinalTypeGen_1+= ordinalType )* TK_3= ']' )? TK_4= 'of' typeGen+= type (portabilityDirectiveGen+= portabilityDirective )?
            {
            TK_0=(Token)match(input,67,FOLLOW_67_in_arrayType2297); if (state.failed) return retval;
            // delphi.g:2251:18: (TK_1= '[' ordinalTypeGen+= ordinalType (TK_2= ',' ordinalTypeGen_1+= ordinalType )* TK_3= ']' )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==68) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // delphi.g:2251:20: TK_1= '[' ordinalTypeGen+= ordinalType (TK_2= ',' ordinalTypeGen_1+= ordinalType )* TK_3= ']'
                    {
                    TK_1=(Token)match(input,68,FOLLOW_68_in_arrayType2303); if (state.failed) return retval;
                    pushFollow(FOLLOW_ordinalType_in_arrayType2308);
                    ordinalTypeGen=ordinalType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ordinalTypeGen==null) list_ordinalTypeGen=new ArrayList();
                    list_ordinalTypeGen.add(ordinalTypeGen);

                    // delphi.g:2251:58: (TK_2= ',' ordinalTypeGen_1+= ordinalType )*
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==33) ) {
                            alt50=1;
                        }


                        switch (alt50) {
                    	case 1 :
                    	    // delphi.g:2251:60: TK_2= ',' ordinalTypeGen_1+= ordinalType
                    	    {
                    	    TK_2=(Token)match(input,33,FOLLOW_33_in_arrayType2314); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_ordinalType_in_arrayType2319);
                    	    ordinalTypeGen_1=ordinalType();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_ordinalTypeGen_1==null) list_ordinalTypeGen_1=new ArrayList();
                    	    list_ordinalTypeGen_1.add(ordinalTypeGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop50;
                        }
                    } while (true);

                    TK_3=(Token)match(input,69,FOLLOW_69_in_arrayType2326); if (state.failed) return retval;

                    }
                    break;

            }

            TK_4=(Token)match(input,40,FOLLOW_40_in_arrayType2333); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_arrayType2338);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            // delphi.g:2251:140: (portabilityDirectiveGen+= portabilityDirective )?
            int alt52=2;
            switch ( input.LA(1) ) {
                case 26:
                    {
                    int LA52_1 = input.LA(2);

                    if ( (synpred91_delphi()) ) {
                        alt52=1;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA52_2 = input.LA(2);

                    if ( (synpred91_delphi()) ) {
                        alt52=1;
                    }
                    }
                    break;
                case 24:
                    {
                    int LA52_3 = input.LA(2);

                    if ( (synpred91_delphi()) ) {
                        alt52=1;
                    }
                    }
                    break;
            }

            switch (alt52) {
                case 1 :
                    // delphi.g:2251:142: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_arrayType2344);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node arrayTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		arrayTypeReturnNode.setKind("arrayType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		arrayTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		arrayTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_ordinalTypeGen != null) {
              	        for(Iterator it = list_ordinalTypeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ordinalType_return r = (delphiParser.ordinalType_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ordinalType");
              	            	arrayTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal ordinalTypeGen_1 aggregation
              		if(list_ordinalTypeGen_1 != null) {
              	    for(int pos = 0; pos < list_ordinalTypeGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		arrayTypeReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_ordinalTypeGen_1 != null) {		
              	    	delphiParser.ordinalType_return r = (delphiParser.ordinalType_return) list_ordinalTypeGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("ordinalType");
              	    		arrayTypeReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		arrayTypeReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		arrayTypeReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	arrayTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	arrayTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = arrayTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, arrayType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayType"

    public static class recType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "recType"
    // delphi.g:2331:1: recType returns [Node returnNode] : TK_0= 'record' (fieldListGen+= fieldList )? TK_1= 'end' (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.recType_return recType() throws RecognitionException {
        delphiParser.recType_return retval = new delphiParser.recType_return();
        retval.start = input.LT(1);
        int recType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_fieldListGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope fieldListGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // delphi.g:2332:1: (TK_0= 'record' (fieldListGen+= fieldList )? TK_1= 'end' (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2332:5: TK_0= 'record' (fieldListGen+= fieldList )? TK_1= 'end' (portabilityDirectiveGen+= portabilityDirective )?
            {
            TK_0=(Token)match(input,70,FOLLOW_70_in_recType2369); if (state.failed) return retval;
            // delphi.g:2332:19: (fieldListGen+= fieldList )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==ID||LA53_0==100) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // delphi.g:2332:21: fieldListGen+= fieldList
                    {
                    pushFollow(FOLLOW_fieldList_in_recType2375);
                    fieldListGen=fieldList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_fieldListGen==null) list_fieldListGen=new ArrayList();
                    list_fieldListGen.add(fieldListGen);


                    }
                    break;

            }

            TK_1=(Token)match(input,23,FOLLOW_23_in_recType2382); if (state.failed) return retval;
            // delphi.g:2332:59: (portabilityDirectiveGen+= portabilityDirective )?
            int alt54=2;
            switch ( input.LA(1) ) {
                case 26:
                    {
                    int LA54_1 = input.LA(2);

                    if ( (synpred93_delphi()) ) {
                        alt54=1;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA54_2 = input.LA(2);

                    if ( (synpred93_delphi()) ) {
                        alt54=1;
                    }
                    }
                    break;
                case 24:
                    {
                    int LA54_3 = input.LA(2);

                    if ( (synpred93_delphi()) ) {
                        alt54=1;
                    }
                    }
                    break;
            }

            switch (alt54) {
                case 1 :
                    // delphi.g:2332:61: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_recType2388);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node recTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		recTypeReturnNode.setKind("recType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		recTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_fieldListGen != null) {
              	        for(Iterator it = list_fieldListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.fieldList_return r = (delphiParser.fieldList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("fieldList");
              	            	recTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		recTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	recTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = recTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, recType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "recType"

    public static class fieldList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "fieldList"
    // delphi.g:2372:1: fieldList returns [Node returnNode] : (fieldDeclGen+= fieldDecl TK_0= ';' )+ (variantSectionGen+= variantSection )? (TK_1= ';' )? ;
    public final delphiParser.fieldList_return fieldList() throws RecognitionException {
        delphiParser.fieldList_return retval = new delphiParser.fieldList_return();
        retval.start = input.LT(1);
        int fieldList_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_fieldDeclGen=null;
        List list_variantSectionGen=null;
        RuleReturnScope fieldDeclGen = null;
        RuleReturnScope variantSectionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // delphi.g:2373:1: ( (fieldDeclGen+= fieldDecl TK_0= ';' )+ (variantSectionGen+= variantSection )? (TK_1= ';' )? )
            // delphi.g:2373:4: (fieldDeclGen+= fieldDecl TK_0= ';' )+ (variantSectionGen+= variantSection )? (TK_1= ';' )?
            {
            // delphi.g:2373:4: (fieldDeclGen+= fieldDecl TK_0= ';' )+
            int cnt55=0;
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);

                if ( (LA55_0==ID||LA55_0==100) ) {
                    alt55=1;
                }


                switch (alt55) {
            	case 1 :
            	    // delphi.g:2373:6: fieldDeclGen+= fieldDecl TK_0= ';'
            	    {
            	    pushFollow(FOLLOW_fieldDecl_in_fieldList2415);
            	    fieldDeclGen=fieldDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_fieldDeclGen==null) list_fieldDeclGen=new ArrayList();
            	    list_fieldDeclGen.add(fieldDeclGen);

            	    TK_0=(Token)match(input,19,FOLLOW_19_in_fieldList2420); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt55 >= 1 ) break loop55;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(55, input);
                        throw eee;
                }
                cnt55++;
            } while (true);

            // delphi.g:2373:42: (variantSectionGen+= variantSection )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==71) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // delphi.g:2373:44: variantSectionGen+= variantSection
                    {
                    pushFollow(FOLLOW_variantSection_in_fieldList2428);
                    variantSectionGen=variantSection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variantSectionGen==null) list_variantSectionGen=new ArrayList();
                    list_variantSectionGen.add(variantSectionGen);


                    }
                    break;

            }

            // delphi.g:2373:80: (TK_1= ';' )?
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==19) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    // delphi.g:2373:82: TK_1= ';'
                    {
                    TK_1=(Token)match(input,19,FOLLOW_19_in_fieldList2436); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node fieldListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		fieldListReturnNode.setKind("fieldList");

              		// Create a special CST Node for terminal fieldDeclGen aggregation
              		if(list_fieldDeclGen != null) {
              	    for(int pos = 0; pos < list_fieldDeclGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_fieldDeclGen != null) {		
              	    	delphiParser.fieldDecl_return r = (delphiParser.fieldDecl_return) list_fieldDeclGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("fieldDecl");
              	    		fieldListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		fieldListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		}
              		}

              	    // Create a CST Node
              		if(list_variantSectionGen != null) {
              	        for(Iterator it = list_variantSectionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.variantSection_return r = (delphiParser.variantSection_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variantSection");
              	            	fieldListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		fieldListReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = fieldListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, fieldList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldList"

    public static class fieldDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "fieldDecl"
    // delphi.g:2418:1: fieldDecl returns [Node returnNode] : identListGen+= identList TK_0= ':' typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.fieldDecl_return fieldDecl() throws RecognitionException {
        delphiParser.fieldDecl_return retval = new delphiParser.fieldDecl_return();
        retval.start = input.LT(1);
        int fieldDecl_StartIndex = input.index();
        Token TK_0=null;
        List list_identListGen=null;
        List list_typeGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // delphi.g:2419:1: (identListGen+= identList TK_0= ':' typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2419:5: identListGen+= identList TK_0= ':' typeGen+= type (portabilityDirectiveGen+= portabilityDirective )?
            {
            pushFollow(FOLLOW_identList_in_fieldDecl2461);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_0=(Token)match(input,37,FOLLOW_37_in_fieldDecl2466); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_fieldDecl2471);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            // delphi.g:2419:54: (portabilityDirectiveGen+= portabilityDirective )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==24||(LA58_0>=26 && LA58_0<=27)) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // delphi.g:2419:56: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_fieldDecl2477);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node fieldDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		fieldDeclReturnNode.setKind("fieldDecl");
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	fieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		fieldDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	fieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	fieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = fieldDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, fieldDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDecl"

    public static class variantSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variantSection"
    // delphi.g:2464:1: variantSection returns [Node returnNode] : TK_0= 'case' (identGen+= ident TK_1= ':' )? typeIdGen+= typeId TK_2= 'of' (recVariantGen+= recVariant TK_3= ';' )+ ;
    public final delphiParser.variantSection_return variantSection() throws RecognitionException {
        delphiParser.variantSection_return retval = new delphiParser.variantSection_return();
        retval.start = input.LT(1);
        int variantSection_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_identGen=null;
        List list_typeIdGen=null;
        List list_recVariantGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope typeIdGen = null;
        RuleReturnScope recVariantGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // delphi.g:2465:1: (TK_0= 'case' (identGen+= ident TK_1= ':' )? typeIdGen+= typeId TK_2= 'of' (recVariantGen+= recVariant TK_3= ';' )+ )
            // delphi.g:2465:5: TK_0= 'case' (identGen+= ident TK_1= ':' )? typeIdGen+= typeId TK_2= 'of' (recVariantGen+= recVariant TK_3= ';' )+
            {
            TK_0=(Token)match(input,71,FOLLOW_71_in_variantSection2502); if (state.failed) return retval;
            // delphi.g:2465:17: (identGen+= ident TK_1= ':' )?
            int alt59=2;
            alt59 = dfa59.predict(input);
            switch (alt59) {
                case 1 :
                    // delphi.g:2465:19: identGen+= ident TK_1= ':'
                    {
                    pushFollow(FOLLOW_ident_in_variantSection2508);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    TK_1=(Token)match(input,37,FOLLOW_37_in_variantSection2513); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_typeId_in_variantSection2520);
            typeIdGen=typeId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
            list_typeIdGen.add(typeIdGen);

            TK_2=(Token)match(input,40,FOLLOW_40_in_variantSection2525); if (state.failed) return retval;
            // delphi.g:2465:77: (recVariantGen+= recVariant TK_3= ';' )+
            int cnt60=0;
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);

                if ( ((LA60_0>=ID && LA60_0<=INT)||(LA60_0>=QVALUE && LA60_0<=DQVALUE)||LA60_0==17||LA60_0==68||(LA60_0>=78 && LA60_0<=82)||LA60_0==100||LA60_0==163) ) {
                    alt60=1;
                }


                switch (alt60) {
            	case 1 :
            	    // delphi.g:2465:79: recVariantGen+= recVariant TK_3= ';'
            	    {
            	    pushFollow(FOLLOW_recVariant_in_variantSection2531);
            	    recVariantGen=recVariant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_recVariantGen==null) list_recVariantGen=new ArrayList();
            	    list_recVariantGen.add(recVariantGen);

            	    TK_3=(Token)match(input,19,FOLLOW_19_in_variantSection2536); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt60 >= 1 ) break loop60;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(60, input);
                        throw eee;
                }
                cnt60++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node variantSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variantSectionReturnNode.setKind("variantSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		variantSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	variantSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		variantSectionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeIdGen != null) {
              	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeId");
              	            	variantSectionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		variantSectionReturnNode.getChildren().add(TK_2Leaf);
              	 	}

              		// Create a special CST Node for terminal recVariantGen aggregation
              		if(list_recVariantGen != null) {
              	    for(int pos = 0; pos < list_recVariantGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_recVariantGen != null) {		
              	    	delphiParser.recVariant_return r = (delphiParser.recVariant_return) list_recVariantGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("recVariant");
              	    		variantSectionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		variantSectionReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variantSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, variantSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variantSection"

    public static class recVariant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "recVariant"
    // delphi.g:2530:1: recVariant returns [Node returnNode] : constExprGen+= constExpr TK_0= ',' (constExprGen_1+= constExpr )+ TK_1= ':' TK_2= '(' (fieldListGen+= fieldList ) TK_3= ')' ;
    public final delphiParser.recVariant_return recVariant() throws RecognitionException {
        delphiParser.recVariant_return retval = new delphiParser.recVariant_return();
        retval.start = input.LT(1);
        int recVariant_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        List list_fieldListGen=null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        RuleReturnScope fieldListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // delphi.g:2531:1: (constExprGen+= constExpr TK_0= ',' (constExprGen_1+= constExpr )+ TK_1= ':' TK_2= '(' (fieldListGen+= fieldList ) TK_3= ')' )
            // delphi.g:2531:5: constExprGen+= constExpr TK_0= ',' (constExprGen_1+= constExpr )+ TK_1= ':' TK_2= '(' (fieldListGen+= fieldList ) TK_3= ')'
            {
            pushFollow(FOLLOW_constExpr_in_recVariant2561);
            constExprGen=constExpr();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constExprGen==null) list_constExprGen=new ArrayList();
            list_constExprGen.add(constExprGen);

            TK_0=(Token)match(input,33,FOLLOW_33_in_recVariant2566); if (state.failed) return retval;
            // delphi.g:2531:39: (constExprGen_1+= constExpr )+
            int cnt61=0;
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( ((LA61_0>=ID && LA61_0<=INT)||(LA61_0>=QVALUE && LA61_0<=DQVALUE)||LA61_0==17||LA61_0==68||(LA61_0>=78 && LA61_0<=82)||LA61_0==100||LA61_0==163) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // delphi.g:2531:41: constExprGen_1+= constExpr
            	    {
            	    pushFollow(FOLLOW_constExpr_in_recVariant2572);
            	    constExprGen_1=constExpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
            	    list_constExprGen_1.add(constExprGen_1);


            	    }
            	    break;

            	default :
            	    if ( cnt61 >= 1 ) break loop61;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(61, input);
                        throw eee;
                }
                cnt61++;
            } while (true);

            TK_1=(Token)match(input,37,FOLLOW_37_in_recVariant2579); if (state.failed) return retval;
            TK_2=(Token)match(input,17,FOLLOW_17_in_recVariant2584); if (state.failed) return retval;
            // delphi.g:2531:89: (fieldListGen+= fieldList )
            // delphi.g:2531:91: fieldListGen+= fieldList
            {
            pushFollow(FOLLOW_fieldList_in_recVariant2590);
            fieldListGen=fieldList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_fieldListGen==null) list_fieldListGen=new ArrayList();
            list_fieldListGen.add(fieldListGen);


            }

            TK_3=(Token)match(input,18,FOLLOW_18_in_recVariant2596); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node recVariantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		recVariantReturnNode.setKind("recVariant");
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	recVariantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		recVariantReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen_1 != null) {
              	        for(Iterator it = list_constExprGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	recVariantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		recVariantReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		recVariantReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_fieldListGen != null) {
              	        for(Iterator it = list_fieldListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.fieldList_return r = (delphiParser.fieldList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("fieldList");
              	            	recVariantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		recVariantReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = recVariantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, recVariant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "recVariant"

    public static class setType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "setType"
    // delphi.g:2591:1: setType returns [Node returnNode] : TK_0= 'set' TK_1= 'of' ordinalTypeGen+= ordinalType (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.setType_return setType() throws RecognitionException {
        delphiParser.setType_return retval = new delphiParser.setType_return();
        retval.start = input.LT(1);
        int setType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_ordinalTypeGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope ordinalTypeGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // delphi.g:2592:1: (TK_0= 'set' TK_1= 'of' ordinalTypeGen+= ordinalType (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2592:5: TK_0= 'set' TK_1= 'of' ordinalTypeGen+= ordinalType (portabilityDirectiveGen+= portabilityDirective )?
            {
            TK_0=(Token)match(input,72,FOLLOW_72_in_setType2619); if (state.failed) return retval;
            TK_1=(Token)match(input,40,FOLLOW_40_in_setType2624); if (state.failed) return retval;
            pushFollow(FOLLOW_ordinalType_in_setType2629);
            ordinalTypeGen=ordinalType();

            state._fsp--;
            if (state.failed) return retval;
            if (list_ordinalTypeGen==null) list_ordinalTypeGen=new ArrayList();
            list_ordinalTypeGen.add(ordinalTypeGen);

            // delphi.g:2592:56: (portabilityDirectiveGen+= portabilityDirective )?
            int alt62=2;
            switch ( input.LA(1) ) {
                case 26:
                    {
                    int LA62_1 = input.LA(2);

                    if ( (synpred101_delphi()) ) {
                        alt62=1;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA62_2 = input.LA(2);

                    if ( (synpred101_delphi()) ) {
                        alt62=1;
                    }
                    }
                    break;
                case 24:
                    {
                    int LA62_3 = input.LA(2);

                    if ( (synpred101_delphi()) ) {
                        alt62=1;
                    }
                    }
                    break;
            }

            switch (alt62) {
                case 1 :
                    // delphi.g:2592:58: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_setType2635);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node setTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		setTypeReturnNode.setKind("setType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		setTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		setTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_ordinalTypeGen != null) {
              	        for(Iterator it = list_ordinalTypeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ordinalType_return r = (delphiParser.ordinalType_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ordinalType");
              	            	setTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	setTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = setTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, setType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "setType"

    public static class fileType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "fileType"
    // delphi.g:2632:1: fileType returns [Node returnNode] : TK_0= 'file' TK_1= 'of' typeIdGen+= typeId (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.fileType_return fileType() throws RecognitionException {
        delphiParser.fileType_return retval = new delphiParser.fileType_return();
        retval.start = input.LT(1);
        int fileType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_typeIdGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope typeIdGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // delphi.g:2633:1: (TK_0= 'file' TK_1= 'of' typeIdGen+= typeId (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2633:5: TK_0= 'file' TK_1= 'of' typeIdGen+= typeId (portabilityDirectiveGen+= portabilityDirective )?
            {
            TK_0=(Token)match(input,73,FOLLOW_73_in_fileType2660); if (state.failed) return retval;
            TK_1=(Token)match(input,40,FOLLOW_40_in_fileType2665); if (state.failed) return retval;
            pushFollow(FOLLOW_typeId_in_fileType2670);
            typeIdGen=typeId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
            list_typeIdGen.add(typeIdGen);

            // delphi.g:2633:47: (portabilityDirectiveGen+= portabilityDirective )?
            int alt63=2;
            switch ( input.LA(1) ) {
                case 26:
                    {
                    int LA63_1 = input.LA(2);

                    if ( (synpred102_delphi()) ) {
                        alt63=1;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA63_2 = input.LA(2);

                    if ( (synpred102_delphi()) ) {
                        alt63=1;
                    }
                    }
                    break;
                case 24:
                    {
                    int LA63_3 = input.LA(2);

                    if ( (synpred102_delphi()) ) {
                        alt63=1;
                    }
                    }
                    break;
            }

            switch (alt63) {
                case 1 :
                    // delphi.g:2633:49: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_fileType2676);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node fileTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		fileTypeReturnNode.setKind("fileType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		fileTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		fileTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeIdGen != null) {
              	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeId");
              	            	fileTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	fileTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = fileTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, fileType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fileType"

    public static class pointerType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "pointerType"
    // delphi.g:2673:1: pointerType returns [Node returnNode] : TK_0= '^' typeIdGen+= typeId (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.pointerType_return pointerType() throws RecognitionException {
        delphiParser.pointerType_return retval = new delphiParser.pointerType_return();
        retval.start = input.LT(1);
        int pointerType_StartIndex = input.index();
        Token TK_0=null;
        List list_typeIdGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope typeIdGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // delphi.g:2674:1: (TK_0= '^' typeIdGen+= typeId (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2674:5: TK_0= '^' typeIdGen+= typeId (portabilityDirectiveGen+= portabilityDirective )?
            {
            TK_0=(Token)match(input,74,FOLLOW_74_in_pointerType2701); if (state.failed) return retval;
            pushFollow(FOLLOW_typeId_in_pointerType2706);
            typeIdGen=typeId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
            list_typeIdGen.add(typeIdGen);

            // delphi.g:2674:33: (portabilityDirectiveGen+= portabilityDirective )?
            int alt64=2;
            switch ( input.LA(1) ) {
                case 26:
                    {
                    int LA64_1 = input.LA(2);

                    if ( (synpred103_delphi()) ) {
                        alt64=1;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA64_2 = input.LA(2);

                    if ( (synpred103_delphi()) ) {
                        alt64=1;
                    }
                    }
                    break;
                case 24:
                    {
                    int LA64_3 = input.LA(2);

                    if ( (synpred103_delphi()) ) {
                        alt64=1;
                    }
                    }
                    break;
            }

            switch (alt64) {
                case 1 :
                    // delphi.g:2674:35: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_pointerType2712);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node pointerTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		pointerTypeReturnNode.setKind("pointerType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		pointerTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeIdGen != null) {
              	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeId");
              	            	pointerTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	pointerTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = pointerTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, pointerType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "pointerType"

    public static class procedureType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "procedureType"
    // delphi.g:2709:1: procedureType returns [Node returnNode] : (procedureHeadingGen+= procedureHeading | functionHeadingGen+= functionHeading ) (TK_0= 'of' TK_1= 'object' )? ;
    public final delphiParser.procedureType_return procedureType() throws RecognitionException {
        delphiParser.procedureType_return retval = new delphiParser.procedureType_return();
        retval.start = input.LT(1);
        int procedureType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_procedureHeadingGen=null;
        List list_functionHeadingGen=null;
        RuleReturnScope procedureHeadingGen = null;
        RuleReturnScope functionHeadingGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // delphi.g:2710:1: ( (procedureHeadingGen+= procedureHeading | functionHeadingGen+= functionHeading ) (TK_0= 'of' TK_1= 'object' )? )
            // delphi.g:2710:4: (procedureHeadingGen+= procedureHeading | functionHeadingGen+= functionHeading ) (TK_0= 'of' TK_1= 'object' )?
            {
            // delphi.g:2710:4: (procedureHeadingGen+= procedureHeading | functionHeadingGen+= functionHeading )
            int alt65=2;
            switch ( input.LA(1) ) {
            case 39:
                {
                int LA65_1 = input.LA(2);

                if ( (LA65_1==124) ) {
                    alt65=2;
                }
                else if ( (LA65_1==125) ) {
                    alt65=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 65, 1, input);

                    throw nvae;
                }
                }
                break;
            case 125:
                {
                alt65=1;
                }
                break;
            case 124:
                {
                alt65=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // delphi.g:2710:6: procedureHeadingGen+= procedureHeading
                    {
                    pushFollow(FOLLOW_procedureHeading_in_procedureType2738);
                    procedureHeadingGen=procedureHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_procedureHeadingGen==null) list_procedureHeadingGen=new ArrayList();
                    list_procedureHeadingGen.add(procedureHeadingGen);


                    }
                    break;
                case 2 :
                    // delphi.g:2710:47: functionHeadingGen+= functionHeading
                    {
                    pushFollow(FOLLOW_functionHeading_in_procedureType2745);
                    functionHeadingGen=functionHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_functionHeadingGen==null) list_functionHeadingGen=new ArrayList();
                    list_functionHeadingGen.add(functionHeadingGen);


                    }
                    break;

            }

            // delphi.g:2710:84: (TK_0= 'of' TK_1= 'object' )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==40) ) {
                int LA66_1 = input.LA(2);

                if ( (synpred105_delphi()) ) {
                    alt66=1;
                }
            }
            switch (alt66) {
                case 1 :
                    // delphi.g:2710:86: TK_0= 'of' TK_1= 'object'
                    {
                    TK_0=(Token)match(input,40,FOLLOW_40_in_procedureType2752); if (state.failed) return retval;
                    TK_1=(Token)match(input,75,FOLLOW_75_in_procedureType2757); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node procedureTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		procedureTypeReturnNode.setKind("procedureType");
              	    // Create a CST Node
              		if(list_procedureHeadingGen != null) {
              	        for(Iterator it = list_procedureHeadingGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.procedureHeading_return r = (delphiParser.procedureHeading_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("procedureHeading");
              	            	procedureTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_functionHeadingGen != null) {
              	        for(Iterator it = list_functionHeadingGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.functionHeading_return r = (delphiParser.functionHeading_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("functionHeading");
              	            	procedureTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		procedureTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		procedureTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = procedureTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, procedureType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureType"

    public static class varSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "varSection"
    // delphi.g:2750:1: varSection returns [Node returnNode] : TK_0= 'var' (varDeclGen+= varDecl TK_1= ';' )+ ;
    public final delphiParser.varSection_return varSection() throws RecognitionException {
        delphiParser.varSection_return retval = new delphiParser.varSection_return();
        retval.start = input.LT(1);
        int varSection_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_varDeclGen=null;
        RuleReturnScope varDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // delphi.g:2751:1: (TK_0= 'var' (varDeclGen+= varDecl TK_1= ';' )+ )
            // delphi.g:2751:5: TK_0= 'var' (varDeclGen+= varDecl TK_1= ';' )+
            {
            TK_0=(Token)match(input,76,FOLLOW_76_in_varSection2782); if (state.failed) return retval;
            // delphi.g:2751:16: (varDeclGen+= varDecl TK_1= ';' )+
            int cnt67=0;
            loop67:
            do {
                int alt67=2;
                int LA67_0 = input.LA(1);

                if ( (LA67_0==ID||LA67_0==100) ) {
                    alt67=1;
                }


                switch (alt67) {
            	case 1 :
            	    // delphi.g:2751:18: varDeclGen+= varDecl TK_1= ';'
            	    {
            	    pushFollow(FOLLOW_varDecl_in_varSection2788);
            	    varDeclGen=varDecl();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_varDeclGen==null) list_varDeclGen=new ArrayList();
            	    list_varDeclGen.add(varDeclGen);

            	    TK_1=(Token)match(input,19,FOLLOW_19_in_varSection2793); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    if ( cnt67 >= 1 ) break loop67;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(67, input);
                        throw eee;
                }
                cnt67++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node varSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		varSectionReturnNode.setKind("varSection");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		varSectionReturnNode.getChildren().add(TK_0Leaf);
              	 	}

              		// Create a special CST Node for terminal varDeclGen aggregation
              		if(list_varDeclGen != null) {
              	    for(int pos = 0; pos < list_varDeclGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_varDeclGen != null) {		
              	    	delphiParser.varDecl_return r = (delphiParser.varDecl_return) list_varDeclGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("varDecl");
              	    		varSectionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		varSectionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = varSectionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, varSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varSection"

    public static class varDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "varDecl"
    // delphi.g:2786:1: varDecl returns [Node returnNode] : identListGen+= identList TK_0= ':' typeGen+= type ( (TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr ) ) | TK_2= '=' constExprGen_1+= constExpr )? (portabilityDirectiveGen+= portabilityDirective )? ;
    public final delphiParser.varDecl_return varDecl() throws RecognitionException {
        delphiParser.varDecl_return retval = new delphiParser.varDecl_return();
        retval.start = input.LT(1);
        int varDecl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_identListGen=null;
        List list_typeGen=null;
        List list_identGen=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope identGen = null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // delphi.g:2787:1: (identListGen+= identList TK_0= ':' typeGen+= type ( (TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr ) ) | TK_2= '=' constExprGen_1+= constExpr )? (portabilityDirectiveGen+= portabilityDirective )? )
            // delphi.g:2787:5: identListGen+= identList TK_0= ':' typeGen+= type ( (TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr ) ) | TK_2= '=' constExprGen_1+= constExpr )? (portabilityDirectiveGen+= portabilityDirective )?
            {
            pushFollow(FOLLOW_identList_in_varDecl2818);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_0=(Token)match(input,37,FOLLOW_37_in_varDecl2823); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_varDecl2828);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            // delphi.g:2787:54: ( (TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr ) ) | TK_2= '=' constExprGen_1+= constExpr )?
            int alt69=3;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==77) ) {
                alt69=1;
            }
            else if ( (LA69_0==36) ) {
                alt69=2;
            }
            switch (alt69) {
                case 1 :
                    // delphi.g:2787:55: (TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr ) )
                    {
                    // delphi.g:2787:55: (TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr ) )
                    // delphi.g:2787:57: TK_1= 'absolute' (identGen+= ident | constExprGen+= constExpr )
                    {
                    TK_1=(Token)match(input,77,FOLLOW_77_in_varDecl2835); if (state.failed) return retval;
                    // delphi.g:2787:73: (identGen+= ident | constExprGen+= constExpr )
                    int alt68=2;
                    switch ( input.LA(1) ) {
                    case ID:
                        {
                        int LA68_1 = input.LA(2);

                        if ( (synpred107_delphi()) ) {
                            alt68=1;
                        }
                        else if ( (true) ) {
                            alt68=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 100:
                        {
                        int LA68_2 = input.LA(2);

                        if ( (LA68_2==ID) ) {
                            int LA68_5 = input.LA(3);

                            if ( (synpred107_delphi()) ) {
                                alt68=1;
                            }
                            else if ( (true) ) {
                                alt68=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 68, 5, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 68, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                    case QVALUE:
                    case DQVALUE:
                    case 17:
                    case 68:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 163:
                        {
                        alt68=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 68, 0, input);

                        throw nvae;
                    }

                    switch (alt68) {
                        case 1 :
                            // delphi.g:2787:75: identGen+= ident
                            {
                            pushFollow(FOLLOW_ident_in_varDecl2841);
                            identGen=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_identGen==null) list_identGen=new ArrayList();
                            list_identGen.add(identGen);


                            }
                            break;
                        case 2 :
                            // delphi.g:2787:94: constExprGen+= constExpr
                            {
                            pushFollow(FOLLOW_constExpr_in_varDecl2848);
                            constExprGen=constExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_constExprGen==null) list_constExprGen=new ArrayList();
                            list_constExprGen.add(constExprGen);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // delphi.g:2787:123: TK_2= '=' constExprGen_1+= constExpr
                    {
                    TK_2=(Token)match(input,36,FOLLOW_36_in_varDecl2857); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_varDecl2862);
                    constExprGen_1=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
                    list_constExprGen_1.add(constExprGen_1);


                    }
                    break;

            }

            // delphi.g:2787:161: (portabilityDirectiveGen+= portabilityDirective )?
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==24||(LA70_0>=26 && LA70_0<=27)) ) {
                alt70=1;
            }
            switch (alt70) {
                case 1 :
                    // delphi.g:2787:163: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_varDecl2870);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node varDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		varDeclReturnNode.setKind("varDecl");
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	varDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		varDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	varDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		varDeclReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	varDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	varDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		varDeclReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen_1 != null) {
              	        for(Iterator it = list_constExprGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	varDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	varDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = varDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, varDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "varDecl"

    public static class expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "expression"
    // delphi.g:2873:1: expression returns [Node returnNode] : simpleExpressionGen+= simpleExpression (relOpGen+= relOp simpleExpressionGen_1+= simpleExpression )* ;
    public final delphiParser.expression_return expression() throws RecognitionException {
        delphiParser.expression_return retval = new delphiParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        List list_simpleExpressionGen=null;
        List list_relOpGen=null;
        List list_simpleExpressionGen_1=null;
        RuleReturnScope simpleExpressionGen = null;
        RuleReturnScope relOpGen = null;
        RuleReturnScope simpleExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // delphi.g:2874:1: (simpleExpressionGen+= simpleExpression (relOpGen+= relOp simpleExpressionGen_1+= simpleExpression )* )
            // delphi.g:2874:5: simpleExpressionGen+= simpleExpression (relOpGen+= relOp simpleExpressionGen_1+= simpleExpression )*
            {
            pushFollow(FOLLOW_simpleExpression_in_expression2896);
            simpleExpressionGen=simpleExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_simpleExpressionGen==null) list_simpleExpressionGen=new ArrayList();
            list_simpleExpressionGen.add(simpleExpressionGen);

            // delphi.g:2874:43: (relOpGen+= relOp simpleExpressionGen_1+= simpleExpression )*
            loop71:
            do {
                int alt71=2;
                alt71 = dfa71.predict(input);
                switch (alt71) {
            	case 1 :
            	    // delphi.g:2874:45: relOpGen+= relOp simpleExpressionGen_1+= simpleExpression
            	    {
            	    pushFollow(FOLLOW_relOp_in_expression2902);
            	    relOpGen=relOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_relOpGen==null) list_relOpGen=new ArrayList();
            	    list_relOpGen.add(relOpGen);

            	    pushFollow(FOLLOW_simpleExpression_in_expression2907);
            	    simpleExpressionGen_1=simpleExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_simpleExpressionGen_1==null) list_simpleExpressionGen_1=new ArrayList();
            	    list_simpleExpressionGen_1.add(simpleExpressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expressionReturnNode.setKind("expression");
              	    // Create a CST Node
              		if(list_simpleExpressionGen != null) {
              	        for(Iterator it = list_simpleExpressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.simpleExpression_return r = (delphiParser.simpleExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("simpleExpression");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal relOpGen aggregation
              		if(list_relOpGen != null) {
              	    for(int pos = 0; pos < list_relOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_relOpGen != null) {		
              	    	delphiParser.relOp_return r = (delphiParser.relOp_return) list_relOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("relOp");
              	    		expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_simpleExpressionGen_1 != null) {		
              	    	delphiParser.simpleExpression_return r = (delphiParser.simpleExpression_return) list_simpleExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("simpleExpression");
              	    		expressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class simpleExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "simpleExpression"
    // delphi.g:2917:1: simpleExpression returns [Node returnNode] : (TK_0= '+' | TK_1= '-' )? termGen+= term (addOpGen+= addOp termGen_1+= term )* ;
    public final delphiParser.simpleExpression_return simpleExpression() throws RecognitionException {
        delphiParser.simpleExpression_return retval = new delphiParser.simpleExpression_return();
        retval.start = input.LT(1);
        int simpleExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_termGen=null;
        List list_addOpGen=null;
        List list_termGen_1=null;
        RuleReturnScope termGen = null;
        RuleReturnScope addOpGen = null;
        RuleReturnScope termGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // delphi.g:2918:1: ( (TK_0= '+' | TK_1= '-' )? termGen+= term (addOpGen+= addOp termGen_1+= term )* )
            // delphi.g:2918:4: (TK_0= '+' | TK_1= '-' )? termGen+= term (addOpGen+= addOp termGen_1+= term )*
            {
            // delphi.g:2918:4: (TK_0= '+' | TK_1= '-' )?
            int alt72=3;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==78) ) {
                alt72=1;
            }
            else if ( (LA72_0==79) ) {
                alt72=2;
            }
            switch (alt72) {
                case 1 :
                    // delphi.g:2918:6: TK_0= '+'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_simpleExpression2933); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // delphi.g:2918:18: TK_1= '-'
                    {
                    TK_1=(Token)match(input,79,FOLLOW_79_in_simpleExpression2940); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_term_in_simpleExpression2947);
            termGen=term();

            state._fsp--;
            if (state.failed) return retval;
            if (list_termGen==null) list_termGen=new ArrayList();
            list_termGen.add(termGen);

            // delphi.g:2918:44: (addOpGen+= addOp termGen_1+= term )*
            loop73:
            do {
                int alt73=2;
                alt73 = dfa73.predict(input);
                switch (alt73) {
            	case 1 :
            	    // delphi.g:2918:46: addOpGen+= addOp termGen_1+= term
            	    {
            	    pushFollow(FOLLOW_addOp_in_simpleExpression2953);
            	    addOpGen=addOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_addOpGen==null) list_addOpGen=new ArrayList();
            	    list_addOpGen.add(addOpGen);

            	    pushFollow(FOLLOW_term_in_simpleExpression2958);
            	    termGen_1=term();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_termGen_1==null) list_termGen_1=new ArrayList();
            	    list_termGen_1.add(termGen_1);


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node simpleExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		simpleExpressionReturnNode.setKind("simpleExpression");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		simpleExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		simpleExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_termGen != null) {
              	        for(Iterator it = list_termGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.term_return r = (delphiParser.term_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("term");
              	            	simpleExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal addOpGen aggregation
              		if(list_addOpGen != null) {
              	    for(int pos = 0; pos < list_addOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_addOpGen != null) {		
              	    	delphiParser.addOp_return r = (delphiParser.addOp_return) list_addOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("addOp");
              	    		simpleExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_termGen_1 != null) {		
              	    	delphiParser.term_return r = (delphiParser.term_return) list_termGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("term");
              	    		simpleExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = simpleExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, simpleExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleExpression"

    public static class term_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "term"
    // delphi.g:2971:1: term returns [Node returnNode] : factorGen+= factor (mulOpGen+= mulOp factorGen_1+= factor )* ;
    public final delphiParser.term_return term() throws RecognitionException {
        delphiParser.term_return retval = new delphiParser.term_return();
        retval.start = input.LT(1);
        int term_StartIndex = input.index();
        List list_factorGen=null;
        List list_mulOpGen=null;
        List list_factorGen_1=null;
        RuleReturnScope factorGen = null;
        RuleReturnScope mulOpGen = null;
        RuleReturnScope factorGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // delphi.g:2972:1: (factorGen+= factor (mulOpGen+= mulOp factorGen_1+= factor )* )
            // delphi.g:2972:5: factorGen+= factor (mulOpGen+= mulOp factorGen_1+= factor )*
            {
            pushFollow(FOLLOW_factor_in_term2984);
            factorGen=factor();

            state._fsp--;
            if (state.failed) return retval;
            if (list_factorGen==null) list_factorGen=new ArrayList();
            list_factorGen.add(factorGen);

            // delphi.g:2972:23: (mulOpGen+= mulOp factorGen_1+= factor )*
            loop74:
            do {
                int alt74=2;
                int LA74_0 = input.LA(1);

                if ( ((LA74_0>=93 && LA74_0<=99)) ) {
                    alt74=1;
                }


                switch (alt74) {
            	case 1 :
            	    // delphi.g:2972:25: mulOpGen+= mulOp factorGen_1+= factor
            	    {
            	    pushFollow(FOLLOW_mulOp_in_term2990);
            	    mulOpGen=mulOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_mulOpGen==null) list_mulOpGen=new ArrayList();
            	    list_mulOpGen.add(mulOpGen);

            	    pushFollow(FOLLOW_factor_in_term2995);
            	    factorGen_1=factor();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_factorGen_1==null) list_factorGen_1=new ArrayList();
            	    list_factorGen_1.add(factorGen_1);


            	    }
            	    break;

            	default :
            	    break loop74;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node termReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		termReturnNode.setKind("term");
              	    // Create a CST Node
              		if(list_factorGen != null) {
              	        for(Iterator it = list_factorGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.factor_return r = (delphiParser.factor_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("factor");
              	            	termReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal mulOpGen aggregation
              		if(list_mulOpGen != null) {
              	    for(int pos = 0; pos < list_mulOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_mulOpGen != null) {		
              	    	delphiParser.mulOp_return r = (delphiParser.mulOp_return) list_mulOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("mulOp");
              	    		termReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_factorGen_1 != null) {		
              	    	delphiParser.factor_return r = (delphiParser.factor_return) list_factorGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("factor");
              	    		termReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = termReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, term_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "term"

    public static class factor_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "factor"
    // delphi.g:3015:1: factor returns [Node returnNode] : (designatorGen+= designator (TK_0= '(' exprListGen+= exprList TK_1= ')' )? | TK_0= '@' designatorGen+= designator | numberGen+= number | stringGen+= string | TK_0= 'nil' | TK_0= '(' expressionGen+= expression TK_1= ')' | TK_0= 'not' factorGen+= factor | setConstructorGen+= setConstructor | typeIdGen+= typeId TK_0= '(' expressionGen+= expression TK_1= ')' );
    public final delphiParser.factor_return factor() throws RecognitionException {
        delphiParser.factor_return retval = new delphiParser.factor_return();
        retval.start = input.LT(1);
        int factor_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_designatorGen=null;
        List list_exprListGen=null;
        List list_numberGen=null;
        List list_stringGen=null;
        List list_expressionGen=null;
        List list_factorGen=null;
        List list_setConstructorGen=null;
        List list_typeIdGen=null;
        RuleReturnScope designatorGen = null;
        RuleReturnScope exprListGen = null;
        RuleReturnScope numberGen = null;
        RuleReturnScope stringGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope factorGen = null;
        RuleReturnScope setConstructorGen = null;
        RuleReturnScope typeIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // delphi.g:3016:1: (designatorGen+= designator (TK_0= '(' exprListGen+= exprList TK_1= ')' )? | TK_0= '@' designatorGen+= designator | numberGen+= number | stringGen+= string | TK_0= 'nil' | TK_0= '(' expressionGen+= expression TK_1= ')' | TK_0= 'not' factorGen+= factor | setConstructorGen+= setConstructor | typeIdGen+= typeId TK_0= '(' expressionGen+= expression TK_1= ')' )
            int alt76=9;
            alt76 = dfa76.predict(input);
            switch (alt76) {
                case 1 :
                    // delphi.g:3016:5: designatorGen+= designator (TK_0= '(' exprListGen+= exprList TK_1= ')' )?
                    {
                    pushFollow(FOLLOW_designator_in_factor3020);
                    designatorGen=designator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_designatorGen==null) list_designatorGen=new ArrayList();
                    list_designatorGen.add(designatorGen);

                    // delphi.g:3016:31: (TK_0= '(' exprListGen+= exprList TK_1= ')' )?
                    int alt75=2;
                    alt75 = dfa75.predict(input);
                    switch (alt75) {
                        case 1 :
                            // delphi.g:3016:33: TK_0= '(' exprListGen+= exprList TK_1= ')'
                            {
                            TK_0=(Token)match(input,17,FOLLOW_17_in_factor3026); if (state.failed) return retval;
                            pushFollow(FOLLOW_exprList_in_factor3031);
                            exprListGen=exprList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_exprListGen==null) list_exprListGen=new ArrayList();
                            list_exprListGen.add(exprListGen);

                            TK_1=(Token)match(input,18,FOLLOW_18_in_factor3036); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a CST Node
                      		if(list_designatorGen != null) {
                      	        for(Iterator it = list_designatorGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.designator_return r = (delphiParser.designator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("designator");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		factorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_exprListGen != null) {
                      	        for(Iterator it = list_exprListGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.exprList_return r = (delphiParser.exprList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exprList");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		factorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3054:8: TK_0= '@' designatorGen+= designator
                    {
                    TK_0=(Token)match(input,80,FOLLOW_80_in_factor3053); if (state.failed) return retval;
                    pushFollow(FOLLOW_designator_in_factor3058);
                    designatorGen=designator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_designatorGen==null) list_designatorGen=new ArrayList();
                    list_designatorGen.add(designatorGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		factorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_designatorGen != null) {
                      	        for(Iterator it = list_designatorGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.designator_return r = (delphiParser.designator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("designator");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:3077:9: numberGen+= number
                    {
                    pushFollow(FOLLOW_number_in_factor3074);
                    numberGen=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_numberGen==null) list_numberGen=new ArrayList();
                    list_numberGen.add(numberGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a CST Node
                      		if(list_numberGen != null) {
                      	        for(Iterator it = list_numberGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.number_return r = (delphiParser.number_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("number");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:3095:9: stringGen+= string
                    {
                    pushFollow(FOLLOW_string_in_factor3090);
                    stringGen=string();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_stringGen==null) list_stringGen=new ArrayList();
                    list_stringGen.add(stringGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a CST Node
                      		if(list_stringGen != null) {
                      	        for(Iterator it = list_stringGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.string_return r = (delphiParser.string_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("string");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:3113:9: TK_0= 'nil'
                    {
                    TK_0=(Token)match(input,81,FOLLOW_81_in_factor3106); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		factorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:3126:9: TK_0= '(' expressionGen+= expression TK_1= ')'
                    {
                    TK_0=(Token)match(input,17,FOLLOW_17_in_factor3122); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_factor3127);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    TK_1=(Token)match(input,18,FOLLOW_18_in_factor3132); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		factorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		factorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:3154:9: TK_0= 'not' factorGen+= factor
                    {
                    TK_0=(Token)match(input,82,FOLLOW_82_in_factor3148); if (state.failed) return retval;
                    pushFollow(FOLLOW_factor_in_factor3153);
                    factorGen=factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_factorGen==null) list_factorGen=new ArrayList();
                    list_factorGen.add(factorGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		factorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_factorGen != null) {
                      	        for(Iterator it = list_factorGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.factor_return r = (delphiParser.factor_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("factor");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // delphi.g:3177:9: setConstructorGen+= setConstructor
                    {
                    pushFollow(FOLLOW_setConstructor_in_factor3169);
                    setConstructorGen=setConstructor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_setConstructorGen==null) list_setConstructorGen=new ArrayList();
                    list_setConstructorGen.add(setConstructorGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a CST Node
                      		if(list_setConstructorGen != null) {
                      	        for(Iterator it = list_setConstructorGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.setConstructor_return r = (delphiParser.setConstructor_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("setConstructor");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // delphi.g:3195:9: typeIdGen+= typeId TK_0= '(' expressionGen+= expression TK_1= ')'
                    {
                    pushFollow(FOLLOW_typeId_in_factor3185);
                    typeIdGen=typeId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
                    list_typeIdGen.add(typeIdGen);

                    TK_0=(Token)match(input,17,FOLLOW_17_in_factor3190); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_factor3195);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    TK_1=(Token)match(input,18,FOLLOW_18_in_factor3200); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node factorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		factorReturnNode.setKind("factor");
                      	    // Create a CST Node
                      		if(list_typeIdGen != null) {
                      	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeId");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		factorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	factorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		factorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = factorReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, factor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "factor"

    public static class relOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "relOp"
    // delphi.g:3235:1: relOp returns [Node returnNode] : (TK_0= '=' | TK_0= '>' | TK_0= '<' | TK_0= '<=' | TK_0= '>=' | TK_0= '<>' | TK_0= 'in' | TK_0= 'is' | TK_0= 'as' );
    public final delphiParser.relOp_return relOp() throws RecognitionException {
        delphiParser.relOp_return retval = new delphiParser.relOp_return();
        retval.start = input.LT(1);
        int relOp_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // delphi.g:3236:1: (TK_0= '=' | TK_0= '>' | TK_0= '<' | TK_0= '<=' | TK_0= '>=' | TK_0= '<>' | TK_0= 'in' | TK_0= 'is' | TK_0= 'as' )
            int alt77=9;
            switch ( input.LA(1) ) {
            case 36:
                {
                alt77=1;
                }
                break;
            case 83:
                {
                alt77=2;
                }
                break;
            case 84:
                {
                alt77=3;
                }
                break;
            case 85:
                {
                alt77=4;
                }
                break;
            case 86:
                {
                alt77=5;
                }
                break;
            case 87:
                {
                alt77=6;
                }
                break;
            case 88:
                {
                alt77=7;
                }
                break;
            case 89:
                {
                alt77=8;
                }
                break;
            case 90:
                {
                alt77=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // delphi.g:3236:5: TK_0= '='
                    {
                    TK_0=(Token)match(input,36,FOLLOW_36_in_relOp3223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3249:5: TK_0= '>'
                    {
                    TK_0=(Token)match(input,83,FOLLOW_83_in_relOp3235); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:3262:9: TK_0= '<'
                    {
                    TK_0=(Token)match(input,84,FOLLOW_84_in_relOp3251); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:3275:9: TK_0= '<='
                    {
                    TK_0=(Token)match(input,85,FOLLOW_85_in_relOp3267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:3288:9: TK_0= '>='
                    {
                    TK_0=(Token)match(input,86,FOLLOW_86_in_relOp3283); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:3301:9: TK_0= '<>'
                    {
                    TK_0=(Token)match(input,87,FOLLOW_87_in_relOp3299); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:3314:5: TK_0= 'in'
                    {
                    TK_0=(Token)match(input,88,FOLLOW_88_in_relOp3311); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // delphi.g:3327:9: TK_0= 'is'
                    {
                    TK_0=(Token)match(input,89,FOLLOW_89_in_relOp3327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // delphi.g:3340:9: TK_0= 'as'
                    {
                    TK_0=(Token)match(input,90,FOLLOW_90_in_relOp3343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node relOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		relOpReturnNode.setKind("relOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		relOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = relOpReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, relOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relOp"

    public static class addOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "addOp"
    // delphi.g:3355:1: addOp returns [Node returnNode] : (TK_0= '+' | TK_0= '-' | TK_0= 'or' | TK_0= 'xor' );
    public final delphiParser.addOp_return addOp() throws RecognitionException {
        delphiParser.addOp_return retval = new delphiParser.addOp_return();
        retval.start = input.LT(1);
        int addOp_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // delphi.g:3356:1: (TK_0= '+' | TK_0= '-' | TK_0= 'or' | TK_0= 'xor' )
            int alt78=4;
            switch ( input.LA(1) ) {
            case 78:
                {
                alt78=1;
                }
                break;
            case 79:
                {
                alt78=2;
                }
                break;
            case 91:
                {
                alt78=3;
                }
                break;
            case 92:
                {
                alt78=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 78, 0, input);

                throw nvae;
            }

            switch (alt78) {
                case 1 :
                    // delphi.g:3356:5: TK_0= '+'
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_addOp3366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node addOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		addOpReturnNode.setKind("addOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		addOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = addOpReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3369:9: TK_0= '-'
                    {
                    TK_0=(Token)match(input,79,FOLLOW_79_in_addOp3382); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node addOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		addOpReturnNode.setKind("addOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		addOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = addOpReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:3382:9: TK_0= 'or'
                    {
                    TK_0=(Token)match(input,91,FOLLOW_91_in_addOp3398); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node addOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		addOpReturnNode.setKind("addOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		addOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = addOpReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:3395:9: TK_0= 'xor'
                    {
                    TK_0=(Token)match(input,92,FOLLOW_92_in_addOp3414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node addOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		addOpReturnNode.setKind("addOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		addOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = addOpReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, addOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "addOp"

    public static class mulOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "mulOp"
    // delphi.g:3410:1: mulOp returns [Node returnNode] : (TK_0= '*' | TK_0= '/' | TK_0= 'div' | TK_0= 'mod' | TK_0= 'and' | TK_0= 'shl' | TK_0= 'shr' );
    public final delphiParser.mulOp_return mulOp() throws RecognitionException {
        delphiParser.mulOp_return retval = new delphiParser.mulOp_return();
        retval.start = input.LT(1);
        int mulOp_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // delphi.g:3411:1: (TK_0= '*' | TK_0= '/' | TK_0= 'div' | TK_0= 'mod' | TK_0= 'and' | TK_0= 'shl' | TK_0= 'shr' )
            int alt79=7;
            switch ( input.LA(1) ) {
            case 93:
                {
                alt79=1;
                }
                break;
            case 94:
                {
                alt79=2;
                }
                break;
            case 95:
                {
                alt79=3;
                }
                break;
            case 96:
                {
                alt79=4;
                }
                break;
            case 97:
                {
                alt79=5;
                }
                break;
            case 98:
                {
                alt79=6;
                }
                break;
            case 99:
                {
                alt79=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }

            switch (alt79) {
                case 1 :
                    // delphi.g:3411:5: TK_0= '*'
                    {
                    TK_0=(Token)match(input,93,FOLLOW_93_in_mulOp3437); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3424:8: TK_0= '/'
                    {
                    TK_0=(Token)match(input,94,FOLLOW_94_in_mulOp3452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:3437:9: TK_0= 'div'
                    {
                    TK_0=(Token)match(input,95,FOLLOW_95_in_mulOp3468); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:3450:9: TK_0= 'mod'
                    {
                    TK_0=(Token)match(input,96,FOLLOW_96_in_mulOp3484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:3463:9: TK_0= 'and'
                    {
                    TK_0=(Token)match(input,97,FOLLOW_97_in_mulOp3500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:3476:9: TK_0= 'shl'
                    {
                    TK_0=(Token)match(input,98,FOLLOW_98_in_mulOp3516); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:3489:9: TK_0= 'shr'
                    {
                    TK_0=(Token)match(input,99,FOLLOW_99_in_mulOp3532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node mulOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		mulOpReturnNode.setKind("mulOp");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		mulOpReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = mulOpReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, mulOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "mulOp"

    public static class designator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "designator"
    // delphi.g:3504:1: designator returns [Node returnNode] : designatorSubPartGen+= designatorSubPart (TK_0= '.' designatorGen+= designator )? ;
    public final delphiParser.designator_return designator() throws RecognitionException {
        delphiParser.designator_return retval = new delphiParser.designator_return();
        retval.start = input.LT(1);
        int designator_StartIndex = input.index();
        Token TK_0=null;
        List list_designatorSubPartGen=null;
        List list_designatorGen=null;
        RuleReturnScope designatorSubPartGen = null;
        RuleReturnScope designatorGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // delphi.g:3505:1: (designatorSubPartGen+= designatorSubPart (TK_0= '.' designatorGen+= designator )? )
            // delphi.g:3505:4: designatorSubPartGen+= designatorSubPart (TK_0= '.' designatorGen+= designator )?
            {
            pushFollow(FOLLOW_designatorSubPart_in_designator3554);
            designatorSubPartGen=designatorSubPart();

            state._fsp--;
            if (state.failed) return retval;
            if (list_designatorSubPartGen==null) list_designatorSubPartGen=new ArrayList();
            list_designatorSubPartGen.add(designatorSubPartGen);

            // delphi.g:3505:44: (TK_0= '.' designatorGen+= designator )?
            int alt80=2;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==20) ) {
                int LA80_1 = input.LA(2);

                if ( (LA80_1==ID||LA80_1==100) ) {
                    alt80=1;
                }
            }
            switch (alt80) {
                case 1 :
                    // delphi.g:3505:46: TK_0= '.' designatorGen+= designator
                    {
                    TK_0=(Token)match(input,20,FOLLOW_20_in_designator3560); if (state.failed) return retval;
                    pushFollow(FOLLOW_designator_in_designator3565);
                    designatorGen=designator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_designatorGen==null) list_designatorGen=new ArrayList();
                    list_designatorGen.add(designatorGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node designatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		designatorReturnNode.setKind("designator");
              	    // Create a CST Node
              		if(list_designatorSubPartGen != null) {
              	        for(Iterator it = list_designatorSubPartGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.designatorSubPart_return r = (delphiParser.designatorSubPart_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("designatorSubPart");
              	            	designatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		designatorReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_designatorGen != null) {
              	        for(Iterator it = list_designatorGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.designator_return r = (delphiParser.designator_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("designator");
              	            	designatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = designatorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, designator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "designator"

    public static class designatorSubPart_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "designatorSubPart"
    // delphi.g:3540:1: designatorSubPart returns [Node returnNode] : designatorPartGen+= designatorPart (TK_0= '[' exprListGen+= exprList TK_1= ']' | TK_2= '^' )* ;
    public final delphiParser.designatorSubPart_return designatorSubPart() throws RecognitionException {
        delphiParser.designatorSubPart_return retval = new delphiParser.designatorSubPart_return();
        retval.start = input.LT(1);
        int designatorSubPart_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_designatorPartGen=null;
        List list_exprListGen=null;
        RuleReturnScope designatorPartGen = null;
        RuleReturnScope exprListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // delphi.g:3542:2: (designatorPartGen+= designatorPart (TK_0= '[' exprListGen+= exprList TK_1= ']' | TK_2= '^' )* )
            // delphi.g:3542:6: designatorPartGen+= designatorPart (TK_0= '[' exprListGen+= exprList TK_1= ']' | TK_2= '^' )*
            {
            pushFollow(FOLLOW_designatorPart_in_designatorSubPart3592);
            designatorPartGen=designatorPart();

            state._fsp--;
            if (state.failed) return retval;
            if (list_designatorPartGen==null) list_designatorPartGen=new ArrayList();
            list_designatorPartGen.add(designatorPartGen);

            // delphi.g:3542:40: (TK_0= '[' exprListGen+= exprList TK_1= ']' | TK_2= '^' )*
            loop81:
            do {
                int alt81=3;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // delphi.g:3542:43: TK_0= '[' exprListGen+= exprList TK_1= ']'
            	    {
            	    TK_0=(Token)match(input,68,FOLLOW_68_in_designatorSubPart3599); if (state.failed) return retval;
            	    pushFollow(FOLLOW_exprList_in_designatorSubPart3604);
            	    exprListGen=exprList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_exprListGen==null) list_exprListGen=new ArrayList();
            	    list_exprListGen.add(exprListGen);

            	    TK_1=(Token)match(input,69,FOLLOW_69_in_designatorSubPart3609); if (state.failed) return retval;

            	    }
            	    break;
            	case 2 :
            	    // delphi.g:3542:88: TK_2= '^'
            	    {
            	    TK_2=(Token)match(input,74,FOLLOW_74_in_designatorSubPart3616); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node designatorSubPartReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		designatorSubPartReturnNode.setKind("designatorSubPart");
              	    // Create a CST Node
              		if(list_designatorPartGen != null) {
              	        for(Iterator it = list_designatorPartGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.designatorPart_return r = (delphiParser.designatorPart_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("designatorPart");
              	            	designatorSubPartReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal exprListGen aggregation
              		if(list_exprListGen != null) {
              	    for(int pos = 0; pos < list_exprListGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		designatorSubPartReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_exprListGen != null) {		
              	    	delphiParser.exprList_return r = (delphiParser.exprList_return) list_exprListGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("exprList");
              	    		designatorSubPartReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		designatorSubPartReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		designatorSubPartReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = designatorSubPartReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, designatorSubPart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "designatorSubPart"

    public static class designatorPart_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "designatorPart"
    // delphi.g:3592:1: designatorPart returns [Node returnNode] : (IDGen= ID | TK_0= '&' reservedWordGen+= reservedWord | IDGen= ID TK_0= '(' IDGen_1= ID TK_1= '^' TK_2= ')' );
    public final delphiParser.designatorPart_return designatorPart() throws RecognitionException {
        delphiParser.designatorPart_return retval = new delphiParser.designatorPart_return();
        retval.start = input.LT(1);
        int designatorPart_StartIndex = input.index();
        Token IDGen=null;
        Token TK_0=null;
        Token IDGen_1=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_reservedWordGen=null;
        RuleReturnScope reservedWordGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // delphi.g:3594:2: (IDGen= ID | TK_0= '&' reservedWordGen+= reservedWord | IDGen= ID TK_0= '(' IDGen_1= ID TK_1= '^' TK_2= ')' )
            int alt82=3;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==ID) ) {
                int LA82_1 = input.LA(2);

                if ( (LA82_1==17) ) {
                    int LA82_3 = input.LA(3);

                    if ( (LA82_3==ID) ) {
                        int LA82_5 = input.LA(4);

                        if ( (LA82_5==74) ) {
                            int LA82_6 = input.LA(5);

                            if ( (LA82_6==18) ) {
                                int LA82_7 = input.LA(6);

                                if ( (synpred145_delphi()) ) {
                                    alt82=1;
                                }
                                else if ( (true) ) {
                                    alt82=3;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 82, 7, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA82_6==17||LA82_6==20||LA82_6==33||LA82_6==36||LA82_6==68||LA82_6==74||(LA82_6>=78 && LA82_6<=79)||(LA82_6>=83 && LA82_6<=99)) ) {
                                alt82=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 82, 6, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA82_5>=17 && LA82_5<=18)||LA82_5==20||LA82_5==33||(LA82_5>=36 && LA82_5<=37)||LA82_5==68||(LA82_5>=78 && LA82_5<=79)||(LA82_5>=83 && LA82_5<=99)) ) {
                            alt82=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 82, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA82_3==INT||(LA82_3>=QVALUE && LA82_3<=DQVALUE)||LA82_3==17||LA82_3==68||(LA82_3>=78 && LA82_3<=82)||LA82_3==100||LA82_3==163) ) {
                        alt82=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 82, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA82_1==EOF||(LA82_1>=ID && LA82_1<=DQVALUE)||(LA82_1>=18 && LA82_1<=20)||(LA82_1>=23 && LA82_1<=24)||(LA82_1>=26 && LA82_1<=27)||(LA82_1>=29 && LA82_1<=40)||LA82_1==62||(LA82_1>=68 && LA82_1<=69)||LA82_1==71||LA82_1==74||(LA82_1>=76 && LA82_1<=121)||(LA82_1>=123 && LA82_1<=125)||(LA82_1>=148 && LA82_1<=149)||(LA82_1>=155 && LA82_1<=160)||LA82_1==163) ) {
                    alt82=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 82, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA82_0==100) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);

                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    // delphi.g:3594:6: IDGen= ID
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_designatorPart3643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node designatorPartReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		designatorPartReturnNode.setKind("designatorPart");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
                      			designatorPartReturnNode.getChildren().add(IDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = designatorPartReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3607:5: TK_0= '&' reservedWordGen+= reservedWord
                    {
                    TK_0=(Token)match(input,100,FOLLOW_100_in_designatorPart3656); if (state.failed) return retval;
                    pushFollow(FOLLOW_reservedWord_in_designatorPart3661);
                    reservedWordGen=reservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_reservedWordGen==null) list_reservedWordGen=new ArrayList();
                    list_reservedWordGen.add(reservedWordGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node designatorPartReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		designatorPartReturnNode.setKind("designatorPart");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		designatorPartReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_reservedWordGen != null) {
                      	        for(Iterator it = list_reservedWordGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.reservedWord_return r = (delphiParser.reservedWord_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("reservedWord");
                      	            	designatorPartReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = designatorPartReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:3630:5: IDGen= ID TK_0= '(' IDGen_1= ID TK_1= '^' TK_2= ')'
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_designatorPart3673); if (state.failed) return retval;
                    TK_0=(Token)match(input,17,FOLLOW_17_in_designatorPart3678); if (state.failed) return retval;
                    IDGen_1=(Token)match(input,ID,FOLLOW_ID_in_designatorPart3683); if (state.failed) return retval;
                    TK_1=(Token)match(input,74,FOLLOW_74_in_designatorPart3688); if (state.failed) return retval;
                    TK_2=(Token)match(input,18,FOLLOW_18_in_designatorPart3693); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node designatorPartReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		designatorPartReturnNode.setKind("designatorPart");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
                      			designatorPartReturnNode.getChildren().add(IDGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		designatorPartReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IDGen_1 != null) {
                      			Leaf IDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen_1!=null?IDGen_1.getText():null), IDGen_1.getCharPositionInLine(), IDGen_1.getLine());
                      			designatorPartReturnNode.getChildren().add(IDGen_1Leaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		designatorPartReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		designatorPartReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = designatorPartReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, designatorPart_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "designatorPart"

    public static class setConstructor_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "setConstructor"
    // delphi.g:3664:1: setConstructor returns [Node returnNode] : TK_0= '[' (setElementGen+= setElement (TK_1= ',' setElementGen_1+= setElement )* ) TK_2= ']' ;
    public final delphiParser.setConstructor_return setConstructor() throws RecognitionException {
        delphiParser.setConstructor_return retval = new delphiParser.setConstructor_return();
        retval.start = input.LT(1);
        int setConstructor_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_setElementGen=null;
        List list_setElementGen_1=null;
        RuleReturnScope setElementGen = null;
        RuleReturnScope setElementGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // delphi.g:3665:1: (TK_0= '[' (setElementGen+= setElement (TK_1= ',' setElementGen_1+= setElement )* ) TK_2= ']' )
            // delphi.g:3665:5: TK_0= '[' (setElementGen+= setElement (TK_1= ',' setElementGen_1+= setElement )* ) TK_2= ']'
            {
            TK_0=(Token)match(input,68,FOLLOW_68_in_setConstructor3716); if (state.failed) return retval;
            // delphi.g:3665:14: (setElementGen+= setElement (TK_1= ',' setElementGen_1+= setElement )* )
            // delphi.g:3665:16: setElementGen+= setElement (TK_1= ',' setElementGen_1+= setElement )*
            {
            pushFollow(FOLLOW_setElement_in_setConstructor3722);
            setElementGen=setElement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_setElementGen==null) list_setElementGen=new ArrayList();
            list_setElementGen.add(setElementGen);

            // delphi.g:3665:42: (TK_1= ',' setElementGen_1+= setElement )*
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);

                if ( (LA83_0==33) ) {
                    alt83=1;
                }


                switch (alt83) {
            	case 1 :
            	    // delphi.g:3665:44: TK_1= ',' setElementGen_1+= setElement
            	    {
            	    TK_1=(Token)match(input,33,FOLLOW_33_in_setConstructor3728); if (state.failed) return retval;
            	    pushFollow(FOLLOW_setElement_in_setConstructor3733);
            	    setElementGen_1=setElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_setElementGen_1==null) list_setElementGen_1=new ArrayList();
            	    list_setElementGen_1.add(setElementGen_1);


            	    }
            	    break;

            	default :
            	    break loop83;
                }
            } while (true);


            }

            TK_2=(Token)match(input,69,FOLLOW_69_in_setConstructor3741); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node setConstructorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		setConstructorReturnNode.setKind("setConstructor");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		setConstructorReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_setElementGen != null) {
              	        for(Iterator it = list_setElementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.setElement_return r = (delphiParser.setElement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("setElement");
              	            	setConstructorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal setElementGen_1 aggregation
              		if(list_setElementGen_1 != null) {
              	    for(int pos = 0; pos < list_setElementGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		setConstructorReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_setElementGen_1 != null) {		
              	    	delphiParser.setElement_return r = (delphiParser.setElement_return) list_setElementGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("setElement");
              	    		setConstructorReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		setConstructorReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = setConstructorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, setConstructor_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "setConstructor"

    public static class setElement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "setElement"
    // delphi.g:3715:1: setElement returns [Node returnNode] : expressionGen+= expression (TK_0= '..' expressionGen_1+= expression )? ;
    public final delphiParser.setElement_return setElement() throws RecognitionException {
        delphiParser.setElement_return retval = new delphiParser.setElement_return();
        retval.start = input.LT(1);
        int setElement_StartIndex = input.index();
        Token TK_0=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // delphi.g:3716:1: (expressionGen+= expression (TK_0= '..' expressionGen_1+= expression )? )
            // delphi.g:3716:5: expressionGen+= expression (TK_0= '..' expressionGen_1+= expression )?
            {
            pushFollow(FOLLOW_expression_in_setElement3764);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            // delphi.g:3716:31: (TK_0= '..' expressionGen_1+= expression )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==62) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // delphi.g:3716:33: TK_0= '..' expressionGen_1+= expression
                    {
                    TK_0=(Token)match(input,62,FOLLOW_62_in_setElement3770); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_setElement3775);
                    expressionGen_1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                    list_expressionGen_1.add(expressionGen_1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node setElementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		setElementReturnNode.setKind("setElement");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	setElementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		setElementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen_1 != null) {
              	        for(Iterator it = list_expressionGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	setElementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = setElementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, setElement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "setElement"

    public static class exprList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exprList"
    // delphi.g:3751:1: exprList returns [Node returnNode] : expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )* ;
    public final delphiParser.exprList_return exprList() throws RecognitionException {
        delphiParser.exprList_return retval = new delphiParser.exprList_return();
        retval.start = input.LT(1);
        int exprList_StartIndex = input.index();
        Token TK_0=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // delphi.g:3752:1: (expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )* )
            // delphi.g:3752:5: expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )*
            {
            pushFollow(FOLLOW_expression_in_exprList3800);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            // delphi.g:3752:31: (TK_0= ',' expressionGen_1+= expression )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==33) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // delphi.g:3752:33: TK_0= ',' expressionGen_1+= expression
            	    {
            	    TK_0=(Token)match(input,33,FOLLOW_33_in_exprList3806); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_exprList3811);
            	    expressionGen_1=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
            	    list_expressionGen_1.add(expressionGen_1);


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node exprListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exprListReturnNode.setKind("exprList");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	exprListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal expressionGen_1 aggregation
              		if(list_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		exprListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expressionGen_1 != null) {		
              	    	delphiParser.expression_return r = (delphiParser.expression_return) list_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expression");
              	    		exprListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exprListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, exprList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exprList"

    public static class statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statement"
    // delphi.g:3792:1: statement returns [Node returnNode] : (labelIdGen+= labelId TK_0= ':' )? (simpleStatementGen+= simpleStatement | structStmtGen+= structStmt ) ;
    public final delphiParser.statement_return statement() throws RecognitionException {
        delphiParser.statement_return retval = new delphiParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Token TK_0=null;
        List list_labelIdGen=null;
        List list_simpleStatementGen=null;
        List list_structStmtGen=null;
        RuleReturnScope labelIdGen = null;
        RuleReturnScope simpleStatementGen = null;
        RuleReturnScope structStmtGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // delphi.g:3793:1: ( (labelIdGen+= labelId TK_0= ':' )? (simpleStatementGen+= simpleStatement | structStmtGen+= structStmt ) )
            // delphi.g:3793:4: (labelIdGen+= labelId TK_0= ':' )? (simpleStatementGen+= simpleStatement | structStmtGen+= structStmt )
            {
            // delphi.g:3793:4: (labelIdGen+= labelId TK_0= ':' )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==ID) ) {
                int LA86_1 = input.LA(2);

                if ( (LA86_1==37) ) {
                    alt86=1;
                }
            }
            else if ( ((LA86_0>=INT && LA86_0<=HEX)) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // delphi.g:3793:6: labelIdGen+= labelId TK_0= ':'
                    {
                    pushFollow(FOLLOW_labelId_in_statement3837);
                    labelIdGen=labelId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_labelIdGen==null) list_labelIdGen=new ArrayList();
                    list_labelIdGen.add(labelIdGen);

                    TK_0=(Token)match(input,37,FOLLOW_37_in_statement3842); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:3793:38: (simpleStatementGen+= simpleStatement | structStmtGen+= structStmt )
            int alt87=2;
            int LA87_0 = input.LA(1);

            if ( (LA87_0==ID||LA87_0==100||(LA87_0>=102 && LA87_0<=103)) ) {
                alt87=1;
            }
            else if ( (LA87_0==71||(LA87_0>=104 && LA87_0<=105)||LA87_0==108||LA87_0==110||LA87_0==112||(LA87_0>=115 && LA87_0<=116)||LA87_0==121||LA87_0==123) ) {
                alt87=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }
            switch (alt87) {
                case 1 :
                    // delphi.g:3793:40: simpleStatementGen+= simpleStatement
                    {
                    pushFollow(FOLLOW_simpleStatement_in_statement3850);
                    simpleStatementGen=simpleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_simpleStatementGen==null) list_simpleStatementGen=new ArrayList();
                    list_simpleStatementGen.add(simpleStatementGen);


                    }
                    break;
                case 2 :
                    // delphi.g:3793:79: structStmtGen+= structStmt
                    {
                    pushFollow(FOLLOW_structStmt_in_statement3857);
                    structStmtGen=structStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_structStmtGen==null) list_structStmtGen=new ArrayList();
                    list_structStmtGen.add(structStmtGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		statementReturnNode.setKind("statement");
              	    // Create a CST Node
              		if(list_labelIdGen != null) {
              	        for(Iterator it = list_labelIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.labelId_return r = (delphiParser.labelId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("labelId");
              	            	statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		statementReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_simpleStatementGen != null) {
              	        for(Iterator it = list_simpleStatementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.simpleStatement_return r = (delphiParser.simpleStatement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("simpleStatement");
              	            	statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_structStmtGen != null) {
              	        for(Iterator it = list_structStmtGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.structStmt_return r = (delphiParser.structStmt_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("structStmt");
              	            	statementReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = statementReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class stmtList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "stmtList"
    // delphi.g:3838:1: stmtList returns [Node returnNode] : (statementGen+= statement (TK_0= ';' )? )* ;
    public final delphiParser.stmtList_return stmtList() throws RecognitionException {
        delphiParser.stmtList_return retval = new delphiParser.stmtList_return();
        retval.start = input.LT(1);
        int stmtList_StartIndex = input.index();
        Token TK_0=null;
        List list_statementGen=null;
        RuleReturnScope statementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // delphi.g:3839:1: ( (statementGen+= statement (TK_0= ';' )? )* )
            // delphi.g:3839:4: (statementGen+= statement (TK_0= ';' )? )*
            {
            // delphi.g:3839:4: (statementGen+= statement (TK_0= ';' )? )*
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);

                if ( ((LA89_0>=ID && LA89_0<=HEX)||LA89_0==71||LA89_0==100||(LA89_0>=102 && LA89_0<=105)||LA89_0==108||LA89_0==110||LA89_0==112||(LA89_0>=115 && LA89_0<=116)||LA89_0==121||LA89_0==123) ) {
                    alt89=1;
                }


                switch (alt89) {
            	case 1 :
            	    // delphi.g:3839:6: statementGen+= statement (TK_0= ';' )?
            	    {
            	    pushFollow(FOLLOW_statement_in_stmtList3883);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);

            	    // delphi.g:3839:30: (TK_0= ';' )?
            	    int alt88=2;
            	    int LA88_0 = input.LA(1);

            	    if ( (LA88_0==19) ) {
            	        int LA88_1 = input.LA(2);

            	        if ( (synpred152_delphi()) ) {
            	            alt88=1;
            	        }
            	    }
            	    switch (alt88) {
            	        case 1 :
            	            // delphi.g:3839:32: TK_0= ';'
            	            {
            	            TK_0=(Token)match(input,19,FOLLOW_19_in_stmtList3889); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop89;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node stmtListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		stmtListReturnNode.setKind("stmtList");

              		// Create a special CST Node for terminal statementGen aggregation
              		if(list_statementGen != null) {
              	    for(int pos = 0; pos < list_statementGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_statementGen != null) {		
              	    	delphiParser.statement_return r = (delphiParser.statement_return) list_statementGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("statement");
              	    		stmtListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		stmtListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = stmtListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, stmtList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "stmtList"

    public static class simpleStatement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "simpleStatement"
    // delphi.g:3869:1: simpleStatement returns [Node returnNode] : (designatorGen+= designator TK_0= ':=' expressionGen+= expression | designatorGen+= designator (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )? | TK_0= 'inherited' | TK_0= 'goto' labelIdGen+= labelId );
    public final delphiParser.simpleStatement_return simpleStatement() throws RecognitionException {
        delphiParser.simpleStatement_return retval = new delphiParser.simpleStatement_return();
        retval.start = input.LT(1);
        int simpleStatement_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_designatorGen=null;
        List list_expressionGen=null;
        List list_exprListGen=null;
        List list_labelIdGen=null;
        RuleReturnScope designatorGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope exprListGen = null;
        RuleReturnScope labelIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // delphi.g:3870:1: (designatorGen+= designator TK_0= ':=' expressionGen+= expression | designatorGen+= designator (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )? | TK_0= 'inherited' | TK_0= 'goto' labelIdGen+= labelId )
            int alt91=4;
            switch ( input.LA(1) ) {
            case ID:
                {
                int LA91_1 = input.LA(2);

                if ( (synpred154_delphi()) ) {
                    alt91=1;
                }
                else if ( (synpred156_delphi()) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 1, input);

                    throw nvae;
                }
                }
                break;
            case 100:
                {
                int LA91_2 = input.LA(2);

                if ( (synpred154_delphi()) ) {
                    alt91=1;
                }
                else if ( (synpred156_delphi()) ) {
                    alt91=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 91, 2, input);

                    throw nvae;
                }
                }
                break;
            case 102:
                {
                alt91=3;
                }
                break;
            case 103:
                {
                alt91=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }

            switch (alt91) {
                case 1 :
                    // delphi.g:3870:4: designatorGen+= designator TK_0= ':=' expressionGen+= expression
                    {
                    pushFollow(FOLLOW_designator_in_simpleStatement3916);
                    designatorGen=designator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_designatorGen==null) list_designatorGen=new ArrayList();
                    list_designatorGen.add(designatorGen);

                    TK_0=(Token)match(input,101,FOLLOW_101_in_simpleStatement3921); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_simpleStatement3926);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simpleStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simpleStatementReturnNode.setKind("simpleStatement");
                      	    // Create a CST Node
                      		if(list_designatorGen != null) {
                      	        for(Iterator it = list_designatorGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.designator_return r = (delphiParser.designator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("designator");
                      	            	simpleStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		simpleStatementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	simpleStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simpleStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3903:5: designatorGen+= designator (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )?
                    {
                    pushFollow(FOLLOW_designator_in_simpleStatement3940);
                    designatorGen=designator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_designatorGen==null) list_designatorGen=new ArrayList();
                    list_designatorGen.add(designatorGen);

                    // delphi.g:3903:31: (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )?
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==17) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            // delphi.g:3903:33: TK_0= '(' (exprListGen+= exprList ) TK_1= ')'
                            {
                            TK_0=(Token)match(input,17,FOLLOW_17_in_simpleStatement3946); if (state.failed) return retval;
                            // delphi.g:3903:42: (exprListGen+= exprList )
                            // delphi.g:3903:44: exprListGen+= exprList
                            {
                            pushFollow(FOLLOW_exprList_in_simpleStatement3952);
                            exprListGen=exprList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_exprListGen==null) list_exprListGen=new ArrayList();
                            list_exprListGen.add(exprListGen);


                            }

                            TK_1=(Token)match(input,18,FOLLOW_18_in_simpleStatement3958); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simpleStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simpleStatementReturnNode.setKind("simpleStatement");
                      	    // Create a CST Node
                      		if(list_designatorGen != null) {
                      	        for(Iterator it = list_designatorGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.designator_return r = (delphiParser.designator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("designator");
                      	            	simpleStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		simpleStatementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_exprListGen != null) {
                      	        for(Iterator it = list_exprListGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.exprList_return r = (delphiParser.exprList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("exprList");
                      	            	simpleStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		simpleStatementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simpleStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:3941:6: TK_0= 'inherited'
                    {
                    TK_0=(Token)match(input,102,FOLLOW_102_in_simpleStatement3973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simpleStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simpleStatementReturnNode.setKind("simpleStatement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		simpleStatementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simpleStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:3954:9: TK_0= 'goto' labelIdGen+= labelId
                    {
                    TK_0=(Token)match(input,103,FOLLOW_103_in_simpleStatement3989); if (state.failed) return retval;
                    pushFollow(FOLLOW_labelId_in_simpleStatement3994);
                    labelIdGen=labelId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_labelIdGen==null) list_labelIdGen=new ArrayList();
                    list_labelIdGen.add(labelIdGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node simpleStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		simpleStatementReturnNode.setKind("simpleStatement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		simpleStatementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_labelIdGen != null) {
                      	        for(Iterator it = list_labelIdGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.labelId_return r = (delphiParser.labelId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("labelId");
                      	            	simpleStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = simpleStatementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, simpleStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "simpleStatement"

    public static class structStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "structStmt"
    // delphi.g:3979:1: structStmt returns [Node returnNode] : (compoundStmtGen+= compoundStmt | conditionalStmtGen+= conditionalStmt | loopStmtGen+= loopStmt | withStmtGen+= withStmt | tryStmtGen+= tryStmt | raiseStmtGen+= raiseStmt | assemblerStmtGen+= assemblerStmt );
    public final delphiParser.structStmt_return structStmt() throws RecognitionException {
        delphiParser.structStmt_return retval = new delphiParser.structStmt_return();
        retval.start = input.LT(1);
        int structStmt_StartIndex = input.index();
        List list_compoundStmtGen=null;
        List list_conditionalStmtGen=null;
        List list_loopStmtGen=null;
        List list_withStmtGen=null;
        List list_tryStmtGen=null;
        List list_raiseStmtGen=null;
        List list_assemblerStmtGen=null;
        RuleReturnScope compoundStmtGen = null;
        RuleReturnScope conditionalStmtGen = null;
        RuleReturnScope loopStmtGen = null;
        RuleReturnScope withStmtGen = null;
        RuleReturnScope tryStmtGen = null;
        RuleReturnScope raiseStmtGen = null;
        RuleReturnScope assemblerStmtGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // delphi.g:3980:1: (compoundStmtGen+= compoundStmt | conditionalStmtGen+= conditionalStmt | loopStmtGen+= loopStmt | withStmtGen+= withStmt | tryStmtGen+= tryStmt | raiseStmtGen+= raiseStmt | assemblerStmtGen+= assemblerStmt )
            int alt92=7;
            switch ( input.LA(1) ) {
            case 104:
                {
                alt92=1;
                }
                break;
            case 71:
            case 105:
                {
                alt92=2;
                }
                break;
            case 108:
            case 110:
            case 112:
                {
                alt92=3;
                }
                break;
            case 115:
                {
                alt92=4;
                }
                break;
            case 116:
                {
                alt92=5;
                }
                break;
            case 121:
                {
                alt92=6;
                }
                break;
            case 123:
                {
                alt92=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 92, 0, input);

                throw nvae;
            }

            switch (alt92) {
                case 1 :
                    // delphi.g:3980:5: compoundStmtGen+= compoundStmt
                    {
                    pushFollow(FOLLOW_compoundStmt_in_structStmt4017);
                    compoundStmtGen=compoundStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_compoundStmtGen==null) list_compoundStmtGen=new ArrayList();
                    list_compoundStmtGen.add(compoundStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_compoundStmtGen != null) {
                      	        for(Iterator it = list_compoundStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.compoundStmt_return r = (delphiParser.compoundStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("compoundStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:3998:9: conditionalStmtGen+= conditionalStmt
                    {
                    pushFollow(FOLLOW_conditionalStmt_in_structStmt4033);
                    conditionalStmtGen=conditionalStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_conditionalStmtGen==null) list_conditionalStmtGen=new ArrayList();
                    list_conditionalStmtGen.add(conditionalStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_conditionalStmtGen != null) {
                      	        for(Iterator it = list_conditionalStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.conditionalStmt_return r = (delphiParser.conditionalStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("conditionalStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:4016:9: loopStmtGen+= loopStmt
                    {
                    pushFollow(FOLLOW_loopStmt_in_structStmt4049);
                    loopStmtGen=loopStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_loopStmtGen==null) list_loopStmtGen=new ArrayList();
                    list_loopStmtGen.add(loopStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_loopStmtGen != null) {
                      	        for(Iterator it = list_loopStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.loopStmt_return r = (delphiParser.loopStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("loopStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:4034:9: withStmtGen+= withStmt
                    {
                    pushFollow(FOLLOW_withStmt_in_structStmt4065);
                    withStmtGen=withStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_withStmtGen==null) list_withStmtGen=new ArrayList();
                    list_withStmtGen.add(withStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_withStmtGen != null) {
                      	        for(Iterator it = list_withStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.withStmt_return r = (delphiParser.withStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("withStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:4052:9: tryStmtGen+= tryStmt
                    {
                    pushFollow(FOLLOW_tryStmt_in_structStmt4081);
                    tryStmtGen=tryStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_tryStmtGen==null) list_tryStmtGen=new ArrayList();
                    list_tryStmtGen.add(tryStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_tryStmtGen != null) {
                      	        for(Iterator it = list_tryStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.tryStmt_return r = (delphiParser.tryStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("tryStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:4070:9: raiseStmtGen+= raiseStmt
                    {
                    pushFollow(FOLLOW_raiseStmt_in_structStmt4097);
                    raiseStmtGen=raiseStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_raiseStmtGen==null) list_raiseStmtGen=new ArrayList();
                    list_raiseStmtGen.add(raiseStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_raiseStmtGen != null) {
                      	        for(Iterator it = list_raiseStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.raiseStmt_return r = (delphiParser.raiseStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("raiseStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:4088:9: assemblerStmtGen+= assemblerStmt
                    {
                    pushFollow(FOLLOW_assemblerStmt_in_structStmt4113);
                    assemblerStmtGen=assemblerStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_assemblerStmtGen==null) list_assemblerStmtGen=new ArrayList();
                    list_assemblerStmtGen.add(assemblerStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node structStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		structStmtReturnNode.setKind("structStmt");
                      	    // Create a CST Node
                      		if(list_assemblerStmtGen != null) {
                      	        for(Iterator it = list_assemblerStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.assemblerStmt_return r = (delphiParser.assemblerStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("assemblerStmt");
                      	            	structStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = structStmtReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, structStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "structStmt"

    public static class compoundStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "compoundStmt"
    // delphi.g:4108:1: compoundStmt returns [Node returnNode] : TK_0= 'begin' stmtListGen+= stmtList TK_1= 'end' ;
    public final delphiParser.compoundStmt_return compoundStmt() throws RecognitionException {
        delphiParser.compoundStmt_return retval = new delphiParser.compoundStmt_return();
        retval.start = input.LT(1);
        int compoundStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_stmtListGen=null;
        RuleReturnScope stmtListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // delphi.g:4109:1: (TK_0= 'begin' stmtListGen+= stmtList TK_1= 'end' )
            // delphi.g:4109:5: TK_0= 'begin' stmtListGen+= stmtList TK_1= 'end'
            {
            TK_0=(Token)match(input,104,FOLLOW_104_in_compoundStmt4136); if (state.failed) return retval;
            pushFollow(FOLLOW_stmtList_in_compoundStmt4141);
            stmtListGen=stmtList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
            list_stmtListGen.add(stmtListGen);

            TK_1=(Token)match(input,23,FOLLOW_23_in_compoundStmt4146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node compoundStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		compoundStmtReturnNode.setKind("compoundStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		compoundStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_stmtListGen != null) {
              	        for(Iterator it = list_stmtListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("stmtList");
              	            	compoundStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		compoundStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = compoundStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, compoundStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compoundStmt"

    public static class conditionalStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conditionalStmt"
    // delphi.g:4139:1: conditionalStmt returns [Node returnNode] : (ifStmtGen+= ifStmt | caseStmtGen+= caseStmt );
    public final delphiParser.conditionalStmt_return conditionalStmt() throws RecognitionException {
        delphiParser.conditionalStmt_return retval = new delphiParser.conditionalStmt_return();
        retval.start = input.LT(1);
        int conditionalStmt_StartIndex = input.index();
        List list_ifStmtGen=null;
        List list_caseStmtGen=null;
        RuleReturnScope ifStmtGen = null;
        RuleReturnScope caseStmtGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // delphi.g:4140:1: (ifStmtGen+= ifStmt | caseStmtGen+= caseStmt )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==105) ) {
                alt93=1;
            }
            else if ( (LA93_0==71) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // delphi.g:4140:5: ifStmtGen+= ifStmt
                    {
                    pushFollow(FOLLOW_ifStmt_in_conditionalStmt4169);
                    ifStmtGen=ifStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_ifStmtGen==null) list_ifStmtGen=new ArrayList();
                    list_ifStmtGen.add(ifStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node conditionalStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		conditionalStmtReturnNode.setKind("conditionalStmt");
                      	    // Create a CST Node
                      		if(list_ifStmtGen != null) {
                      	        for(Iterator it = list_ifStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ifStmt_return r = (delphiParser.ifStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ifStmt");
                      	            	conditionalStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = conditionalStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:4158:5: caseStmtGen+= caseStmt
                    {
                    pushFollow(FOLLOW_caseStmt_in_conditionalStmt4181);
                    caseStmtGen=caseStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_caseStmtGen==null) list_caseStmtGen=new ArrayList();
                    list_caseStmtGen.add(caseStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node conditionalStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		conditionalStmtReturnNode.setKind("conditionalStmt");
                      	    // Create a CST Node
                      		if(list_caseStmtGen != null) {
                      	        for(Iterator it = list_caseStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.caseStmt_return r = (delphiParser.caseStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("caseStmt");
                      	            	conditionalStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = conditionalStmtReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, conditionalStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalStmt"

    public static class ifStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ifStmt"
    // delphi.g:4178:1: ifStmt returns [Node returnNode] : TK_0= 'if' expressionGen+= expression TK_1= 'then' statementGen+= statement (TK_2= ';' )? (TK_3= 'else' statementGen_1+= statement (TK_4= ';' )? )? ;
    public final delphiParser.ifStmt_return ifStmt() throws RecognitionException {
        delphiParser.ifStmt_return retval = new delphiParser.ifStmt_return();
        retval.start = input.LT(1);
        int ifStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        List list_expressionGen=null;
        List list_statementGen=null;
        List list_statementGen_1=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope statementGen = null;
        RuleReturnScope statementGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // delphi.g:4179:1: (TK_0= 'if' expressionGen+= expression TK_1= 'then' statementGen+= statement (TK_2= ';' )? (TK_3= 'else' statementGen_1+= statement (TK_4= ';' )? )? )
            // delphi.g:4179:5: TK_0= 'if' expressionGen+= expression TK_1= 'then' statementGen+= statement (TK_2= ';' )? (TK_3= 'else' statementGen_1+= statement (TK_4= ';' )? )?
            {
            TK_0=(Token)match(input,105,FOLLOW_105_in_ifStmt4204); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_ifStmt4209);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            TK_1=(Token)match(input,106,FOLLOW_106_in_ifStmt4214); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_in_ifStmt4219);
            statementGen=statement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            // delphi.g:4179:81: (TK_2= ';' )?
            int alt94=2;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==19) ) {
                int LA94_1 = input.LA(2);

                if ( (synpred165_delphi()) ) {
                    alt94=1;
                }
            }
            switch (alt94) {
                case 1 :
                    // delphi.g:4179:83: TK_2= ';'
                    {
                    TK_2=(Token)match(input,19,FOLLOW_19_in_ifStmt4226); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:4179:94: (TK_3= 'else' statementGen_1+= statement (TK_4= ';' )? )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==107) ) {
                int LA96_1 = input.LA(2);

                if ( (synpred167_delphi()) ) {
                    alt96=1;
                }
            }
            switch (alt96) {
                case 1 :
                    // delphi.g:4179:96: TK_3= 'else' statementGen_1+= statement (TK_4= ';' )?
                    {
                    TK_3=(Token)match(input,107,FOLLOW_107_in_ifStmt4234); if (state.failed) return retval;
                    pushFollow(FOLLOW_statement_in_ifStmt4239);
                    statementGen_1=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen_1==null) list_statementGen_1=new ArrayList();
                    list_statementGen_1.add(statementGen_1);

                    // delphi.g:4179:136: (TK_4= ';' )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==19) ) {
                        int LA95_1 = input.LA(2);

                        if ( (synpred166_delphi()) ) {
                            alt95=1;
                        }
                    }
                    switch (alt95) {
                        case 1 :
                            // delphi.g:4179:138: TK_4= ';'
                            {
                            TK_4=(Token)match(input,19,FOLLOW_19_in_ifStmt4246); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node ifStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		ifStmtReturnNode.setKind("ifStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		ifStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	ifStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		ifStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	ifStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		ifStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		ifStmtReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen_1 != null) {
              	        for(Iterator it = list_statementGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	ifStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		ifStmtReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = ifStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, ifStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ifStmt"

    public static class caseStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "caseStmt"
    // delphi.g:4244:1: caseStmt returns [Node returnNode] : TK_0= 'case' expressionGen+= expression TK_1= 'of' caseSelectorGen+= caseSelector TK_2= ';' (caseSelectorGen_1+= caseSelector TK_3= ';' )* (TK_4= 'else' stmtListGen+= stmtList ) (TK_5= ';' ) TK_6= 'end' ;
    public final delphiParser.caseStmt_return caseStmt() throws RecognitionException {
        delphiParser.caseStmt_return retval = new delphiParser.caseStmt_return();
        retval.start = input.LT(1);
        int caseStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        List list_expressionGen=null;
        List list_caseSelectorGen=null;
        List list_caseSelectorGen_1=null;
        List list_stmtListGen=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope caseSelectorGen = null;
        RuleReturnScope caseSelectorGen_1 = null;
        RuleReturnScope stmtListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // delphi.g:4245:1: (TK_0= 'case' expressionGen+= expression TK_1= 'of' caseSelectorGen+= caseSelector TK_2= ';' (caseSelectorGen_1+= caseSelector TK_3= ';' )* (TK_4= 'else' stmtListGen+= stmtList ) (TK_5= ';' ) TK_6= 'end' )
            // delphi.g:4245:5: TK_0= 'case' expressionGen+= expression TK_1= 'of' caseSelectorGen+= caseSelector TK_2= ';' (caseSelectorGen_1+= caseSelector TK_3= ';' )* (TK_4= 'else' stmtListGen+= stmtList ) (TK_5= ';' ) TK_6= 'end'
            {
            TK_0=(Token)match(input,71,FOLLOW_71_in_caseStmt4273); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_caseStmt4278);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            TK_1=(Token)match(input,40,FOLLOW_40_in_caseStmt4283); if (state.failed) return retval;
            pushFollow(FOLLOW_caseSelector_in_caseStmt4288);
            caseSelectorGen=caseSelector();

            state._fsp--;
            if (state.failed) return retval;
            if (list_caseSelectorGen==null) list_caseSelectorGen=new ArrayList();
            list_caseSelectorGen.add(caseSelectorGen);

            TK_2=(Token)match(input,19,FOLLOW_19_in_caseStmt4293); if (state.failed) return retval;
            // delphi.g:4245:96: (caseSelectorGen_1+= caseSelector TK_3= ';' )*
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);

                if ( ((LA97_0>=ID && LA97_0<=INT)||(LA97_0>=QVALUE && LA97_0<=DQVALUE)||LA97_0==17||LA97_0==68||(LA97_0>=78 && LA97_0<=82)||LA97_0==100||LA97_0==163) ) {
                    alt97=1;
                }


                switch (alt97) {
            	case 1 :
            	    // delphi.g:4245:98: caseSelectorGen_1+= caseSelector TK_3= ';'
            	    {
            	    pushFollow(FOLLOW_caseSelector_in_caseStmt4299);
            	    caseSelectorGen_1=caseSelector();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_caseSelectorGen_1==null) list_caseSelectorGen_1=new ArrayList();
            	    list_caseSelectorGen_1.add(caseSelectorGen_1);

            	    TK_3=(Token)match(input,19,FOLLOW_19_in_caseStmt4304); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop97;
                }
            } while (true);

            // delphi.g:4245:142: (TK_4= 'else' stmtListGen+= stmtList )
            // delphi.g:4245:144: TK_4= 'else' stmtListGen+= stmtList
            {
            TK_4=(Token)match(input,107,FOLLOW_107_in_caseStmt4312); if (state.failed) return retval;
            pushFollow(FOLLOW_stmtList_in_caseStmt4317);
            stmtListGen=stmtList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
            list_stmtListGen.add(stmtListGen);


            }

            // delphi.g:4245:180: (TK_5= ';' )
            // delphi.g:4245:182: TK_5= ';'
            {
            TK_5=(Token)match(input,19,FOLLOW_19_in_caseStmt4324); if (state.failed) return retval;

            }

            TK_6=(Token)match(input,23,FOLLOW_23_in_caseStmt4330); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node caseStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		caseStmtReturnNode.setKind("caseStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	caseStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_caseSelectorGen != null) {
              	        for(Iterator it = list_caseSelectorGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.caseSelector_return r = (delphiParser.caseSelector_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("caseSelector");
              	            	caseStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}

              		// Create a special CST Node for terminal caseSelectorGen_1 aggregation
              		if(list_caseSelectorGen_1 != null) {
              	    for(int pos = 0; pos < list_caseSelectorGen_1.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_caseSelectorGen_1 != null) {		
              	    	delphiParser.caseSelector_return r = (delphiParser.caseSelector_return) list_caseSelectorGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("caseSelector");
              	    		caseStmtReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_stmtListGen != null) {
              	        for(Iterator it = list_stmtListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("stmtList");
              	            	caseStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		caseStmtReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = caseStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, caseStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "caseStmt"

    public static class caseSelector_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "caseSelector"
    // delphi.g:4335:1: caseSelector returns [Node returnNode] : caseLabelGen+= caseLabel (TK_0= ',' caseLabelGen_1+= caseLabel )* TK_1= ':' statementGen+= statement (TK_2= ';' )? ;
    public final delphiParser.caseSelector_return caseSelector() throws RecognitionException {
        delphiParser.caseSelector_return retval = new delphiParser.caseSelector_return();
        retval.start = input.LT(1);
        int caseSelector_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_caseLabelGen=null;
        List list_caseLabelGen_1=null;
        List list_statementGen=null;
        RuleReturnScope caseLabelGen = null;
        RuleReturnScope caseLabelGen_1 = null;
        RuleReturnScope statementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // delphi.g:4336:1: (caseLabelGen+= caseLabel (TK_0= ',' caseLabelGen_1+= caseLabel )* TK_1= ':' statementGen+= statement (TK_2= ';' )? )
            // delphi.g:4336:5: caseLabelGen+= caseLabel (TK_0= ',' caseLabelGen_1+= caseLabel )* TK_1= ':' statementGen+= statement (TK_2= ';' )?
            {
            pushFollow(FOLLOW_caseLabel_in_caseSelector4353);
            caseLabelGen=caseLabel();

            state._fsp--;
            if (state.failed) return retval;
            if (list_caseLabelGen==null) list_caseLabelGen=new ArrayList();
            list_caseLabelGen.add(caseLabelGen);

            // delphi.g:4336:29: (TK_0= ',' caseLabelGen_1+= caseLabel )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==33) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // delphi.g:4336:31: TK_0= ',' caseLabelGen_1+= caseLabel
            	    {
            	    TK_0=(Token)match(input,33,FOLLOW_33_in_caseSelector4359); if (state.failed) return retval;
            	    pushFollow(FOLLOW_caseLabel_in_caseSelector4364);
            	    caseLabelGen_1=caseLabel();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_caseLabelGen_1==null) list_caseLabelGen_1=new ArrayList();
            	    list_caseLabelGen_1.add(caseLabelGen_1);


            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);

            TK_1=(Token)match(input,37,FOLLOW_37_in_caseSelector4371); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_in_caseSelector4376);
            statementGen=statement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            // delphi.g:4336:105: (TK_2= ';' )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==19) ) {
                int LA99_1 = input.LA(2);

                if ( (LA99_1==19) ) {
                    alt99=1;
                }
            }
            switch (alt99) {
                case 1 :
                    // delphi.g:4336:107: TK_2= ';'
                    {
                    TK_2=(Token)match(input,19,FOLLOW_19_in_caseSelector4383); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node caseSelectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		caseSelectorReturnNode.setKind("caseSelector");
              	    // Create a CST Node
              		if(list_caseLabelGen != null) {
              	        for(Iterator it = list_caseLabelGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.caseLabel_return r = (delphiParser.caseLabel_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("caseLabel");
              	            	caseSelectorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal caseLabelGen_1 aggregation
              		if(list_caseLabelGen_1 != null) {
              	    for(int pos = 0; pos < list_caseLabelGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		caseSelectorReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_caseLabelGen_1 != null) {		
              	    	delphiParser.caseLabel_return r = (delphiParser.caseLabel_return) list_caseLabelGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("caseLabel");
              	    		caseSelectorReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		caseSelectorReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	caseSelectorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		caseSelectorReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = caseSelectorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, caseSelector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "caseSelector"

    public static class caseLabel_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "caseLabel"
    // delphi.g:4396:1: caseLabel returns [Node returnNode] : constExprGen+= constExpr (TK_0= '..' constExprGen_1+= constExpr )? ;
    public final delphiParser.caseLabel_return caseLabel() throws RecognitionException {
        delphiParser.caseLabel_return retval = new delphiParser.caseLabel_return();
        retval.start = input.LT(1);
        int caseLabel_StartIndex = input.index();
        Token TK_0=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // delphi.g:4397:1: (constExprGen+= constExpr (TK_0= '..' constExprGen_1+= constExpr )? )
            // delphi.g:4397:5: constExprGen+= constExpr (TK_0= '..' constExprGen_1+= constExpr )?
            {
            pushFollow(FOLLOW_constExpr_in_caseLabel4408);
            constExprGen=constExpr();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constExprGen==null) list_constExprGen=new ArrayList();
            list_constExprGen.add(constExprGen);

            // delphi.g:4397:29: (TK_0= '..' constExprGen_1+= constExpr )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==62) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // delphi.g:4397:31: TK_0= '..' constExprGen_1+= constExpr
                    {
                    TK_0=(Token)match(input,62,FOLLOW_62_in_caseLabel4414); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_caseLabel4419);
                    constExprGen_1=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
                    list_constExprGen_1.add(constExprGen_1);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node caseLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		caseLabelReturnNode.setKind("caseLabel");
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	caseLabelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		caseLabelReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen_1 != null) {
              	        for(Iterator it = list_constExprGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	caseLabelReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = caseLabelReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, caseLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "caseLabel"

    public static class loopStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "loopStmt"
    // delphi.g:4432:1: loopStmt returns [Node returnNode] : (repeatStmtGen+= repeatStmt | whileStmtGen+= whileStmt | forStmtGen+= forStmt );
    public final delphiParser.loopStmt_return loopStmt() throws RecognitionException {
        delphiParser.loopStmt_return retval = new delphiParser.loopStmt_return();
        retval.start = input.LT(1);
        int loopStmt_StartIndex = input.index();
        List list_repeatStmtGen=null;
        List list_whileStmtGen=null;
        List list_forStmtGen=null;
        RuleReturnScope repeatStmtGen = null;
        RuleReturnScope whileStmtGen = null;
        RuleReturnScope forStmtGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // delphi.g:4433:1: (repeatStmtGen+= repeatStmt | whileStmtGen+= whileStmt | forStmtGen+= forStmt )
            int alt101=3;
            switch ( input.LA(1) ) {
            case 108:
                {
                alt101=1;
                }
                break;
            case 110:
                {
                alt101=2;
                }
                break;
            case 112:
                {
                alt101=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }

            switch (alt101) {
                case 1 :
                    // delphi.g:4433:5: repeatStmtGen+= repeatStmt
                    {
                    pushFollow(FOLLOW_repeatStmt_in_loopStmt4444);
                    repeatStmtGen=repeatStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_repeatStmtGen==null) list_repeatStmtGen=new ArrayList();
                    list_repeatStmtGen.add(repeatStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node loopStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		loopStmtReturnNode.setKind("loopStmt");
                      	    // Create a CST Node
                      		if(list_repeatStmtGen != null) {
                      	        for(Iterator it = list_repeatStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.repeatStmt_return r = (delphiParser.repeatStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("repeatStmt");
                      	            	loopStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = loopStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:4451:5: whileStmtGen+= whileStmt
                    {
                    pushFollow(FOLLOW_whileStmt_in_loopStmt4456);
                    whileStmtGen=whileStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_whileStmtGen==null) list_whileStmtGen=new ArrayList();
                    list_whileStmtGen.add(whileStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node loopStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		loopStmtReturnNode.setKind("loopStmt");
                      	    // Create a CST Node
                      		if(list_whileStmtGen != null) {
                      	        for(Iterator it = list_whileStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.whileStmt_return r = (delphiParser.whileStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("whileStmt");
                      	            	loopStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = loopStmtReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:4469:5: forStmtGen+= forStmt
                    {
                    pushFollow(FOLLOW_forStmt_in_loopStmt4468);
                    forStmtGen=forStmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_forStmtGen==null) list_forStmtGen=new ArrayList();
                    list_forStmtGen.add(forStmtGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node loopStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		loopStmtReturnNode.setKind("loopStmt");
                      	    // Create a CST Node
                      		if(list_forStmtGen != null) {
                      	        for(Iterator it = list_forStmtGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.forStmt_return r = (delphiParser.forStmt_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forStmt");
                      	            	loopStmtReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = loopStmtReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, loopStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "loopStmt"

    public static class repeatStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "repeatStmt"
    // delphi.g:4489:1: repeatStmt returns [Node returnNode] : TK_0= 'repeat' statementGen+= statement (TK_1= ';' )? TK_2= 'until' expressionGen+= expression ;
    public final delphiParser.repeatStmt_return repeatStmt() throws RecognitionException {
        delphiParser.repeatStmt_return retval = new delphiParser.repeatStmt_return();
        retval.start = input.LT(1);
        int repeatStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_statementGen=null;
        List list_expressionGen=null;
        RuleReturnScope statementGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // delphi.g:4490:1: (TK_0= 'repeat' statementGen+= statement (TK_1= ';' )? TK_2= 'until' expressionGen+= expression )
            // delphi.g:4490:5: TK_0= 'repeat' statementGen+= statement (TK_1= ';' )? TK_2= 'until' expressionGen+= expression
            {
            TK_0=(Token)match(input,108,FOLLOW_108_in_repeatStmt4491); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_in_repeatStmt4496);
            statementGen=statement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            // delphi.g:4490:45: (TK_1= ';' )?
            int alt102=2;
            int LA102_0 = input.LA(1);

            if ( (LA102_0==19) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    // delphi.g:4490:47: TK_1= ';'
                    {
                    TK_1=(Token)match(input,19,FOLLOW_19_in_repeatStmt4503); if (state.failed) return retval;

                    }
                    break;

            }

            TK_2=(Token)match(input,109,FOLLOW_109_in_repeatStmt4510); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_repeatStmt4515);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node repeatStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		repeatStmtReturnNode.setKind("repeatStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		repeatStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	repeatStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		repeatStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		repeatStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	repeatStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = repeatStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, repeatStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "repeatStmt"

    public static class whileStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "whileStmt"
    // delphi.g:4535:1: whileStmt returns [Node returnNode] : TK_0= 'while' expressionGen+= expression TK_1= 'do' statementGen+= statement (TK_2= ';' )? ;
    public final delphiParser.whileStmt_return whileStmt() throws RecognitionException {
        delphiParser.whileStmt_return retval = new delphiParser.whileStmt_return();
        retval.start = input.LT(1);
        int whileStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_expressionGen=null;
        List list_statementGen=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope statementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // delphi.g:4536:1: (TK_0= 'while' expressionGen+= expression TK_1= 'do' statementGen+= statement (TK_2= ';' )? )
            // delphi.g:4536:5: TK_0= 'while' expressionGen+= expression TK_1= 'do' statementGen+= statement (TK_2= ';' )?
            {
            TK_0=(Token)match(input,110,FOLLOW_110_in_whileStmt4538); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whileStmt4543);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            TK_1=(Token)match(input,111,FOLLOW_111_in_whileStmt4548); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_in_whileStmt4553);
            statementGen=statement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            // delphi.g:4536:82: (TK_2= ';' )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==19) ) {
                int LA103_1 = input.LA(2);

                if ( (synpred175_delphi()) ) {
                    alt103=1;
                }
            }
            switch (alt103) {
                case 1 :
                    // delphi.g:4536:84: TK_2= ';'
                    {
                    TK_2=(Token)match(input,19,FOLLOW_19_in_whileStmt4560); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node whileStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		whileStmtReturnNode.setKind("whileStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		whileStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	whileStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		whileStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	whileStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		whileStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = whileStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, whileStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "whileStmt"

    public static class forStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "forStmt"
    // delphi.g:4581:1: forStmt returns [Node returnNode] : TK_0= 'for' qualIdGen+= qualId TK_1= ':=' expressionGen+= expression (TK_2= 'to' | TK_3= 'downto' ) expressionGen_1+= expression TK_4= 'do' statementGen+= statement (TK_5= ';' )? ;
    public final delphiParser.forStmt_return forStmt() throws RecognitionException {
        delphiParser.forStmt_return retval = new delphiParser.forStmt_return();
        retval.start = input.LT(1);
        int forStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        List list_qualIdGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        List list_statementGen=null;
        RuleReturnScope qualIdGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        RuleReturnScope statementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // delphi.g:4582:1: (TK_0= 'for' qualIdGen+= qualId TK_1= ':=' expressionGen+= expression (TK_2= 'to' | TK_3= 'downto' ) expressionGen_1+= expression TK_4= 'do' statementGen+= statement (TK_5= ';' )? )
            // delphi.g:4582:5: TK_0= 'for' qualIdGen+= qualId TK_1= ':=' expressionGen+= expression (TK_2= 'to' | TK_3= 'downto' ) expressionGen_1+= expression TK_4= 'do' statementGen+= statement (TK_5= ';' )?
            {
            TK_0=(Token)match(input,112,FOLLOW_112_in_forStmt4585); if (state.failed) return retval;
            pushFollow(FOLLOW_qualId_in_forStmt4590);
            qualIdGen=qualId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qualIdGen==null) list_qualIdGen=new ArrayList();
            list_qualIdGen.add(qualIdGen);

            TK_1=(Token)match(input,101,FOLLOW_101_in_forStmt4595); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_forStmt4600);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen);

            // delphi.g:4582:73: (TK_2= 'to' | TK_3= 'downto' )
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==113) ) {
                alt104=1;
            }
            else if ( (LA104_0==114) ) {
                alt104=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }
            switch (alt104) {
                case 1 :
                    // delphi.g:4582:75: TK_2= 'to'
                    {
                    TK_2=(Token)match(input,113,FOLLOW_113_in_forStmt4606); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // delphi.g:4582:88: TK_3= 'downto'
                    {
                    TK_3=(Token)match(input,114,FOLLOW_114_in_forStmt4613); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_forStmt4619);
            expressionGen_1=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
            list_expressionGen_1.add(expressionGen_1);

            TK_4=(Token)match(input,111,FOLLOW_111_in_forStmt4624); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_in_forStmt4629);
            statementGen=statement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            // delphi.g:4582:169: (TK_5= ';' )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==19) ) {
                int LA105_1 = input.LA(2);

                if ( (synpred177_delphi()) ) {
                    alt105=1;
                }
            }
            switch (alt105) {
                case 1 :
                    // delphi.g:4582:171: TK_5= ';'
                    {
                    TK_5=(Token)match(input,19,FOLLOW_19_in_forStmt4636); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node forStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		forStmtReturnNode.setKind("forStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		forStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualIdGen != null) {
              	        for(Iterator it = list_qualIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.qualId_return r = (delphiParser.qualId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualId");
              	            	forStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		forStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	forStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		forStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		forStmtReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen_1 != null) {
              	        for(Iterator it = list_expressionGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	forStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		forStmtReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	forStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		forStmtReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = forStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, forStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forStmt"

    public static class withStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "withStmt"
    // delphi.g:4662:1: withStmt returns [Node returnNode] : TK_0= 'with' identListGen+= identList TK_1= 'do' statementGen+= statement (TK_2= ';' )? ;
    public final delphiParser.withStmt_return withStmt() throws RecognitionException {
        delphiParser.withStmt_return retval = new delphiParser.withStmt_return();
        retval.start = input.LT(1);
        int withStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_identListGen=null;
        List list_statementGen=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope statementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // delphi.g:4664:2: (TK_0= 'with' identListGen+= identList TK_1= 'do' statementGen+= statement (TK_2= ';' )? )
            // delphi.g:4664:6: TK_0= 'with' identListGen+= identList TK_1= 'do' statementGen+= statement (TK_2= ';' )?
            {
            TK_0=(Token)match(input,115,FOLLOW_115_in_withStmt4663); if (state.failed) return retval;
            pushFollow(FOLLOW_identList_in_withStmt4668);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_1=(Token)match(input,111,FOLLOW_111_in_withStmt4673); if (state.failed) return retval;
            pushFollow(FOLLOW_statement_in_withStmt4678);
            statementGen=statement();

            state._fsp--;
            if (state.failed) return retval;
            if (list_statementGen==null) list_statementGen=new ArrayList();
            list_statementGen.add(statementGen);

            // delphi.g:4664:79: (TK_2= ';' )?
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==19) ) {
                int LA106_1 = input.LA(2);

                if ( (synpred178_delphi()) ) {
                    alt106=1;
                }
            }
            switch (alt106) {
                case 1 :
                    // delphi.g:4664:81: TK_2= ';'
                    {
                    TK_2=(Token)match(input,19,FOLLOW_19_in_withStmt4684); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node withStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		withStmtReturnNode.setKind("withStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		withStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	withStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		withStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_statementGen != null) {
              	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.statement_return r = (delphiParser.statement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("statement");
              	            	withStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		withStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = withStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, withStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "withStmt"

    public static class tryStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "tryStmt"
    // delphi.g:4709:1: tryStmt returns [Node returnNode] : TK_0= 'try' stmtListGen+= stmtList (TK_1= ';' )? (TK_2= 'except' exceptionBlockGen+= exceptionBlock | TK_3= 'finally' stmtListGen_1+= stmtList ) TK_4= 'end' ;
    public final delphiParser.tryStmt_return tryStmt() throws RecognitionException {
        delphiParser.tryStmt_return retval = new delphiParser.tryStmt_return();
        retval.start = input.LT(1);
        int tryStmt_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        List list_stmtListGen=null;
        List list_exceptionBlockGen=null;
        List list_stmtListGen_1=null;
        RuleReturnScope stmtListGen = null;
        RuleReturnScope exceptionBlockGen = null;
        RuleReturnScope stmtListGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // delphi.g:4711:2: (TK_0= 'try' stmtListGen+= stmtList (TK_1= ';' )? (TK_2= 'except' exceptionBlockGen+= exceptionBlock | TK_3= 'finally' stmtListGen_1+= stmtList ) TK_4= 'end' )
            // delphi.g:4711:6: TK_0= 'try' stmtListGen+= stmtList (TK_1= ';' )? (TK_2= 'except' exceptionBlockGen+= exceptionBlock | TK_3= 'finally' stmtListGen_1+= stmtList ) TK_4= 'end'
            {
            TK_0=(Token)match(input,116,FOLLOW_116_in_tryStmt4712); if (state.failed) return retval;
            pushFollow(FOLLOW_stmtList_in_tryStmt4717);
            stmtListGen=stmtList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
            list_stmtListGen.add(stmtListGen);

            // delphi.g:4711:40: (TK_1= ';' )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==19) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // delphi.g:4711:42: TK_1= ';'
                    {
                    TK_1=(Token)match(input,19,FOLLOW_19_in_tryStmt4723); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:4711:53: (TK_2= 'except' exceptionBlockGen+= exceptionBlock | TK_3= 'finally' stmtListGen_1+= stmtList )
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==117) ) {
                alt108=1;
            }
            else if ( (LA108_0==118) ) {
                alt108=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 108, 0, input);

                throw nvae;
            }
            switch (alt108) {
                case 1 :
                    // delphi.g:4711:55: TK_2= 'except' exceptionBlockGen+= exceptionBlock
                    {
                    TK_2=(Token)match(input,117,FOLLOW_117_in_tryStmt4731); if (state.failed) return retval;
                    pushFollow(FOLLOW_exceptionBlock_in_tryStmt4736);
                    exceptionBlockGen=exceptionBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_exceptionBlockGen==null) list_exceptionBlockGen=new ArrayList();
                    list_exceptionBlockGen.add(exceptionBlockGen);


                    }
                    break;
                case 2 :
                    // delphi.g:4711:108: TK_3= 'finally' stmtListGen_1+= stmtList
                    {
                    TK_3=(Token)match(input,118,FOLLOW_118_in_tryStmt4744); if (state.failed) return retval;
                    pushFollow(FOLLOW_stmtList_in_tryStmt4749);
                    stmtListGen_1=stmtList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_stmtListGen_1==null) list_stmtListGen_1=new ArrayList();
                    list_stmtListGen_1.add(stmtListGen_1);


                    }
                    break;

            }

            TK_4=(Token)match(input,23,FOLLOW_23_in_tryStmt4755); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node tryStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		tryStmtReturnNode.setKind("tryStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		tryStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_stmtListGen != null) {
              	        for(Iterator it = list_stmtListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("stmtList");
              	            	tryStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		tryStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		tryStmtReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_exceptionBlockGen != null) {
              	        for(Iterator it = list_exceptionBlockGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.exceptionBlock_return r = (delphiParser.exceptionBlock_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exceptionBlock");
              	            	tryStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		tryStmtReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_stmtListGen_1 != null) {
              	        for(Iterator it = list_stmtListGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("stmtList");
              	            	tryStmtReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		tryStmtReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = tryStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, tryStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "tryStmt"

    public static class exceptionBlock_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exceptionBlock"
    // delphi.g:4776:1: exceptionBlock returns [Node returnNode] : (TK_0= 'on' (identGen+= ident TK_1= ':' )? typeGen+= type TK_2= 'id' TK_3= 'do' statementGen+= statement (TK_4= ';' )? )* ( (TK_5= 'else' )? stmtListGen+= stmtList )? ;
    public final delphiParser.exceptionBlock_return exceptionBlock() throws RecognitionException {
        delphiParser.exceptionBlock_return retval = new delphiParser.exceptionBlock_return();
        retval.start = input.LT(1);
        int exceptionBlock_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        List list_identGen=null;
        List list_typeGen=null;
        List list_statementGen=null;
        List list_stmtListGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope statementGen = null;
        RuleReturnScope stmtListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // delphi.g:4777:1: ( (TK_0= 'on' (identGen+= ident TK_1= ':' )? typeGen+= type TK_2= 'id' TK_3= 'do' statementGen+= statement (TK_4= ';' )? )* ( (TK_5= 'else' )? stmtListGen+= stmtList )? )
            // delphi.g:4777:4: (TK_0= 'on' (identGen+= ident TK_1= ':' )? typeGen+= type TK_2= 'id' TK_3= 'do' statementGen+= statement (TK_4= ';' )? )* ( (TK_5= 'else' )? stmtListGen+= stmtList )?
            {
            // delphi.g:4777:4: (TK_0= 'on' (identGen+= ident TK_1= ':' )? typeGen+= type TK_2= 'id' TK_3= 'do' statementGen+= statement (TK_4= ';' )? )*
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( (LA111_0==119) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    // delphi.g:4777:6: TK_0= 'on' (identGen+= ident TK_1= ':' )? typeGen+= type TK_2= 'id' TK_3= 'do' statementGen+= statement (TK_4= ';' )?
            	    {
            	    TK_0=(Token)match(input,119,FOLLOW_119_in_exceptionBlock4779); if (state.failed) return retval;
            	    // delphi.g:4777:16: (identGen+= ident TK_1= ':' )?
            	    int alt109=2;
            	    alt109 = dfa109.predict(input);
            	    switch (alt109) {
            	        case 1 :
            	            // delphi.g:4777:18: identGen+= ident TK_1= ':'
            	            {
            	            pushFollow(FOLLOW_ident_in_exceptionBlock4785);
            	            identGen=ident();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if (list_identGen==null) list_identGen=new ArrayList();
            	            list_identGen.add(identGen);

            	            TK_1=(Token)match(input,37,FOLLOW_37_in_exceptionBlock4790); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_type_in_exceptionBlock4797);
            	    typeGen=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeGen==null) list_typeGen=new ArrayList();
            	    list_typeGen.add(typeGen);

            	    TK_2=(Token)match(input,120,FOLLOW_120_in_exceptionBlock4801); if (state.failed) return retval;
            	    TK_3=(Token)match(input,111,FOLLOW_111_in_exceptionBlock4806); if (state.failed) return retval;
            	    pushFollow(FOLLOW_statement_in_exceptionBlock4811);
            	    statementGen=statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementGen==null) list_statementGen=new ArrayList();
            	    list_statementGen.add(statementGen);

            	    // delphi.g:4777:107: (TK_4= ';' )?
            	    int alt110=2;
            	    int LA110_0 = input.LA(1);

            	    if ( (LA110_0==19) ) {
            	        alt110=1;
            	    }
            	    switch (alt110) {
            	        case 1 :
            	            // delphi.g:4777:109: TK_4= ';'
            	            {
            	            TK_4=(Token)match(input,19,FOLLOW_19_in_exceptionBlock4817); if (state.failed) return retval;

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);

            // delphi.g:4777:122: ( (TK_5= 'else' )? stmtListGen+= stmtList )?
            int alt113=2;
            switch ( input.LA(1) ) {
                case ID:
                case INT:
                case HEX:
                case 71:
                case 100:
                case 102:
                case 103:
                case 104:
                case 105:
                case 107:
                case 108:
                case 110:
                case 112:
                case 115:
                case 116:
                case 121:
                case 123:
                    {
                    alt113=1;
                    }
                    break;
                case 23:
                    {
                    int LA113_2 = input.LA(2);

                    if ( (synpred185_delphi()) ) {
                        alt113=1;
                    }
                    }
                    break;
                case EOF:
                    {
                    int LA113_3 = input.LA(2);

                    if ( (synpred185_delphi()) ) {
                        alt113=1;
                    }
                    }
                    break;
            }

            switch (alt113) {
                case 1 :
                    // delphi.g:4777:123: (TK_5= 'else' )? stmtListGen+= stmtList
                    {
                    // delphi.g:4777:123: (TK_5= 'else' )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==107) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // delphi.g:4777:125: TK_5= 'else'
                            {
                            TK_5=(Token)match(input,107,FOLLOW_107_in_exceptionBlock4828); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_stmtList_in_exceptionBlock4835);
                    stmtListGen=stmtList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
                    list_stmtListGen.add(stmtListGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node exceptionBlockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exceptionBlockReturnNode.setKind("exceptionBlock");

              		// Create a special CST Node for terminal typeGen aggregation
              		if(list_typeGen != null) {
              	    for(int pos = 0; pos < list_typeGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		exceptionBlockReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_identGen != null) {		
              	    	delphiParser.ident_return r = (delphiParser.ident_return) list_identGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("ident");
              	    		exceptionBlockReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		exceptionBlockReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeGen != null) {		
              	    	delphiParser.type_return r = (delphiParser.type_return) list_typeGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("type");
              	    		exceptionBlockReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		exceptionBlockReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		exceptionBlockReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_statementGen != null) {		
              	    	delphiParser.statement_return r = (delphiParser.statement_return) list_statementGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("statement");
              	    		exceptionBlockReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		exceptionBlockReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		exceptionBlockReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_stmtListGen != null) {
              	        for(Iterator it = list_stmtListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("stmtList");
              	            	exceptionBlockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exceptionBlockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, exceptionBlock_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exceptionBlock"

    public static class raiseStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "raiseStmt"
    // delphi.g:4858:1: raiseStmt returns [Node returnNode] : TK_0= 'raise' (IDGen= ID )? (TK_1= 'at' IDGen_1= ID )? ;
    public final delphiParser.raiseStmt_return raiseStmt() throws RecognitionException {
        delphiParser.raiseStmt_return retval = new delphiParser.raiseStmt_return();
        retval.start = input.LT(1);
        int raiseStmt_StartIndex = input.index();
        Token TK_0=null;
        Token IDGen=null;
        Token TK_1=null;
        Token IDGen_1=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // delphi.g:4859:1: (TK_0= 'raise' (IDGen= ID )? (TK_1= 'at' IDGen_1= ID )? )
            // delphi.g:4860:4: TK_0= 'raise' (IDGen= ID )? (TK_1= 'at' IDGen_1= ID )?
            {
            TK_0=(Token)match(input,121,FOLLOW_121_in_raiseStmt4864); if (state.failed) return retval;
            // delphi.g:4860:17: (IDGen= ID )?
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==ID) ) {
                int LA114_1 = input.LA(2);

                if ( (synpred186_delphi()) ) {
                    alt114=1;
                }
            }
            switch (alt114) {
                case 1 :
                    // delphi.g:4860:19: IDGen= ID
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_raiseStmt4870); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:4860:30: (TK_1= 'at' IDGen_1= ID )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==122) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // delphi.g:4860:32: TK_1= 'at' IDGen_1= ID
                    {
                    TK_1=(Token)match(input,122,FOLLOW_122_in_raiseStmt4878); if (state.failed) return retval;
                    IDGen_1=(Token)match(input,ID,FOLLOW_ID_in_raiseStmt4883); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node raiseStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		raiseStmtReturnNode.setKind("raiseStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		raiseStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IDGen != null) {
              			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
              			raiseStmtReturnNode.getChildren().add(IDGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		raiseStmtReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IDGen_1 != null) {
              			Leaf IDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen_1!=null?IDGen_1.getText():null), IDGen_1.getCharPositionInLine(), IDGen_1.getLine());
              			raiseStmtReturnNode.getChildren().add(IDGen_1Leaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = raiseStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, raiseStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "raiseStmt"

    public static class assemblerStmt_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "assemblerStmt"
    // delphi.g:4890:1: assemblerStmt returns [Node returnNode] : TK_0= 'asm' ;
    public final delphiParser.assemblerStmt_return assemblerStmt() throws RecognitionException {
        delphiParser.assemblerStmt_return retval = new delphiParser.assemblerStmt_return();
        retval.start = input.LT(1);
        int assemblerStmt_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // delphi.g:4891:1: (TK_0= 'asm' )
            // delphi.g:4891:5: TK_0= 'asm'
            {
            TK_0=(Token)match(input,123,FOLLOW_123_in_assemblerStmt4908); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node assemblerStmtReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		assemblerStmtReturnNode.setKind("assemblerStmt");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		assemblerStmtReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = assemblerStmtReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, assemblerStmt_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assemblerStmt"

    public static class procedureDeclSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "procedureDeclSection"
    // delphi.g:4908:1: procedureDeclSection returns [Node returnNode] : (procedureDeclGen+= procedureDecl | functionDeclGen+= functionDecl );
    public final delphiParser.procedureDeclSection_return procedureDeclSection() throws RecognitionException {
        delphiParser.procedureDeclSection_return retval = new delphiParser.procedureDeclSection_return();
        retval.start = input.LT(1);
        int procedureDeclSection_StartIndex = input.index();
        List list_procedureDeclGen=null;
        List list_functionDeclGen=null;
        RuleReturnScope procedureDeclGen = null;
        RuleReturnScope functionDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // delphi.g:4909:1: (procedureDeclGen+= procedureDecl | functionDeclGen+= functionDecl )
            int alt116=2;
            switch ( input.LA(1) ) {
            case 39:
                {
                int LA116_1 = input.LA(2);

                if ( (LA116_1==125) ) {
                    alt116=1;
                }
                else if ( (LA116_1==124) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 1, input);

                    throw nvae;
                }
                }
                break;
            case 125:
                {
                alt116=1;
                }
                break;
            case 124:
                {
                alt116=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // delphi.g:4909:5: procedureDeclGen+= procedureDecl
                    {
                    pushFollow(FOLLOW_procedureDecl_in_procedureDeclSection4941);
                    procedureDeclGen=procedureDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_procedureDeclGen==null) list_procedureDeclGen=new ArrayList();
                    list_procedureDeclGen.add(procedureDeclGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node procedureDeclSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		procedureDeclSectionReturnNode.setKind("procedureDeclSection");
                      	    // Create a CST Node
                      		if(list_procedureDeclGen != null) {
                      	        for(Iterator it = list_procedureDeclGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.procedureDecl_return r = (delphiParser.procedureDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedureDecl");
                      	            	procedureDeclSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = procedureDeclSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:4927:9: functionDeclGen+= functionDecl
                    {
                    pushFollow(FOLLOW_functionDecl_in_procedureDeclSection4957);
                    functionDeclGen=functionDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_functionDeclGen==null) list_functionDeclGen=new ArrayList();
                    list_functionDeclGen.add(functionDeclGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node procedureDeclSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		procedureDeclSectionReturnNode.setKind("procedureDeclSection");
                      	    // Create a CST Node
                      		if(list_functionDeclGen != null) {
                      	        for(Iterator it = list_functionDeclGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.functionDecl_return r = (delphiParser.functionDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("functionDecl");
                      	            	procedureDeclSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = procedureDeclSectionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, procedureDeclSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureDeclSection"

    public static class procedureDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "procedureDecl"
    // delphi.g:4947:1: procedureDecl returns [Node returnNode] : procedureHeadingGen+= procedureHeading TK_0= ';' (directiveGen+= directive )? (portabilityDirectiveGen+= portabilityDirective )? blockGen+= block TK_1= ';' ;
    public final delphiParser.procedureDecl_return procedureDecl() throws RecognitionException {
        delphiParser.procedureDecl_return retval = new delphiParser.procedureDecl_return();
        retval.start = input.LT(1);
        int procedureDecl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_procedureHeadingGen=null;
        List list_directiveGen=null;
        List list_portabilityDirectiveGen=null;
        List list_blockGen=null;
        RuleReturnScope procedureHeadingGen = null;
        RuleReturnScope directiveGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        RuleReturnScope blockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // delphi.g:4948:1: (procedureHeadingGen+= procedureHeading TK_0= ';' (directiveGen+= directive )? (portabilityDirectiveGen+= portabilityDirective )? blockGen+= block TK_1= ';' )
            // delphi.g:4948:4: procedureHeadingGen+= procedureHeading TK_0= ';' (directiveGen+= directive )? (portabilityDirectiveGen+= portabilityDirective )? blockGen+= block TK_1= ';'
            {
            pushFollow(FOLLOW_procedureHeading_in_procedureDecl4979);
            procedureHeadingGen=procedureHeading();

            state._fsp--;
            if (state.failed) return retval;
            if (list_procedureHeadingGen==null) list_procedureHeadingGen=new ArrayList();
            list_procedureHeadingGen.add(procedureHeadingGen);

            TK_0=(Token)match(input,19,FOLLOW_19_in_procedureDecl4984); if (state.failed) return retval;
            // delphi.g:4948:52: (directiveGen+= directive )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( ((LA117_0>=127 && LA117_0<=145)) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // delphi.g:4948:54: directiveGen+= directive
                    {
                    pushFollow(FOLLOW_directive_in_procedureDecl4990);
                    directiveGen=directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_directiveGen==null) list_directiveGen=new ArrayList();
                    list_directiveGen.add(directiveGen);


                    }
                    break;

            }

            // delphi.g:4948:80: (portabilityDirectiveGen+= portabilityDirective )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==24||(LA118_0>=26 && LA118_0<=27)) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // delphi.g:4948:82: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_procedureDecl4998);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_procedureDecl5005);
            blockGen=block();

            state._fsp--;
            if (state.failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen);

            TK_1=(Token)match(input,19,FOLLOW_19_in_procedureDecl5010); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node procedureDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		procedureDeclReturnNode.setKind("procedureDecl");
              	    // Create a CST Node
              		if(list_procedureHeadingGen != null) {
              	        for(Iterator it = list_procedureHeadingGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.procedureHeading_return r = (delphiParser.procedureHeading_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("procedureHeading");
              	            	procedureDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		procedureDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_directiveGen != null) {
              	        for(Iterator it = list_directiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.directive_return r = (delphiParser.directive_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("directive");
              	            	procedureDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	procedureDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.block_return r = (delphiParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	procedureDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		procedureDeclReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = procedureDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, procedureDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureDecl"

    public static class functionDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "functionDecl"
    // delphi.g:5008:1: functionDecl returns [Node returnNode] : functionHeadingGen+= functionHeading TK_0= ';' (directiveGen+= directive )? (portabilityDirectiveGen+= portabilityDirective )? blockGen+= block TK_1= ';' ;
    public final delphiParser.functionDecl_return functionDecl() throws RecognitionException {
        delphiParser.functionDecl_return retval = new delphiParser.functionDecl_return();
        retval.start = input.LT(1);
        int functionDecl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_functionHeadingGen=null;
        List list_directiveGen=null;
        List list_portabilityDirectiveGen=null;
        List list_blockGen=null;
        RuleReturnScope functionHeadingGen = null;
        RuleReturnScope directiveGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        RuleReturnScope blockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // delphi.g:5009:1: (functionHeadingGen+= functionHeading TK_0= ';' (directiveGen+= directive )? (portabilityDirectiveGen+= portabilityDirective )? blockGen+= block TK_1= ';' )
            // delphi.g:5009:5: functionHeadingGen+= functionHeading TK_0= ';' (directiveGen+= directive )? (portabilityDirectiveGen+= portabilityDirective )? blockGen+= block TK_1= ';'
            {
            pushFollow(FOLLOW_functionHeading_in_functionDecl5033);
            functionHeadingGen=functionHeading();

            state._fsp--;
            if (state.failed) return retval;
            if (list_functionHeadingGen==null) list_functionHeadingGen=new ArrayList();
            list_functionHeadingGen.add(functionHeadingGen);

            TK_0=(Token)match(input,19,FOLLOW_19_in_functionDecl5038); if (state.failed) return retval;
            // delphi.g:5009:51: (directiveGen+= directive )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( ((LA119_0>=127 && LA119_0<=145)) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // delphi.g:5009:53: directiveGen+= directive
                    {
                    pushFollow(FOLLOW_directive_in_functionDecl5044);
                    directiveGen=directive();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_directiveGen==null) list_directiveGen=new ArrayList();
                    list_directiveGen.add(directiveGen);


                    }
                    break;

            }

            // delphi.g:5009:79: (portabilityDirectiveGen+= portabilityDirective )?
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==24||(LA120_0>=26 && LA120_0<=27)) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    // delphi.g:5009:81: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_functionDecl5052);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_block_in_functionDecl5059);
            blockGen=block();

            state._fsp--;
            if (state.failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen);

            TK_1=(Token)match(input,19,FOLLOW_19_in_functionDecl5064); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node functionDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		functionDeclReturnNode.setKind("functionDecl");
              	    // Create a CST Node
              		if(list_functionHeadingGen != null) {
              	        for(Iterator it = list_functionHeadingGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.functionHeading_return r = (delphiParser.functionHeading_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("functionHeading");
              	            	functionDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		functionDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_directiveGen != null) {
              	        for(Iterator it = list_directiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.directive_return r = (delphiParser.directive_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("directive");
              	            	functionDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	functionDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.block_return r = (delphiParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	functionDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		functionDeclReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = functionDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, functionDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionDecl"

    public static class functionHeading_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "functionHeading"
    // delphi.g:5069:1: functionHeading returns [Node returnNode] : (TK_0= 'class' )? TK_1= 'function' identGen+= ident (formalParametersGen+= formalParameters )? TK_2= ':' typeGen+= type ;
    public final delphiParser.functionHeading_return functionHeading() throws RecognitionException {
        delphiParser.functionHeading_return retval = new delphiParser.functionHeading_return();
        retval.start = input.LT(1);
        int functionHeading_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_identGen=null;
        List list_formalParametersGen=null;
        List list_typeGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope typeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // delphi.g:5070:1: ( (TK_0= 'class' )? TK_1= 'function' identGen+= ident (formalParametersGen+= formalParameters )? TK_2= ':' typeGen+= type )
            // delphi.g:5070:4: (TK_0= 'class' )? TK_1= 'function' identGen+= ident (formalParametersGen+= formalParameters )? TK_2= ':' typeGen+= type
            {
            // delphi.g:5070:4: (TK_0= 'class' )?
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==39) ) {
                alt121=1;
            }
            switch (alt121) {
                case 1 :
                    // delphi.g:5070:6: TK_0= 'class'
                    {
                    TK_0=(Token)match(input,39,FOLLOW_39_in_functionHeading5088); if (state.failed) return retval;

                    }
                    break;

            }

            TK_1=(Token)match(input,124,FOLLOW_124_in_functionHeading5095); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_functionHeading5100);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:5070:55: (formalParametersGen+= formalParameters )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==17) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // delphi.g:5070:57: formalParametersGen+= formalParameters
                    {
                    pushFollow(FOLLOW_formalParameters_in_functionHeading5106);
                    formalParametersGen=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
                    list_formalParametersGen.add(formalParametersGen);


                    }
                    break;

            }

            TK_2=(Token)match(input,37,FOLLOW_37_in_functionHeading5113); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_functionHeading5118);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node functionHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		functionHeadingReturnNode.setKind("functionHeading");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		functionHeadingReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		functionHeadingReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	functionHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.formalParameters_return r = (delphiParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	functionHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		functionHeadingReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	functionHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = functionHeadingReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, functionHeading_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "functionHeading"

    public static class procedureHeading_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "procedureHeading"
    // delphi.g:5125:1: procedureHeading returns [Node returnNode] : (TK_0= 'class' )? TK_1= 'procedure' identGen+= ident (formalParametersGen+= formalParameters )? ;
    public final delphiParser.procedureHeading_return procedureHeading() throws RecognitionException {
        delphiParser.procedureHeading_return retval = new delphiParser.procedureHeading_return();
        retval.start = input.LT(1);
        int procedureHeading_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identGen=null;
        List list_formalParametersGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope formalParametersGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // delphi.g:5126:1: ( (TK_0= 'class' )? TK_1= 'procedure' identGen+= ident (formalParametersGen+= formalParameters )? )
            // delphi.g:5126:4: (TK_0= 'class' )? TK_1= 'procedure' identGen+= ident (formalParametersGen+= formalParameters )?
            {
            // delphi.g:5126:4: (TK_0= 'class' )?
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==39) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    // delphi.g:5126:6: TK_0= 'class'
                    {
                    TK_0=(Token)match(input,39,FOLLOW_39_in_procedureHeading5142); if (state.failed) return retval;

                    }
                    break;

            }

            TK_1=(Token)match(input,125,FOLLOW_125_in_procedureHeading5148); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_procedureHeading5153);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:5126:55: (formalParametersGen+= formalParameters )?
            int alt124=2;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==17) ) {
                alt124=1;
            }
            switch (alt124) {
                case 1 :
                    // delphi.g:5126:57: formalParametersGen+= formalParameters
                    {
                    pushFollow(FOLLOW_formalParameters_in_procedureHeading5159);
                    formalParametersGen=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
                    list_formalParametersGen.add(formalParametersGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node procedureHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		procedureHeadingReturnNode.setKind("procedureHeading");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		procedureHeadingReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		procedureHeadingReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	procedureHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.formalParameters_return r = (delphiParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	procedureHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = procedureHeadingReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, procedureHeading_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "procedureHeading"

    public static class formalParameters_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formalParameters"
    // delphi.g:5166:1: formalParameters returns [Node returnNode] : TK_0= '(' (formalParmGen+= formalParm (TK_1= ';' formalParmGen_1+= formalParm )* ) TK_2= ')' ;
    public final delphiParser.formalParameters_return formalParameters() throws RecognitionException {
        delphiParser.formalParameters_return retval = new delphiParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_formalParmGen=null;
        List list_formalParmGen_1=null;
        RuleReturnScope formalParmGen = null;
        RuleReturnScope formalParmGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // delphi.g:5167:1: (TK_0= '(' (formalParmGen+= formalParm (TK_1= ';' formalParmGen_1+= formalParm )* ) TK_2= ')' )
            // delphi.g:5167:5: TK_0= '(' (formalParmGen+= formalParm (TK_1= ';' formalParmGen_1+= formalParm )* ) TK_2= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_formalParameters5184); if (state.failed) return retval;
            // delphi.g:5167:14: (formalParmGen+= formalParm (TK_1= ';' formalParmGen_1+= formalParm )* )
            // delphi.g:5167:16: formalParmGen+= formalParm (TK_1= ';' formalParmGen_1+= formalParm )*
            {
            pushFollow(FOLLOW_formalParm_in_formalParameters5190);
            formalParmGen=formalParm();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParmGen==null) list_formalParmGen=new ArrayList();
            list_formalParmGen.add(formalParmGen);

            // delphi.g:5167:42: (TK_1= ';' formalParmGen_1+= formalParm )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==19) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // delphi.g:5167:44: TK_1= ';' formalParmGen_1+= formalParm
            	    {
            	    TK_1=(Token)match(input,19,FOLLOW_19_in_formalParameters5196); if (state.failed) return retval;
            	    pushFollow(FOLLOW_formalParm_in_formalParameters5201);
            	    formalParmGen_1=formalParm();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_formalParmGen_1==null) list_formalParmGen_1=new ArrayList();
            	    list_formalParmGen_1.add(formalParmGen_1);


            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);


            }

            TK_2=(Token)match(input,18,FOLLOW_18_in_formalParameters5209); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node formalParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParametersReturnNode.setKind("formalParameters");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_formalParmGen != null) {
              	        for(Iterator it = list_formalParmGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.formalParm_return r = (delphiParser.formalParm_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParm");
              	            	formalParametersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal formalParmGen_1 aggregation
              		if(list_formalParmGen_1 != null) {
              	    for(int pos = 0; pos < list_formalParmGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_formalParmGen_1 != null) {		
              	    	delphiParser.formalParm_return r = (delphiParser.formalParm_return) list_formalParmGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("formalParm");
              	    		formalParametersReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParametersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParm_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formalParm"
    // delphi.g:5217:1: formalParm returns [Node returnNode] : (TK_0= 'var' | TK_1= 'const' | TK_2= 'out' )? parameterGen+= parameter ;
    public final delphiParser.formalParm_return formalParm() throws RecognitionException {
        delphiParser.formalParm_return retval = new delphiParser.formalParm_return();
        retval.start = input.LT(1);
        int formalParm_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_parameterGen=null;
        RuleReturnScope parameterGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // delphi.g:5218:1: ( (TK_0= 'var' | TK_1= 'const' | TK_2= 'out' )? parameterGen+= parameter )
            // delphi.g:5218:4: (TK_0= 'var' | TK_1= 'const' | TK_2= 'out' )? parameterGen+= parameter
            {
            // delphi.g:5218:4: (TK_0= 'var' | TK_1= 'const' | TK_2= 'out' )?
            int alt126=4;
            switch ( input.LA(1) ) {
                case 76:
                    {
                    alt126=1;
                    }
                    break;
                case 35:
                    {
                    alt126=2;
                    }
                    break;
                case 126:
                    {
                    alt126=3;
                    }
                    break;
            }

            switch (alt126) {
                case 1 :
                    // delphi.g:5218:6: TK_0= 'var'
                    {
                    TK_0=(Token)match(input,76,FOLLOW_76_in_formalParm5233); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // delphi.g:5218:20: TK_1= 'const'
                    {
                    TK_1=(Token)match(input,35,FOLLOW_35_in_formalParm5240); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // delphi.g:5218:36: TK_2= 'out'
                    {
                    TK_2=(Token)match(input,126,FOLLOW_126_in_formalParm5247); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_parameter_in_formalParm5254);
            parameterGen=parameter();

            state._fsp--;
            if (state.failed) return retval;
            if (list_parameterGen==null) list_parameterGen=new ArrayList();
            list_parameterGen.add(parameterGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node formalParmReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParmReturnNode.setKind("formalParm");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		formalParmReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		formalParmReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		formalParmReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_parameterGen != null) {
              	        for(Iterator it = list_parameterGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.parameter_return r = (delphiParser.parameter_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("parameter");
              	            	formalParmReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParmReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, formalParm_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParm"

    public static class parameter_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "parameter"
    // delphi.g:5253:1: parameter returns [Node returnNode] : (identListGen+= identList (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )? | identGen+= ident TK_0= ':' typeGen+= type TK_1= '=' constExprGen+= constExpr );
    public final delphiParser.parameter_return parameter() throws RecognitionException {
        delphiParser.parameter_return retval = new delphiParser.parameter_return();
        retval.start = input.LT(1);
        int parameter_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_identListGen=null;
        List list_typeGen=null;
        List list_identGen=null;
        List list_constExprGen=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope identGen = null;
        RuleReturnScope constExprGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // delphi.g:5254:1: (identListGen+= identList (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )? | identGen+= ident TK_0= ':' typeGen+= type TK_1= '=' constExprGen+= constExpr )
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==ID) ) {
                int LA130_1 = input.LA(2);

                if ( (synpred204_delphi()) ) {
                    alt130=1;
                }
                else if ( (true) ) {
                    alt130=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA130_0==100) ) {
                int LA130_2 = input.LA(2);

                if ( (synpred204_delphi()) ) {
                    alt130=1;
                }
                else if ( (true) ) {
                    alt130=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 130, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);

                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    // delphi.g:5254:5: identListGen+= identList (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )?
                    {
                    pushFollow(FOLLOW_identList_in_parameter5277);
                    identListGen=identList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identListGen==null) list_identListGen=new ArrayList();
                    list_identListGen.add(identListGen);

                    // delphi.g:5254:29: (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )?
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==37) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            // delphi.g:5254:31: TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' )
                            {
                            TK_0=(Token)match(input,37,FOLLOW_37_in_parameter5283); if (state.failed) return retval;
                            // delphi.g:5254:40: ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' )
                            int alt128=2;
                            int LA128_0 = input.LA(1);

                            if ( ((LA128_0>=ID && LA128_0<=INT)||(LA128_0>=QVALUE && LA128_0<=DQVALUE)||LA128_0==17||LA128_0==39||(LA128_0>=41 && LA128_0<=61)||(LA128_0>=63 && LA128_0<=68)||LA128_0==70||LA128_0==72||LA128_0==74||(LA128_0>=78 && LA128_0<=82)||LA128_0==100||(LA128_0>=124 && LA128_0<=125)||LA128_0==163) ) {
                                alt128=1;
                            }
                            else if ( (LA128_0==73) ) {
                                int LA128_2 = input.LA(2);

                                if ( (LA128_2==40) ) {
                                    alt128=1;
                                }
                                else if ( (LA128_2==EOF||(LA128_2>=18 && LA128_2<=19)) ) {
                                    alt128=2;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 128, 2, input);

                                    throw nvae;
                                }
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 128, 0, input);

                                throw nvae;
                            }
                            switch (alt128) {
                                case 1 :
                                    // delphi.g:5254:41: (TK_1= 'array' TK_2= 'of' )? typeGen+= type
                                    {
                                    // delphi.g:5254:41: (TK_1= 'array' TK_2= 'of' )?
                                    int alt127=2;
                                    alt127 = dfa127.predict(input);
                                    switch (alt127) {
                                        case 1 :
                                            // delphi.g:5254:43: TK_1= 'array' TK_2= 'of'
                                            {
                                            TK_1=(Token)match(input,67,FOLLOW_67_in_parameter5290); if (state.failed) return retval;
                                            TK_2=(Token)match(input,40,FOLLOW_40_in_parameter5295); if (state.failed) return retval;

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_type_in_parameter5302);
                                    typeGen=type();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if (list_typeGen==null) list_typeGen=new ArrayList();
                                    list_typeGen.add(typeGen);


                                    }
                                    break;
                                case 2 :
                                    // delphi.g:5254:87: TK_3= 'file'
                                    {
                                    TK_3=(Token)match(input,73,FOLLOW_73_in_parameter5309); if (state.failed) return retval;

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node parameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		parameterReturnNode.setKind("parameter");
                      	    // Create a CST Node
                      		if(list_identListGen != null) {
                      	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identList");
                      	            	parameterReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		parameterReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		parameterReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		parameterReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	parameterReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
                      	 		parameterReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = parameterReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:5302:6: identGen+= ident TK_0= ':' typeGen+= type TK_1= '=' constExprGen+= constExpr
                    {
                    pushFollow(FOLLOW_ident_in_parameter5326);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);

                    TK_0=(Token)match(input,37,FOLLOW_37_in_parameter5331); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_parameter5336);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen);

                    TK_1=(Token)match(input,36,FOLLOW_36_in_parameter5341); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_parameter5346);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node parameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		parameterReturnNode.setKind("parameter");
                      	    // Create a CST Node
                      		if(list_identGen != null) {
                      	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("ident");
                      	            	parameterReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		parameterReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	parameterReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		parameterReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constExprGen != null) {
                      	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constExpr");
                      	            	parameterReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = parameterReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, parameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parameter"

    public static class directive_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "directive"
    // delphi.g:5352:1: directive returns [Node returnNode] : (TK_0= 'cdecl' | TK_0= 'register' | TK_0= 'dynamic' | TK_0= 'virtual' | TK_0= 'export' | TK_0= 'external' | TK_0= 'near' | TK_0= 'far' | TK_0= 'forward' | TK_0= 'message' constExprGen+= constExpr | TK_0= 'override' | TK_0= 'overload' | TK_0= 'pascal' | TK_0= 'reintroduce' | TK_0= 'safecall' | TK_0= 'stdcall' | TK_0= 'varargs' | TK_0= 'local' | TK_0= 'abstract' );
    public final delphiParser.directive_return directive() throws RecognitionException {
        delphiParser.directive_return retval = new delphiParser.directive_return();
        retval.start = input.LT(1);
        int directive_StartIndex = input.index();
        Token TK_0=null;
        List list_constExprGen=null;
        RuleReturnScope constExprGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // delphi.g:5353:1: (TK_0= 'cdecl' | TK_0= 'register' | TK_0= 'dynamic' | TK_0= 'virtual' | TK_0= 'export' | TK_0= 'external' | TK_0= 'near' | TK_0= 'far' | TK_0= 'forward' | TK_0= 'message' constExprGen+= constExpr | TK_0= 'override' | TK_0= 'overload' | TK_0= 'pascal' | TK_0= 'reintroduce' | TK_0= 'safecall' | TK_0= 'stdcall' | TK_0= 'varargs' | TK_0= 'local' | TK_0= 'abstract' )
            int alt131=19;
            switch ( input.LA(1) ) {
            case 127:
                {
                alt131=1;
                }
                break;
            case 128:
                {
                alt131=2;
                }
                break;
            case 129:
                {
                alt131=3;
                }
                break;
            case 130:
                {
                alt131=4;
                }
                break;
            case 131:
                {
                alt131=5;
                }
                break;
            case 132:
                {
                alt131=6;
                }
                break;
            case 133:
                {
                alt131=7;
                }
                break;
            case 134:
                {
                alt131=8;
                }
                break;
            case 135:
                {
                alt131=9;
                }
                break;
            case 136:
                {
                alt131=10;
                }
                break;
            case 137:
                {
                alt131=11;
                }
                break;
            case 138:
                {
                alt131=12;
                }
                break;
            case 139:
                {
                alt131=13;
                }
                break;
            case 140:
                {
                alt131=14;
                }
                break;
            case 141:
                {
                alt131=15;
                }
                break;
            case 142:
                {
                alt131=16;
                }
                break;
            case 143:
                {
                alt131=17;
                }
                break;
            case 144:
                {
                alt131=18;
                }
                break;
            case 145:
                {
                alt131=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);

                throw nvae;
            }

            switch (alt131) {
                case 1 :
                    // delphi.g:5353:5: TK_0= 'cdecl'
                    {
                    TK_0=(Token)match(input,127,FOLLOW_127_in_directive5370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:5366:9: TK_0= 'register'
                    {
                    TK_0=(Token)match(input,128,FOLLOW_128_in_directive5386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:5379:9: TK_0= 'dynamic'
                    {
                    TK_0=(Token)match(input,129,FOLLOW_129_in_directive5402); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:5392:9: TK_0= 'virtual'
                    {
                    TK_0=(Token)match(input,130,FOLLOW_130_in_directive5418); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // delphi.g:5405:9: TK_0= 'export'
                    {
                    TK_0=(Token)match(input,131,FOLLOW_131_in_directive5434); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // delphi.g:5418:9: TK_0= 'external'
                    {
                    TK_0=(Token)match(input,132,FOLLOW_132_in_directive5450); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // delphi.g:5431:9: TK_0= 'near'
                    {
                    TK_0=(Token)match(input,133,FOLLOW_133_in_directive5466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // delphi.g:5444:9: TK_0= 'far'
                    {
                    TK_0=(Token)match(input,134,FOLLOW_134_in_directive5482); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // delphi.g:5457:9: TK_0= 'forward'
                    {
                    TK_0=(Token)match(input,135,FOLLOW_135_in_directive5498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // delphi.g:5470:5: TK_0= 'message' constExprGen+= constExpr
                    {
                    TK_0=(Token)match(input,136,FOLLOW_136_in_directive5510); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_directive5515);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constExprGen != null) {
                      	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constExpr");
                      	            	directiveReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // delphi.g:5493:9: TK_0= 'override'
                    {
                    TK_0=(Token)match(input,137,FOLLOW_137_in_directive5531); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // delphi.g:5506:9: TK_0= 'overload'
                    {
                    TK_0=(Token)match(input,138,FOLLOW_138_in_directive5547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // delphi.g:5519:8: TK_0= 'pascal'
                    {
                    TK_0=(Token)match(input,139,FOLLOW_139_in_directive5562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // delphi.g:5532:8: TK_0= 'reintroduce'
                    {
                    TK_0=(Token)match(input,140,FOLLOW_140_in_directive5577); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // delphi.g:5545:9: TK_0= 'safecall'
                    {
                    TK_0=(Token)match(input,141,FOLLOW_141_in_directive5593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // delphi.g:5558:9: TK_0= 'stdcall'
                    {
                    TK_0=(Token)match(input,142,FOLLOW_142_in_directive5609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 17 :
                    // delphi.g:5571:9: TK_0= 'varargs'
                    {
                    TK_0=(Token)match(input,143,FOLLOW_143_in_directive5625); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 18 :
                    // delphi.g:5584:9: TK_0= 'local'
                    {
                    TK_0=(Token)match(input,144,FOLLOW_144_in_directive5641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;
                case 19 :
                    // delphi.g:5597:9: TK_0= 'abstract'
                    {
                    TK_0=(Token)match(input,145,FOLLOW_145_in_directive5657); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node directiveReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		directiveReturnNode.setKind("directive");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		directiveReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = directiveReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, directive_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "directive"

    public static class objectType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "objectType"
    // delphi.g:5612:1: objectType returns [Node returnNode] : TK_0= 'object' (objHeritageGen+= objHeritage )? (objFieldListGen+= objFieldList )? (methodListGen+= methodList )? TK_1= 'end' ;
    public final delphiParser.objectType_return objectType() throws RecognitionException {
        delphiParser.objectType_return retval = new delphiParser.objectType_return();
        retval.start = input.LT(1);
        int objectType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_objHeritageGen=null;
        List list_objFieldListGen=null;
        List list_methodListGen=null;
        RuleReturnScope objHeritageGen = null;
        RuleReturnScope objFieldListGen = null;
        RuleReturnScope methodListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // delphi.g:5613:1: (TK_0= 'object' (objHeritageGen+= objHeritage )? (objFieldListGen+= objFieldList )? (methodListGen+= methodList )? TK_1= 'end' )
            // delphi.g:5613:5: TK_0= 'object' (objHeritageGen+= objHeritage )? (objFieldListGen+= objFieldList )? (methodListGen+= methodList )? TK_1= 'end'
            {
            TK_0=(Token)match(input,75,FOLLOW_75_in_objectType5680); if (state.failed) return retval;
            // delphi.g:5613:19: (objHeritageGen+= objHeritage )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==17) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // delphi.g:5613:21: objHeritageGen+= objHeritage
                    {
                    pushFollow(FOLLOW_objHeritage_in_objectType5686);
                    objHeritageGen=objHeritage();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_objHeritageGen==null) list_objHeritageGen=new ArrayList();
                    list_objHeritageGen.add(objHeritageGen);


                    }
                    break;

            }

            // delphi.g:5613:51: (objFieldListGen+= objFieldList )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==ID||LA133_0==100) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // delphi.g:5613:53: objFieldListGen+= objFieldList
                    {
                    pushFollow(FOLLOW_objFieldList_in_objectType5694);
                    objFieldListGen=objFieldList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_objFieldListGen==null) list_objFieldListGen=new ArrayList();
                    list_objFieldListGen.add(objFieldListGen);


                    }
                    break;

            }

            // delphi.g:5613:85: (methodListGen+= methodList )?
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==39||(LA134_0>=124 && LA134_0<=125)||(LA134_0>=146 && LA134_0<=147)) ) {
                alt134=1;
            }
            switch (alt134) {
                case 1 :
                    // delphi.g:5613:87: methodListGen+= methodList
                    {
                    pushFollow(FOLLOW_methodList_in_objectType5702);
                    methodListGen=methodList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_methodListGen==null) list_methodListGen=new ArrayList();
                    list_methodListGen.add(methodListGen);


                    }
                    break;

            }

            TK_1=(Token)match(input,23,FOLLOW_23_in_objectType5709); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node objectTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		objectTypeReturnNode.setKind("objectType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		objectTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_objHeritageGen != null) {
              	        for(Iterator it = list_objHeritageGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.objHeritage_return r = (delphiParser.objHeritage_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("objHeritage");
              	            	objectTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_objFieldListGen != null) {
              	        for(Iterator it = list_objFieldListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.objFieldList_return r = (delphiParser.objFieldList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("objFieldList");
              	            	objectTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodListGen != null) {
              	        for(Iterator it = list_methodListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.methodList_return r = (delphiParser.methodList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodList");
              	            	objectTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		objectTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = objectTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, objectType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objectType"

    public static class objHeritage_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "objHeritage"
    // delphi.g:5663:1: objHeritage returns [Node returnNode] : TK_0= '(' qualIdGen+= qualId TK_1= ')' ;
    public final delphiParser.objHeritage_return objHeritage() throws RecognitionException {
        delphiParser.objHeritage_return retval = new delphiParser.objHeritage_return();
        retval.start = input.LT(1);
        int objHeritage_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_qualIdGen=null;
        RuleReturnScope qualIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // delphi.g:5664:1: (TK_0= '(' qualIdGen+= qualId TK_1= ')' )
            // delphi.g:5664:5: TK_0= '(' qualIdGen+= qualId TK_1= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_objHeritage5732); if (state.failed) return retval;
            pushFollow(FOLLOW_qualId_in_objHeritage5737);
            qualIdGen=qualId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qualIdGen==null) list_qualIdGen=new ArrayList();
            list_qualIdGen.add(qualIdGen);

            TK_1=(Token)match(input,18,FOLLOW_18_in_objHeritage5742); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node objHeritageReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		objHeritageReturnNode.setKind("objHeritage");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		objHeritageReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualIdGen != null) {
              	        for(Iterator it = list_qualIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.qualId_return r = (delphiParser.qualId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualId");
              	            	objHeritageReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		objHeritageReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = objHeritageReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, objHeritage_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objHeritage"

    public static class methodList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "methodList"
    // delphi.g:5694:1: methodList returns [Node returnNode] : (methodHeadingGen+= methodHeading (TK_0= ';' TK_1= 'virtual' )? (TK_2= ';' directiveGen+= directive )* ) TK_3= ';' ;
    public final delphiParser.methodList_return methodList() throws RecognitionException {
        delphiParser.methodList_return retval = new delphiParser.methodList_return();
        retval.start = input.LT(1);
        int methodList_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_methodHeadingGen=null;
        List list_directiveGen=null;
        RuleReturnScope methodHeadingGen = null;
        RuleReturnScope directiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // delphi.g:5695:1: ( (methodHeadingGen+= methodHeading (TK_0= ';' TK_1= 'virtual' )? (TK_2= ';' directiveGen+= directive )* ) TK_3= ';' )
            // delphi.g:5695:4: (methodHeadingGen+= methodHeading (TK_0= ';' TK_1= 'virtual' )? (TK_2= ';' directiveGen+= directive )* ) TK_3= ';'
            {
            // delphi.g:5695:4: (methodHeadingGen+= methodHeading (TK_0= ';' TK_1= 'virtual' )? (TK_2= ';' directiveGen+= directive )* )
            // delphi.g:5695:6: methodHeadingGen+= methodHeading (TK_0= ';' TK_1= 'virtual' )? (TK_2= ';' directiveGen+= directive )*
            {
            pushFollow(FOLLOW_methodHeading_in_methodList5766);
            methodHeadingGen=methodHeading();

            state._fsp--;
            if (state.failed) return retval;
            if (list_methodHeadingGen==null) list_methodHeadingGen=new ArrayList();
            list_methodHeadingGen.add(methodHeadingGen);

            // delphi.g:5695:38: (TK_0= ';' TK_1= 'virtual' )?
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==19) ) {
                int LA135_1 = input.LA(2);

                if ( (LA135_1==130) ) {
                    int LA135_2 = input.LA(3);

                    if ( (synpred226_delphi()) ) {
                        alt135=1;
                    }
                }
            }
            switch (alt135) {
                case 1 :
                    // delphi.g:5695:40: TK_0= ';' TK_1= 'virtual'
                    {
                    TK_0=(Token)match(input,19,FOLLOW_19_in_methodList5772); if (state.failed) return retval;
                    TK_1=(Token)match(input,130,FOLLOW_130_in_methodList5777); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:5695:67: (TK_2= ';' directiveGen+= directive )*
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( (LA136_0==19) ) {
                    int LA136_1 = input.LA(2);

                    if ( ((LA136_1>=127 && LA136_1<=145)) ) {
                        alt136=1;
                    }


                }


                switch (alt136) {
            	case 1 :
            	    // delphi.g:5695:69: TK_2= ';' directiveGen+= directive
            	    {
            	    TK_2=(Token)match(input,19,FOLLOW_19_in_methodList5785); if (state.failed) return retval;
            	    pushFollow(FOLLOW_directive_in_methodList5790);
            	    directiveGen=directive();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_directiveGen==null) list_directiveGen=new ArrayList();
            	    list_directiveGen.add(directiveGen);


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);


            }

            TK_3=(Token)match(input,19,FOLLOW_19_in_methodList5798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node methodListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodListReturnNode.setKind("methodList");
              	    // Create a CST Node
              		if(list_methodHeadingGen != null) {
              	        for(Iterator it = list_methodHeadingGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.methodHeading_return r = (delphiParser.methodHeading_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodHeading");
              	            	methodListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		methodListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		methodListReturnNode.getChildren().add(TK_1Leaf);
              	 	}

              		// Create a special CST Node for terminal directiveGen aggregation
              		if(list_directiveGen != null) {
              	    for(int pos = 0; pos < list_directiveGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		methodListReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_directiveGen != null) {		
              	    	delphiParser.directive_return r = (delphiParser.directive_return) list_directiveGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("directive");
              	    		methodListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		methodListReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, methodList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodList"

    public static class methodHeading_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "methodHeading"
    // delphi.g:5750:1: methodHeading returns [Node returnNode] : (procedureHeadingGen+= procedureHeading | functionHeadingGen+= functionHeading | constructorHeadingGen+= constructorHeading | destructorHeadingGen+= destructorHeading );
    public final delphiParser.methodHeading_return methodHeading() throws RecognitionException {
        delphiParser.methodHeading_return retval = new delphiParser.methodHeading_return();
        retval.start = input.LT(1);
        int methodHeading_StartIndex = input.index();
        List list_procedureHeadingGen=null;
        List list_functionHeadingGen=null;
        List list_constructorHeadingGen=null;
        List list_destructorHeadingGen=null;
        RuleReturnScope procedureHeadingGen = null;
        RuleReturnScope functionHeadingGen = null;
        RuleReturnScope constructorHeadingGen = null;
        RuleReturnScope destructorHeadingGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // delphi.g:5751:1: (procedureHeadingGen+= procedureHeading | functionHeadingGen+= functionHeading | constructorHeadingGen+= constructorHeading | destructorHeadingGen+= destructorHeading )
            int alt137=4;
            switch ( input.LA(1) ) {
            case 39:
                {
                int LA137_1 = input.LA(2);

                if ( (LA137_1==125) ) {
                    alt137=1;
                }
                else if ( (LA137_1==124) ) {
                    alt137=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 137, 1, input);

                    throw nvae;
                }
                }
                break;
            case 125:
                {
                alt137=1;
                }
                break;
            case 124:
                {
                alt137=2;
                }
                break;
            case 146:
                {
                alt137=3;
                }
                break;
            case 147:
                {
                alt137=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }

            switch (alt137) {
                case 1 :
                    // delphi.g:5751:5: procedureHeadingGen+= procedureHeading
                    {
                    pushFollow(FOLLOW_procedureHeading_in_methodHeading5821);
                    procedureHeadingGen=procedureHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_procedureHeadingGen==null) list_procedureHeadingGen=new ArrayList();
                    list_procedureHeadingGen.add(procedureHeadingGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node methodHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		methodHeadingReturnNode.setKind("methodHeading");
                      	    // Create a CST Node
                      		if(list_procedureHeadingGen != null) {
                      	        for(Iterator it = list_procedureHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.procedureHeading_return r = (delphiParser.procedureHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("procedureHeading");
                      	            	methodHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = methodHeadingReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:5769:5: functionHeadingGen+= functionHeading
                    {
                    pushFollow(FOLLOW_functionHeading_in_methodHeading5833);
                    functionHeadingGen=functionHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_functionHeadingGen==null) list_functionHeadingGen=new ArrayList();
                    list_functionHeadingGen.add(functionHeadingGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node methodHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		methodHeadingReturnNode.setKind("methodHeading");
                      	    // Create a CST Node
                      		if(list_functionHeadingGen != null) {
                      	        for(Iterator it = list_functionHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.functionHeading_return r = (delphiParser.functionHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("functionHeading");
                      	            	methodHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = methodHeadingReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:5787:5: constructorHeadingGen+= constructorHeading
                    {
                    pushFollow(FOLLOW_constructorHeading_in_methodHeading5845);
                    constructorHeadingGen=constructorHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constructorHeadingGen==null) list_constructorHeadingGen=new ArrayList();
                    list_constructorHeadingGen.add(constructorHeadingGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node methodHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		methodHeadingReturnNode.setKind("methodHeading");
                      	    // Create a CST Node
                      		if(list_constructorHeadingGen != null) {
                      	        for(Iterator it = list_constructorHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constructorHeading_return r = (delphiParser.constructorHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constructorHeading");
                      	            	methodHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = methodHeadingReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:5805:9: destructorHeadingGen+= destructorHeading
                    {
                    pushFollow(FOLLOW_destructorHeading_in_methodHeading5861);
                    destructorHeadingGen=destructorHeading();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_destructorHeadingGen==null) list_destructorHeadingGen=new ArrayList();
                    list_destructorHeadingGen.add(destructorHeadingGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node methodHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		methodHeadingReturnNode.setKind("methodHeading");
                      	    // Create a CST Node
                      		if(list_destructorHeadingGen != null) {
                      	        for(Iterator it = list_destructorHeadingGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.destructorHeading_return r = (delphiParser.destructorHeading_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("destructorHeading");
                      	            	methodHeadingReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = methodHeadingReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, methodHeading_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodHeading"

    public static class constructorHeading_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constructorHeading"
    // delphi.g:5825:1: constructorHeading returns [Node returnNode] : TK_0= 'constructor' identGen+= ident (formalParametersGen+= formalParameters )? ;
    public final delphiParser.constructorHeading_return constructorHeading() throws RecognitionException {
        delphiParser.constructorHeading_return retval = new delphiParser.constructorHeading_return();
        retval.start = input.LT(1);
        int constructorHeading_StartIndex = input.index();
        Token TK_0=null;
        List list_identGen=null;
        List list_formalParametersGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope formalParametersGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // delphi.g:5826:1: (TK_0= 'constructor' identGen+= ident (formalParametersGen+= formalParameters )? )
            // delphi.g:5826:5: TK_0= 'constructor' identGen+= ident (formalParametersGen+= formalParameters )?
            {
            TK_0=(Token)match(input,146,FOLLOW_146_in_constructorHeading5884); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_constructorHeading5889);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:5826:41: (formalParametersGen+= formalParameters )?
            int alt138=2;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==17) ) {
                alt138=1;
            }
            switch (alt138) {
                case 1 :
                    // delphi.g:5826:43: formalParametersGen+= formalParameters
                    {
                    pushFollow(FOLLOW_formalParameters_in_constructorHeading5895);
                    formalParametersGen=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
                    list_formalParametersGen.add(formalParametersGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constructorHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constructorHeadingReturnNode.setKind("constructorHeading");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		constructorHeadingReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	constructorHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.formalParameters_return r = (delphiParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	constructorHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constructorHeadingReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, constructorHeading_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorHeading"

    public static class destructorHeading_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "destructorHeading"
    // delphi.g:5861:1: destructorHeading returns [Node returnNode] : TK_0= 'destructor' identGen+= ident (formalParametersGen+= formalParameters )? ;
    public final delphiParser.destructorHeading_return destructorHeading() throws RecognitionException {
        delphiParser.destructorHeading_return retval = new delphiParser.destructorHeading_return();
        retval.start = input.LT(1);
        int destructorHeading_StartIndex = input.index();
        Token TK_0=null;
        List list_identGen=null;
        List list_formalParametersGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope formalParametersGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // delphi.g:5862:1: (TK_0= 'destructor' identGen+= ident (formalParametersGen+= formalParameters )? )
            // delphi.g:5862:5: TK_0= 'destructor' identGen+= ident (formalParametersGen+= formalParameters )?
            {
            TK_0=(Token)match(input,147,FOLLOW_147_in_destructorHeading5920); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_destructorHeading5925);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:5862:40: (formalParametersGen+= formalParameters )?
            int alt139=2;
            int LA139_0 = input.LA(1);

            if ( (LA139_0==17) ) {
                alt139=1;
            }
            switch (alt139) {
                case 1 :
                    // delphi.g:5862:42: formalParametersGen+= formalParameters
                    {
                    pushFollow(FOLLOW_formalParameters_in_destructorHeading5931);
                    formalParametersGen=formalParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
                    list_formalParametersGen.add(formalParametersGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node destructorHeadingReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		destructorHeadingReturnNode.setKind("destructorHeading");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		destructorHeadingReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	destructorHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.formalParameters_return r = (delphiParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	destructorHeadingReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = destructorHeadingReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, destructorHeading_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "destructorHeading"

    public static class objFieldList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "objFieldList"
    // delphi.g:5897:1: objFieldList returns [Node returnNode] : (identListGen+= identList TK_0= ':' typeGen+= type ) TK_1= ';' ;
    public final delphiParser.objFieldList_return objFieldList() throws RecognitionException {
        delphiParser.objFieldList_return retval = new delphiParser.objFieldList_return();
        retval.start = input.LT(1);
        int objFieldList_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identListGen=null;
        List list_typeGen=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope typeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // delphi.g:5898:1: ( (identListGen+= identList TK_0= ':' typeGen+= type ) TK_1= ';' )
            // delphi.g:5898:4: (identListGen+= identList TK_0= ':' typeGen+= type ) TK_1= ';'
            {
            // delphi.g:5898:4: (identListGen+= identList TK_0= ':' typeGen+= type )
            // delphi.g:5898:6: identListGen+= identList TK_0= ':' typeGen+= type
            {
            pushFollow(FOLLOW_identList_in_objFieldList5957);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_0=(Token)match(input,37,FOLLOW_37_in_objFieldList5962); if (state.failed) return retval;
            pushFollow(FOLLOW_type_in_objFieldList5967);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen);


            }

            TK_1=(Token)match(input,19,FOLLOW_19_in_objFieldList5973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node objFieldListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		objFieldListReturnNode.setKind("objFieldList");
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	objFieldListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		objFieldListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.type_return r = (delphiParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	objFieldListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		objFieldListReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = objFieldListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, objFieldList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "objFieldList"

    public static class initSection_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "initSection"
    // delphi.g:5938:1: initSection returns [Node returnNode] : (TK_0= 'initialization' stmtListGen+= stmtList (TK_1= 'finalization' stmtListGen_1+= stmtList )? TK_2= 'end' | TK_0= 'begin' stmtListGen+= stmtList TK_1= 'end' | TK_0= 'end' );
    public final delphiParser.initSection_return initSection() throws RecognitionException {
        delphiParser.initSection_return retval = new delphiParser.initSection_return();
        retval.start = input.LT(1);
        int initSection_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_stmtListGen=null;
        List list_stmtListGen_1=null;
        RuleReturnScope stmtListGen = null;
        RuleReturnScope stmtListGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // delphi.g:5939:1: (TK_0= 'initialization' stmtListGen+= stmtList (TK_1= 'finalization' stmtListGen_1+= stmtList )? TK_2= 'end' | TK_0= 'begin' stmtListGen+= stmtList TK_1= 'end' | TK_0= 'end' )
            int alt141=3;
            switch ( input.LA(1) ) {
            case 148:
                {
                alt141=1;
                }
                break;
            case 104:
                {
                alt141=2;
                }
                break;
            case 23:
                {
                alt141=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);

                throw nvae;
            }

            switch (alt141) {
                case 1 :
                    // delphi.g:5939:5: TK_0= 'initialization' stmtListGen+= stmtList (TK_1= 'finalization' stmtListGen_1+= stmtList )? TK_2= 'end'
                    {
                    TK_0=(Token)match(input,148,FOLLOW_148_in_initSection5996); if (state.failed) return retval;
                    pushFollow(FOLLOW_stmtList_in_initSection6001);
                    stmtListGen=stmtList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
                    list_stmtListGen.add(stmtListGen);

                    // delphi.g:5939:50: (TK_1= 'finalization' stmtListGen_1+= stmtList )?
                    int alt140=2;
                    int LA140_0 = input.LA(1);

                    if ( (LA140_0==149) ) {
                        alt140=1;
                    }
                    switch (alt140) {
                        case 1 :
                            // delphi.g:5939:52: TK_1= 'finalization' stmtListGen_1+= stmtList
                            {
                            TK_1=(Token)match(input,149,FOLLOW_149_in_initSection6007); if (state.failed) return retval;
                            pushFollow(FOLLOW_stmtList_in_initSection6012);
                            stmtListGen_1=stmtList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_stmtListGen_1==null) list_stmtListGen_1=new ArrayList();
                            list_stmtListGen_1.add(stmtListGen_1);


                            }
                            break;

                    }

                    TK_2=(Token)match(input,23,FOLLOW_23_in_initSection6019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initSectionReturnNode.setKind("initSection");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		initSectionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_stmtListGen != null) {
                      	        for(Iterator it = list_stmtListGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("stmtList");
                      	            	initSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		initSectionReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_stmtListGen_1 != null) {
                      	        for(Iterator it = list_stmtListGen_1.iterator(); it.hasNext(); )  { 
                      	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("stmtList");
                      	            	initSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		initSectionReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:5982:9: TK_0= 'begin' stmtListGen+= stmtList TK_1= 'end'
                    {
                    TK_0=(Token)match(input,104,FOLLOW_104_in_initSection6035); if (state.failed) return retval;
                    pushFollow(FOLLOW_stmtList_in_initSection6040);
                    stmtListGen=stmtList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
                    list_stmtListGen.add(stmtListGen);

                    TK_1=(Token)match(input,23,FOLLOW_23_in_initSection6045); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initSectionReturnNode.setKind("initSection");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		initSectionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_stmtListGen != null) {
                      	        for(Iterator it = list_stmtListGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.stmtList_return r = (delphiParser.stmtList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("stmtList");
                      	            	initSectionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		initSectionReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initSectionReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:6010:9: TK_0= 'end'
                    {
                    TK_0=(Token)match(input,23,FOLLOW_23_in_initSection6061); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node initSectionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		initSectionReturnNode.setKind("initSection");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		initSectionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = initSectionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, initSection_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "initSection"

    public static class classType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classType"
    // delphi.g:6025:1: classType returns [Node returnNode] : TK_0= 'class' (classHeritageGen+= classHeritage )? (classVisibilityGen+= classVisibility )? (classFieldListGen+= classFieldList )? (classMethodListGen+= classMethodList )? (classPropertyListGen+= classPropertyList )? TK_1= 'end' ;
    public final delphiParser.classType_return classType() throws RecognitionException {
        delphiParser.classType_return retval = new delphiParser.classType_return();
        retval.start = input.LT(1);
        int classType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_classHeritageGen=null;
        List list_classVisibilityGen=null;
        List list_classFieldListGen=null;
        List list_classMethodListGen=null;
        List list_classPropertyListGen=null;
        RuleReturnScope classHeritageGen = null;
        RuleReturnScope classVisibilityGen = null;
        RuleReturnScope classFieldListGen = null;
        RuleReturnScope classMethodListGen = null;
        RuleReturnScope classPropertyListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // delphi.g:6026:1: (TK_0= 'class' (classHeritageGen+= classHeritage )? (classVisibilityGen+= classVisibility )? (classFieldListGen+= classFieldList )? (classMethodListGen+= classMethodList )? (classPropertyListGen+= classPropertyList )? TK_1= 'end' )
            // delphi.g:6026:5: TK_0= 'class' (classHeritageGen+= classHeritage )? (classVisibilityGen+= classVisibility )? (classFieldListGen+= classFieldList )? (classMethodListGen+= classMethodList )? (classPropertyListGen+= classPropertyList )? TK_1= 'end'
            {
            TK_0=(Token)match(input,39,FOLLOW_39_in_classType6084); if (state.failed) return retval;
            // delphi.g:6026:18: (classHeritageGen+= classHeritage )?
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==17) ) {
                alt142=1;
            }
            switch (alt142) {
                case 1 :
                    // delphi.g:6026:20: classHeritageGen+= classHeritage
                    {
                    pushFollow(FOLLOW_classHeritage_in_classType6090);
                    classHeritageGen=classHeritage();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classHeritageGen==null) list_classHeritageGen=new ArrayList();
                    list_classHeritageGen.add(classHeritageGen);


                    }
                    break;

            }

            // delphi.g:6026:54: (classVisibilityGen+= classVisibility )?
            int alt143=2;
            switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA143_1 = input.LA(2);

                    if ( (synpred237_delphi()) ) {
                        alt143=1;
                    }
                    }
                    break;
                case 151:
                    {
                    int LA143_2 = input.LA(2);

                    if ( (synpred237_delphi()) ) {
                        alt143=1;
                    }
                    }
                    break;
                case 152:
                    {
                    int LA143_3 = input.LA(2);

                    if ( (synpred237_delphi()) ) {
                        alt143=1;
                    }
                    }
                    break;
                case 153:
                    {
                    int LA143_4 = input.LA(2);

                    if ( (synpred237_delphi()) ) {
                        alt143=1;
                    }
                    }
                    break;
            }

            switch (alt143) {
                case 1 :
                    // delphi.g:6026:56: classVisibilityGen+= classVisibility
                    {
                    pushFollow(FOLLOW_classVisibility_in_classType6098);
                    classVisibilityGen=classVisibility();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
                    list_classVisibilityGen.add(classVisibilityGen);


                    }
                    break;

            }

            // delphi.g:6026:94: (classFieldListGen+= classFieldList )?
            int alt144=2;
            switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA144_1 = input.LA(2);

                    if ( (LA144_1==ID||LA144_1==100) ) {
                        alt144=1;
                    }
                    }
                    break;
                case 151:
                    {
                    int LA144_2 = input.LA(2);

                    if ( (LA144_2==ID||LA144_2==100) ) {
                        alt144=1;
                    }
                    }
                    break;
                case 152:
                    {
                    int LA144_3 = input.LA(2);

                    if ( (LA144_3==ID||LA144_3==100) ) {
                        alt144=1;
                    }
                    }
                    break;
                case 153:
                    {
                    int LA144_4 = input.LA(2);

                    if ( (LA144_4==ID||LA144_4==100) ) {
                        alt144=1;
                    }
                    }
                    break;
                case ID:
                case 100:
                    {
                    alt144=1;
                    }
                    break;
            }

            switch (alt144) {
                case 1 :
                    // delphi.g:6026:96: classFieldListGen+= classFieldList
                    {
                    pushFollow(FOLLOW_classFieldList_in_classType6106);
                    classFieldListGen=classFieldList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classFieldListGen==null) list_classFieldListGen=new ArrayList();
                    list_classFieldListGen.add(classFieldListGen);


                    }
                    break;

            }

            // delphi.g:6026:132: (classMethodListGen+= classMethodList )?
            int alt145=2;
            switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA145_1 = input.LA(2);

                    if ( (LA145_1==39||(LA145_1>=124 && LA145_1<=125)||(LA145_1>=146 && LA145_1<=147)) ) {
                        alt145=1;
                    }
                    }
                    break;
                case 151:
                    {
                    int LA145_2 = input.LA(2);

                    if ( (LA145_2==39||(LA145_2>=124 && LA145_2<=125)||(LA145_2>=146 && LA145_2<=147)) ) {
                        alt145=1;
                    }
                    }
                    break;
                case 152:
                    {
                    int LA145_3 = input.LA(2);

                    if ( (LA145_3==39||(LA145_3>=124 && LA145_3<=125)||(LA145_3>=146 && LA145_3<=147)) ) {
                        alt145=1;
                    }
                    }
                    break;
                case 153:
                    {
                    int LA145_4 = input.LA(2);

                    if ( (LA145_4==39||(LA145_4>=124 && LA145_4<=125)||(LA145_4>=146 && LA145_4<=147)) ) {
                        alt145=1;
                    }
                    }
                    break;
                case 39:
                case 124:
                case 125:
                case 146:
                case 147:
                    {
                    alt145=1;
                    }
                    break;
            }

            switch (alt145) {
                case 1 :
                    // delphi.g:6026:134: classMethodListGen+= classMethodList
                    {
                    pushFollow(FOLLOW_classMethodList_in_classType6114);
                    classMethodListGen=classMethodList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classMethodListGen==null) list_classMethodListGen=new ArrayList();
                    list_classMethodListGen.add(classMethodListGen);


                    }
                    break;

            }

            // delphi.g:6026:172: (classPropertyListGen+= classPropertyList )?
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( ((LA146_0>=150 && LA146_0<=154)) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    // delphi.g:6026:174: classPropertyListGen+= classPropertyList
                    {
                    pushFollow(FOLLOW_classPropertyList_in_classType6122);
                    classPropertyListGen=classPropertyList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classPropertyListGen==null) list_classPropertyListGen=new ArrayList();
                    list_classPropertyListGen.add(classPropertyListGen);


                    }
                    break;

            }

            TK_1=(Token)match(input,23,FOLLOW_23_in_classType6129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classTypeReturnNode.setKind("classType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		classTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_classHeritageGen != null) {
              	        for(Iterator it = list_classHeritageGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classHeritage_return r = (delphiParser.classHeritage_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classHeritage");
              	            	classTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classVisibilityGen != null) {
              	        for(Iterator it = list_classVisibilityGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classVisibility_return r = (delphiParser.classVisibility_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classVisibility");
              	            	classTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classFieldListGen != null) {
              	        for(Iterator it = list_classFieldListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classFieldList_return r = (delphiParser.classFieldList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classFieldList");
              	            	classTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classMethodListGen != null) {
              	        for(Iterator it = list_classMethodListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classMethodList_return r = (delphiParser.classMethodList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classMethodList");
              	            	classTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classPropertyListGen != null) {
              	        for(Iterator it = list_classPropertyListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classPropertyList_return r = (delphiParser.classPropertyList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classPropertyList");
              	            	classTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		classTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, classType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classType"

    public static class classHeritage_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classHeritage"
    // delphi.g:6096:1: classHeritage returns [Node returnNode] : TK_0= '(' identListGen+= identList TK_1= ')' ;
    public final delphiParser.classHeritage_return classHeritage() throws RecognitionException {
        delphiParser.classHeritage_return retval = new delphiParser.classHeritage_return();
        retval.start = input.LT(1);
        int classHeritage_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identListGen=null;
        RuleReturnScope identListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // delphi.g:6097:1: (TK_0= '(' identListGen+= identList TK_1= ')' )
            // delphi.g:6097:5: TK_0= '(' identListGen+= identList TK_1= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_classHeritage6152); if (state.failed) return retval;
            pushFollow(FOLLOW_identList_in_classHeritage6157);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_1=(Token)match(input,18,FOLLOW_18_in_classHeritage6162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classHeritageReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classHeritageReturnNode.setKind("classHeritage");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		classHeritageReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	classHeritageReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		classHeritageReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classHeritageReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, classHeritage_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classHeritage"

    public static class classVisibility_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classVisibility"
    // delphi.g:6127:1: classVisibility returns [Node returnNode] : (TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'published' );
    public final delphiParser.classVisibility_return classVisibility() throws RecognitionException {
        delphiParser.classVisibility_return retval = new delphiParser.classVisibility_return();
        retval.start = input.LT(1);
        int classVisibility_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // delphi.g:6128:1: (TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'published' )
            int alt147=4;
            switch ( input.LA(1) ) {
            case 150:
                {
                alt147=1;
                }
                break;
            case 151:
                {
                alt147=2;
                }
                break;
            case 152:
                {
                alt147=3;
                }
                break;
            case 153:
                {
                alt147=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }

            switch (alt147) {
                case 1 :
                    // delphi.g:6128:5: TK_0= 'public'
                    {
                    TK_0=(Token)match(input,150,FOLLOW_150_in_classVisibility6185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classVisibilityReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classVisibilityReturnNode.setKind("classVisibility");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		classVisibilityReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classVisibilityReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:6141:6: TK_0= 'protected'
                    {
                    TK_0=(Token)match(input,151,FOLLOW_151_in_classVisibility6199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classVisibilityReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classVisibilityReturnNode.setKind("classVisibility");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		classVisibilityReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classVisibilityReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:6154:6: TK_0= 'private'
                    {
                    TK_0=(Token)match(input,152,FOLLOW_152_in_classVisibility6213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classVisibilityReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classVisibilityReturnNode.setKind("classVisibility");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		classVisibilityReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classVisibilityReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // delphi.g:6167:6: TK_0= 'published'
                    {
                    TK_0=(Token)match(input,153,FOLLOW_153_in_classVisibility6227); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classVisibilityReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classVisibilityReturnNode.setKind("classVisibility");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		classVisibilityReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classVisibilityReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, classVisibility_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classVisibility"

    public static class classFieldList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classFieldList"
    // delphi.g:6182:1: classFieldList returns [Node returnNode] : (classFieldGen+= classField )+ ;
    public final delphiParser.classFieldList_return classFieldList() throws RecognitionException {
        delphiParser.classFieldList_return retval = new delphiParser.classFieldList_return();
        retval.start = input.LT(1);
        int classFieldList_StartIndex = input.index();
        List list_classFieldGen=null;
        RuleReturnScope classFieldGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // delphi.g:6183:1: ( (classFieldGen+= classField )+ )
            // delphi.g:6183:5: (classFieldGen+= classField )+
            {
            // delphi.g:6183:18: (classFieldGen+= classField )+
            int cnt148=0;
            loop148:
            do {
                int alt148=2;
                switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA148_1 = input.LA(2);

                    if ( (LA148_1==ID||LA148_1==100) ) {
                        alt148=1;
                    }


                    }
                    break;
                case 151:
                    {
                    int LA148_2 = input.LA(2);

                    if ( (LA148_2==ID||LA148_2==100) ) {
                        alt148=1;
                    }


                    }
                    break;
                case 152:
                    {
                    int LA148_3 = input.LA(2);

                    if ( (LA148_3==ID||LA148_3==100) ) {
                        alt148=1;
                    }


                    }
                    break;
                case 153:
                    {
                    int LA148_4 = input.LA(2);

                    if ( (LA148_4==ID||LA148_4==100) ) {
                        alt148=1;
                    }


                    }
                    break;
                case ID:
                case 100:
                    {
                    alt148=1;
                    }
                    break;

                }

                switch (alt148) {
            	case 1 :
            	    // delphi.g:0:0: classFieldGen+= classField
            	    {
            	    pushFollow(FOLLOW_classField_in_classFieldList6250);
            	    classFieldGen=classField();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_classFieldGen==null) list_classFieldGen=new ArrayList();
            	    list_classFieldGen.add(classFieldGen);


            	    }
            	    break;

            	default :
            	    if ( cnt148 >= 1 ) break loop148;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(148, input);
                        throw eee;
                }
                cnt148++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classFieldListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classFieldListReturnNode.setKind("classFieldList");
              	    // Create a CST Node
              		if(list_classFieldGen != null) {
              	        for(Iterator it = list_classFieldGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classField_return r = (delphiParser.classField_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classField");
              	            	classFieldListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classFieldListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, classFieldList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classFieldList"

    public static class classField_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classField"
    // delphi.g:6203:1: classField returns [Node returnNode] : (classVisibilityGen+= classVisibility )? objFieldListGen+= objFieldList ;
    public final delphiParser.classField_return classField() throws RecognitionException {
        delphiParser.classField_return retval = new delphiParser.classField_return();
        retval.start = input.LT(1);
        int classField_StartIndex = input.index();
        List list_classVisibilityGen=null;
        List list_objFieldListGen=null;
        RuleReturnScope classVisibilityGen = null;
        RuleReturnScope objFieldListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // delphi.g:6204:1: ( (classVisibilityGen+= classVisibility )? objFieldListGen+= objFieldList )
            // delphi.g:6204:5: (classVisibilityGen+= classVisibility )? objFieldListGen+= objFieldList
            {
            // delphi.g:6204:23: (classVisibilityGen+= classVisibility )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( ((LA149_0>=150 && LA149_0<=153)) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // delphi.g:0:0: classVisibilityGen+= classVisibility
                    {
                    pushFollow(FOLLOW_classVisibility_in_classField6274);
                    classVisibilityGen=classVisibility();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
                    list_classVisibilityGen.add(classVisibilityGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_objFieldList_in_classField6280);
            objFieldListGen=objFieldList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_objFieldListGen==null) list_objFieldListGen=new ArrayList();
            list_objFieldListGen.add(objFieldListGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classFieldReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classFieldReturnNode.setKind("classField");
              	    // Create a CST Node
              		if(list_classVisibilityGen != null) {
              	        for(Iterator it = list_classVisibilityGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classVisibility_return r = (delphiParser.classVisibility_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classVisibility");
              	            	classFieldReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_objFieldListGen != null) {
              	        for(Iterator it = list_objFieldListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.objFieldList_return r = (delphiParser.objFieldList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("objFieldList");
              	            	classFieldReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classFieldReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, classField_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classField"

    public static class classMethodList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classMethodList"
    // delphi.g:6234:1: classMethodList returns [Node returnNode] : (classMethodGen+= classMethod )+ ;
    public final delphiParser.classMethodList_return classMethodList() throws RecognitionException {
        delphiParser.classMethodList_return retval = new delphiParser.classMethodList_return();
        retval.start = input.LT(1);
        int classMethodList_StartIndex = input.index();
        List list_classMethodGen=null;
        RuleReturnScope classMethodGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // delphi.g:6235:1: ( (classMethodGen+= classMethod )+ )
            // delphi.g:6235:5: (classMethodGen+= classMethod )+
            {
            // delphi.g:6235:19: (classMethodGen+= classMethod )+
            int cnt150=0;
            loop150:
            do {
                int alt150=2;
                switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA150_1 = input.LA(2);

                    if ( (LA150_1==39||(LA150_1>=124 && LA150_1<=125)||(LA150_1>=146 && LA150_1<=147)) ) {
                        alt150=1;
                    }


                    }
                    break;
                case 151:
                    {
                    int LA150_2 = input.LA(2);

                    if ( (LA150_2==39||(LA150_2>=124 && LA150_2<=125)||(LA150_2>=146 && LA150_2<=147)) ) {
                        alt150=1;
                    }


                    }
                    break;
                case 152:
                    {
                    int LA150_3 = input.LA(2);

                    if ( (LA150_3==39||(LA150_3>=124 && LA150_3<=125)||(LA150_3>=146 && LA150_3<=147)) ) {
                        alt150=1;
                    }


                    }
                    break;
                case 153:
                    {
                    int LA150_4 = input.LA(2);

                    if ( (LA150_4==39||(LA150_4>=124 && LA150_4<=125)||(LA150_4>=146 && LA150_4<=147)) ) {
                        alt150=1;
                    }


                    }
                    break;
                case 39:
                case 124:
                case 125:
                case 146:
                case 147:
                    {
                    alt150=1;
                    }
                    break;

                }

                switch (alt150) {
            	case 1 :
            	    // delphi.g:0:0: classMethodGen+= classMethod
            	    {
            	    pushFollow(FOLLOW_classMethod_in_classMethodList6303);
            	    classMethodGen=classMethod();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_classMethodGen==null) list_classMethodGen=new ArrayList();
            	    list_classMethodGen.add(classMethodGen);


            	    }
            	    break;

            	default :
            	    if ( cnt150 >= 1 ) break loop150;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(150, input);
                        throw eee;
                }
                cnt150++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classMethodListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classMethodListReturnNode.setKind("classMethodList");
              	    // Create a CST Node
              		if(list_classMethodGen != null) {
              	        for(Iterator it = list_classMethodGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classMethod_return r = (delphiParser.classMethod_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classMethod");
              	            	classMethodListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classMethodListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, classMethodList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classMethodList"

    public static class classMethod_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classMethod"
    // delphi.g:6255:1: classMethod returns [Node returnNode] : (classVisibilityGen+= classVisibility )? methodListGen+= methodList ;
    public final delphiParser.classMethod_return classMethod() throws RecognitionException {
        delphiParser.classMethod_return retval = new delphiParser.classMethod_return();
        retval.start = input.LT(1);
        int classMethod_StartIndex = input.index();
        List list_classVisibilityGen=null;
        List list_methodListGen=null;
        RuleReturnScope classVisibilityGen = null;
        RuleReturnScope methodListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // delphi.g:6256:1: ( (classVisibilityGen+= classVisibility )? methodListGen+= methodList )
            // delphi.g:6256:4: (classVisibilityGen+= classVisibility )? methodListGen+= methodList
            {
            // delphi.g:6256:22: (classVisibilityGen+= classVisibility )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( ((LA151_0>=150 && LA151_0<=153)) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // delphi.g:0:0: classVisibilityGen+= classVisibility
                    {
                    pushFollow(FOLLOW_classVisibility_in_classMethod6327);
                    classVisibilityGen=classVisibility();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
                    list_classVisibilityGen.add(classVisibilityGen);


                    }
                    break;

            }

            pushFollow(FOLLOW_methodList_in_classMethod6333);
            methodListGen=methodList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_methodListGen==null) list_methodListGen=new ArrayList();
            list_methodListGen.add(methodListGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classMethodReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classMethodReturnNode.setKind("classMethod");
              	    // Create a CST Node
              		if(list_classVisibilityGen != null) {
              	        for(Iterator it = list_classVisibilityGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classVisibility_return r = (delphiParser.classVisibility_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classVisibility");
              	            	classMethodReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodListGen != null) {
              	        for(Iterator it = list_methodListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.methodList_return r = (delphiParser.methodList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodList");
              	            	classMethodReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classMethodReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, classMethod_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classMethod"

    public static class classPropertyList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classPropertyList"
    // delphi.g:6286:1: classPropertyList returns [Node returnNode] : (classPropertyGen+= classProperty )+ ;
    public final delphiParser.classPropertyList_return classPropertyList() throws RecognitionException {
        delphiParser.classPropertyList_return retval = new delphiParser.classPropertyList_return();
        retval.start = input.LT(1);
        int classPropertyList_StartIndex = input.index();
        List list_classPropertyGen=null;
        RuleReturnScope classPropertyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // delphi.g:6287:1: ( (classPropertyGen+= classProperty )+ )
            // delphi.g:6287:5: (classPropertyGen+= classProperty )+
            {
            // delphi.g:6287:21: (classPropertyGen+= classProperty )+
            int cnt152=0;
            loop152:
            do {
                int alt152=2;
                switch ( input.LA(1) ) {
                case 150:
                    {
                    int LA152_2 = input.LA(2);

                    if ( (synpred248_delphi()) ) {
                        alt152=1;
                    }


                    }
                    break;
                case 151:
                    {
                    int LA152_3 = input.LA(2);

                    if ( (synpred248_delphi()) ) {
                        alt152=1;
                    }


                    }
                    break;
                case 152:
                    {
                    int LA152_4 = input.LA(2);

                    if ( (synpred248_delphi()) ) {
                        alt152=1;
                    }


                    }
                    break;
                case 153:
                    {
                    int LA152_5 = input.LA(2);

                    if ( (synpred248_delphi()) ) {
                        alt152=1;
                    }


                    }
                    break;
                case 154:
                    {
                    int LA152_6 = input.LA(2);

                    if ( (synpred248_delphi()) ) {
                        alt152=1;
                    }


                    }
                    break;

                }

                switch (alt152) {
            	case 1 :
            	    // delphi.g:0:0: classPropertyGen+= classProperty
            	    {
            	    pushFollow(FOLLOW_classProperty_in_classPropertyList6356);
            	    classPropertyGen=classProperty();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_classPropertyGen==null) list_classPropertyGen=new ArrayList();
            	    list_classPropertyGen.add(classPropertyGen);


            	    }
            	    break;

            	default :
            	    if ( cnt152 >= 1 ) break loop152;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(152, input);
                        throw eee;
                }
                cnt152++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classPropertyListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classPropertyListReturnNode.setKind("classPropertyList");
              	    // Create a CST Node
              		if(list_classPropertyGen != null) {
              	        for(Iterator it = list_classPropertyGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classProperty_return r = (delphiParser.classProperty_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classProperty");
              	            	classPropertyListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classPropertyListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, classPropertyList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classPropertyList"

    public static class classProperty_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classProperty"
    // delphi.g:6307:1: classProperty returns [Node returnNode] : (classVisibilityGen+= classVisibility | (classVisibilityGen+= classVisibility )? propertyListGen+= propertyList );
    public final delphiParser.classProperty_return classProperty() throws RecognitionException {
        delphiParser.classProperty_return retval = new delphiParser.classProperty_return();
        retval.start = input.LT(1);
        int classProperty_StartIndex = input.index();
        List list_classVisibilityGen=null;
        List list_propertyListGen=null;
        RuleReturnScope classVisibilityGen = null;
        RuleReturnScope propertyListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // delphi.g:6308:1: (classVisibilityGen+= classVisibility | (classVisibilityGen+= classVisibility )? propertyListGen+= propertyList )
            int alt154=2;
            switch ( input.LA(1) ) {
            case 150:
                {
                int LA154_1 = input.LA(2);

                if ( (synpred249_delphi()) ) {
                    alt154=1;
                }
                else if ( (true) ) {
                    alt154=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 1, input);

                    throw nvae;
                }
                }
                break;
            case 151:
                {
                int LA154_2 = input.LA(2);

                if ( (synpred249_delphi()) ) {
                    alt154=1;
                }
                else if ( (true) ) {
                    alt154=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 2, input);

                    throw nvae;
                }
                }
                break;
            case 152:
                {
                int LA154_3 = input.LA(2);

                if ( (synpred249_delphi()) ) {
                    alt154=1;
                }
                else if ( (true) ) {
                    alt154=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 3, input);

                    throw nvae;
                }
                }
                break;
            case 153:
                {
                int LA154_4 = input.LA(2);

                if ( (synpred249_delphi()) ) {
                    alt154=1;
                }
                else if ( (true) ) {
                    alt154=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 154, 4, input);

                    throw nvae;
                }
                }
                break;
            case 154:
                {
                alt154=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 154, 0, input);

                throw nvae;
            }

            switch (alt154) {
                case 1 :
                    // delphi.g:6308:4: classVisibilityGen+= classVisibility
                    {
                    pushFollow(FOLLOW_classVisibility_in_classProperty6380);
                    classVisibilityGen=classVisibility();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
                    list_classVisibilityGen.add(classVisibilityGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classPropertyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classPropertyReturnNode.setKind("classProperty");
                      	    // Create a CST Node
                      		if(list_classVisibilityGen != null) {
                      	        for(Iterator it = list_classVisibilityGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.classVisibility_return r = (delphiParser.classVisibility_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classVisibility");
                      	            	classPropertyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classPropertyReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:6326:5: (classVisibilityGen+= classVisibility )? propertyListGen+= propertyList
                    {
                    // delphi.g:6326:23: (classVisibilityGen+= classVisibility )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( ((LA153_0>=150 && LA153_0<=153)) ) {
                        alt153=1;
                    }
                    switch (alt153) {
                        case 1 :
                            // delphi.g:0:0: classVisibilityGen+= classVisibility
                            {
                            pushFollow(FOLLOW_classVisibility_in_classProperty6393);
                            classVisibilityGen=classVisibility();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
                            list_classVisibilityGen.add(classVisibilityGen);


                            }
                            break;

                    }

                    pushFollow(FOLLOW_propertyList_in_classProperty6399);
                    propertyListGen=propertyList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_propertyListGen==null) list_propertyListGen=new ArrayList();
                    list_propertyListGen.add(propertyListGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classPropertyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classPropertyReturnNode.setKind("classProperty");
                      	    // Create a CST Node
                      		if(list_classVisibilityGen != null) {
                      	        for(Iterator it = list_classVisibilityGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.classVisibility_return r = (delphiParser.classVisibility_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classVisibility");
                      	            	classPropertyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_propertyListGen != null) {
                      	        for(Iterator it = list_propertyListGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.propertyList_return r = (delphiParser.propertyList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("propertyList");
                      	            	classPropertyReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classPropertyReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, classProperty_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classProperty"

    public static class propertyList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "propertyList"
    // delphi.g:6356:1: propertyList returns [Node returnNode] : TK_0= 'property' identGen+= ident (propertyInterfaceGen+= propertyInterface )? (propertySpecifiersGen+= propertySpecifiers )? (portabilityDirectiveGen+= portabilityDirective )? TK_1= ';' ;
    public final delphiParser.propertyList_return propertyList() throws RecognitionException {
        delphiParser.propertyList_return retval = new delphiParser.propertyList_return();
        retval.start = input.LT(1);
        int propertyList_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identGen=null;
        List list_propertyInterfaceGen=null;
        List list_propertySpecifiersGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope propertyInterfaceGen = null;
        RuleReturnScope propertySpecifiersGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // delphi.g:6357:1: (TK_0= 'property' identGen+= ident (propertyInterfaceGen+= propertyInterface )? (propertySpecifiersGen+= propertySpecifiers )? (portabilityDirectiveGen+= portabilityDirective )? TK_1= ';' )
            // delphi.g:6357:5: TK_0= 'property' identGen+= ident (propertyInterfaceGen+= propertyInterface )? (propertySpecifiersGen+= propertySpecifiers )? (portabilityDirectiveGen+= portabilityDirective )? TK_1= ';'
            {
            TK_0=(Token)match(input,154,FOLLOW_154_in_propertyList6423); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_propertyList6428);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:6357:38: (propertyInterfaceGen+= propertyInterface )?
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==37||LA155_0==68) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    // delphi.g:6357:40: propertyInterfaceGen+= propertyInterface
                    {
                    pushFollow(FOLLOW_propertyInterface_in_propertyList6434);
                    propertyInterfaceGen=propertyInterface();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_propertyInterfaceGen==null) list_propertyInterfaceGen=new ArrayList();
                    list_propertyInterfaceGen.add(propertyInterfaceGen);


                    }
                    break;

            }

            // delphi.g:6357:82: (propertySpecifiersGen+= propertySpecifiers )?
            int alt156=2;
            switch ( input.LA(1) ) {
                case 31:
                case 155:
                case 156:
                case 157:
                case 158:
                case 159:
                case 160:
                    {
                    alt156=1;
                    }
                    break;
                case 26:
                    {
                    int LA156_2 = input.LA(2);

                    if ( (synpred252_delphi()) ) {
                        alt156=1;
                    }
                    }
                    break;
                case 27:
                    {
                    int LA156_3 = input.LA(2);

                    if ( (synpred252_delphi()) ) {
                        alt156=1;
                    }
                    }
                    break;
                case 24:
                    {
                    int LA156_4 = input.LA(2);

                    if ( (synpred252_delphi()) ) {
                        alt156=1;
                    }
                    }
                    break;
                case 19:
                    {
                    int LA156_5 = input.LA(2);

                    if ( (synpred252_delphi()) ) {
                        alt156=1;
                    }
                    }
                    break;
            }

            switch (alt156) {
                case 1 :
                    // delphi.g:6357:84: propertySpecifiersGen+= propertySpecifiers
                    {
                    pushFollow(FOLLOW_propertySpecifiers_in_propertyList6442);
                    propertySpecifiersGen=propertySpecifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_propertySpecifiersGen==null) list_propertySpecifiersGen=new ArrayList();
                    list_propertySpecifiersGen.add(propertySpecifiersGen);


                    }
                    break;

            }

            // delphi.g:6357:128: (portabilityDirectiveGen+= portabilityDirective )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==24||(LA157_0>=26 && LA157_0<=27)) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // delphi.g:6357:130: portabilityDirectiveGen+= portabilityDirective
                    {
                    pushFollow(FOLLOW_portabilityDirective_in_propertyList6450);
                    portabilityDirectiveGen=portabilityDirective();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                    list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                    }
                    break;

            }

            TK_1=(Token)match(input,19,FOLLOW_19_in_propertyList6457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node propertyListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		propertyListReturnNode.setKind("propertyList");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		propertyListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	propertyListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_propertyInterfaceGen != null) {
              	        for(Iterator it = list_propertyInterfaceGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.propertyInterface_return r = (delphiParser.propertyInterface_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("propertyInterface");
              	            	propertyListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_propertySpecifiersGen != null) {
              	        for(Iterator it = list_propertySpecifiersGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.propertySpecifiers_return r = (delphiParser.propertySpecifiers_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("propertySpecifiers");
              	            	propertyListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_portabilityDirectiveGen != null) {
              	        for(Iterator it = list_portabilityDirectiveGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.portabilityDirective_return r = (delphiParser.portabilityDirective_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("portabilityDirective");
              	            	propertyListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		propertyListReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = propertyListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, propertyList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyList"

    public static class propertyInterface_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "propertyInterface"
    // delphi.g:6417:1: propertyInterface returns [Node returnNode] : (propertyParameterListGen+= propertyParameterList )? TK_0= ':' identGen+= ident ;
    public final delphiParser.propertyInterface_return propertyInterface() throws RecognitionException {
        delphiParser.propertyInterface_return retval = new delphiParser.propertyInterface_return();
        retval.start = input.LT(1);
        int propertyInterface_StartIndex = input.index();
        Token TK_0=null;
        List list_propertyParameterListGen=null;
        List list_identGen=null;
        RuleReturnScope propertyParameterListGen = null;
        RuleReturnScope identGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // delphi.g:6418:1: ( (propertyParameterListGen+= propertyParameterList )? TK_0= ':' identGen+= ident )
            // delphi.g:6418:4: (propertyParameterListGen+= propertyParameterList )? TK_0= ':' identGen+= ident
            {
            // delphi.g:6418:4: (propertyParameterListGen+= propertyParameterList )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==68) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // delphi.g:6418:6: propertyParameterListGen+= propertyParameterList
                    {
                    pushFollow(FOLLOW_propertyParameterList_in_propertyInterface6481);
                    propertyParameterListGen=propertyParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_propertyParameterListGen==null) list_propertyParameterListGen=new ArrayList();
                    list_propertyParameterListGen.add(propertyParameterListGen);


                    }
                    break;

            }

            TK_0=(Token)match(input,37,FOLLOW_37_in_propertyInterface6488); if (state.failed) return retval;
            pushFollow(FOLLOW_ident_in_propertyInterface6493);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node propertyInterfaceReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		propertyInterfaceReturnNode.setKind("propertyInterface");
              	    // Create a CST Node
              		if(list_propertyParameterListGen != null) {
              	        for(Iterator it = list_propertyParameterListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.propertyParameterList_return r = (delphiParser.propertyParameterList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("propertyParameterList");
              	            	propertyInterfaceReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		propertyInterfaceReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	propertyInterfaceReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = propertyInterfaceReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, propertyInterface_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyInterface"

    public static class propertyParameterList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "propertyParameterList"
    // delphi.g:6453:1: propertyParameterList returns [Node returnNode] : TK_0= '[' identListGen+= identList TK_1= ':' typeIdGen+= typeId TK_2= ';' (identListGen_1+= identList TK_3= ':' typeIdGen_1+= typeId TK_4= ';' )* TK_5= ']' ;
    public final delphiParser.propertyParameterList_return propertyParameterList() throws RecognitionException {
        delphiParser.propertyParameterList_return retval = new delphiParser.propertyParameterList_return();
        retval.start = input.LT(1);
        int propertyParameterList_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        List list_identListGen=null;
        List list_typeIdGen=null;
        List list_identListGen_1=null;
        List list_typeIdGen_1=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope typeIdGen = null;
        RuleReturnScope identListGen_1 = null;
        RuleReturnScope typeIdGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // delphi.g:6454:1: (TK_0= '[' identListGen+= identList TK_1= ':' typeIdGen+= typeId TK_2= ';' (identListGen_1+= identList TK_3= ':' typeIdGen_1+= typeId TK_4= ';' )* TK_5= ']' )
            // delphi.g:6454:5: TK_0= '[' identListGen+= identList TK_1= ':' typeIdGen+= typeId TK_2= ';' (identListGen_1+= identList TK_3= ':' typeIdGen_1+= typeId TK_4= ';' )* TK_5= ']'
            {
            TK_0=(Token)match(input,68,FOLLOW_68_in_propertyParameterList6516); if (state.failed) return retval;
            pushFollow(FOLLOW_identList_in_propertyParameterList6521);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_1=(Token)match(input,37,FOLLOW_37_in_propertyParameterList6526); if (state.failed) return retval;
            pushFollow(FOLLOW_typeId_in_propertyParameterList6531);
            typeIdGen=typeId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
            list_typeIdGen.add(typeIdGen);

            TK_2=(Token)match(input,19,FOLLOW_19_in_propertyParameterList6536); if (state.failed) return retval;
            // delphi.g:6454:78: (identListGen_1+= identList TK_3= ':' typeIdGen_1+= typeId TK_4= ';' )*
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);

                if ( (LA159_0==ID||LA159_0==100) ) {
                    alt159=1;
                }


                switch (alt159) {
            	case 1 :
            	    // delphi.g:6454:80: identListGen_1+= identList TK_3= ':' typeIdGen_1+= typeId TK_4= ';'
            	    {
            	    pushFollow(FOLLOW_identList_in_propertyParameterList6542);
            	    identListGen_1=identList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_identListGen_1==null) list_identListGen_1=new ArrayList();
            	    list_identListGen_1.add(identListGen_1);

            	    TK_3=(Token)match(input,37,FOLLOW_37_in_propertyParameterList6547); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeId_in_propertyParameterList6552);
            	    typeIdGen_1=typeId();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeIdGen_1==null) list_typeIdGen_1=new ArrayList();
            	    list_typeIdGen_1.add(typeIdGen_1);

            	    TK_4=(Token)match(input,19,FOLLOW_19_in_propertyParameterList6557); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);

            TK_5=(Token)match(input,69,FOLLOW_69_in_propertyParameterList6564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node propertyParameterListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		propertyParameterListReturnNode.setKind("propertyParameterList");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		propertyParameterListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	propertyParameterListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		propertyParameterListReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeIdGen != null) {
              	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeId");
              	            	propertyParameterListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		propertyParameterListReturnNode.getChildren().add(TK_2Leaf);
              	 	}

              		// Create a special CST Node for terminal identListGen_1 aggregation
              		if(list_identListGen_1 != null) {
              	    for(int pos = 0; pos < list_identListGen_1.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_identListGen_1 != null) {		
              	    	delphiParser.identList_return r = (delphiParser.identList_return) list_identListGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("identList");
              	    		propertyParameterListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		propertyParameterListReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeIdGen_1 != null) {		
              	    	delphiParser.typeId_return r = (delphiParser.typeId_return) list_typeIdGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("typeId");
              	    		propertyParameterListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		propertyParameterListReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		propertyParameterListReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = propertyParameterListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, propertyParameterList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertyParameterList"

    public static class propertySpecifiers_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "propertySpecifiers"
    // delphi.g:6537:1: propertySpecifiers returns [Node returnNode] : (TK_0= 'index' constExprGen+= constExpr )? (TK_1= 'read' identGen+= ident )? (TK_2= 'write' identGen_1+= ident )? (TK_3= 'stored' (identGen_2+= ident | constExprGen_1+= constExpr ) )? ( (TK_4= 'default' constExprGen_2+= constExpr ) | TK_5= 'nodefault' )? (TK_6= 'implements' typeIdGen+= typeId )? ;
    public final delphiParser.propertySpecifiers_return propertySpecifiers() throws RecognitionException {
        delphiParser.propertySpecifiers_return retval = new delphiParser.propertySpecifiers_return();
        retval.start = input.LT(1);
        int propertySpecifiers_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        List list_constExprGen=null;
        List list_identGen=null;
        List list_identGen_1=null;
        List list_identGen_2=null;
        List list_constExprGen_1=null;
        List list_constExprGen_2=null;
        List list_typeIdGen=null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope identGen = null;
        RuleReturnScope identGen_1 = null;
        RuleReturnScope identGen_2 = null;
        RuleReturnScope constExprGen_1 = null;
        RuleReturnScope constExprGen_2 = null;
        RuleReturnScope typeIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // delphi.g:6539:2: ( (TK_0= 'index' constExprGen+= constExpr )? (TK_1= 'read' identGen+= ident )? (TK_2= 'write' identGen_1+= ident )? (TK_3= 'stored' (identGen_2+= ident | constExprGen_1+= constExpr ) )? ( (TK_4= 'default' constExprGen_2+= constExpr ) | TK_5= 'nodefault' )? (TK_6= 'implements' typeIdGen+= typeId )? )
            // delphi.g:6539:5: (TK_0= 'index' constExprGen+= constExpr )? (TK_1= 'read' identGen+= ident )? (TK_2= 'write' identGen_1+= ident )? (TK_3= 'stored' (identGen_2+= ident | constExprGen_1+= constExpr ) )? ( (TK_4= 'default' constExprGen_2+= constExpr ) | TK_5= 'nodefault' )? (TK_6= 'implements' typeIdGen+= typeId )?
            {
            // delphi.g:6539:5: (TK_0= 'index' constExprGen+= constExpr )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==31) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // delphi.g:6539:7: TK_0= 'index' constExprGen+= constExpr
                    {
                    TK_0=(Token)match(input,31,FOLLOW_31_in_propertySpecifiers6591); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_propertySpecifiers6596);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);


                    }
                    break;

            }

            // delphi.g:6539:47: (TK_1= 'read' identGen+= ident )?
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==155) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    // delphi.g:6539:49: TK_1= 'read' identGen+= ident
                    {
                    TK_1=(Token)match(input,155,FOLLOW_155_in_propertySpecifiers6604); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_propertySpecifiers6609);
                    identGen=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen==null) list_identGen=new ArrayList();
                    list_identGen.add(identGen);


                    }
                    break;

            }

            // delphi.g:6539:80: (TK_2= 'write' identGen_1+= ident )?
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==156) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    // delphi.g:6539:82: TK_2= 'write' identGen_1+= ident
                    {
                    TK_2=(Token)match(input,156,FOLLOW_156_in_propertySpecifiers6617); if (state.failed) return retval;
                    pushFollow(FOLLOW_ident_in_propertySpecifiers6622);
                    identGen_1=ident();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_identGen_1==null) list_identGen_1=new ArrayList();
                    list_identGen_1.add(identGen_1);


                    }
                    break;

            }

            // delphi.g:6539:116: (TK_3= 'stored' (identGen_2+= ident | constExprGen_1+= constExpr ) )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==157) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // delphi.g:6539:118: TK_3= 'stored' (identGen_2+= ident | constExprGen_1+= constExpr )
                    {
                    TK_3=(Token)match(input,157,FOLLOW_157_in_propertySpecifiers6630); if (state.failed) return retval;
                    // delphi.g:6539:132: (identGen_2+= ident | constExprGen_1+= constExpr )
                    int alt163=2;
                    switch ( input.LA(1) ) {
                    case ID:
                        {
                        int LA163_1 = input.LA(2);

                        if ( (synpred259_delphi()) ) {
                            alt163=1;
                        }
                        else if ( (true) ) {
                            alt163=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 163, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case 100:
                        {
                        int LA163_2 = input.LA(2);

                        if ( (LA163_2==ID) ) {
                            int LA163_5 = input.LA(3);

                            if ( (synpred259_delphi()) ) {
                                alt163=1;
                            }
                            else if ( (true) ) {
                                alt163=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 163, 5, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 163, 2, input);

                            throw nvae;
                        }
                        }
                        break;
                    case INT:
                    case QVALUE:
                    case DQVALUE:
                    case 17:
                    case 68:
                    case 78:
                    case 79:
                    case 80:
                    case 81:
                    case 82:
                    case 163:
                        {
                        alt163=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 163, 0, input);

                        throw nvae;
                    }

                    switch (alt163) {
                        case 1 :
                            // delphi.g:6539:134: identGen_2+= ident
                            {
                            pushFollow(FOLLOW_ident_in_propertySpecifiers6636);
                            identGen_2=ident();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_identGen_2==null) list_identGen_2=new ArrayList();
                            list_identGen_2.add(identGen_2);


                            }
                            break;
                        case 2 :
                            // delphi.g:6539:155: constExprGen_1+= constExpr
                            {
                            pushFollow(FOLLOW_constExpr_in_propertySpecifiers6643);
                            constExprGen_1=constExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
                            list_constExprGen_1.add(constExprGen_1);


                            }
                            break;

                    }


                    }
                    break;

            }

            // delphi.g:6539:184: ( (TK_4= 'default' constExprGen_2+= constExpr ) | TK_5= 'nodefault' )?
            int alt165=3;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==158) ) {
                alt165=1;
            }
            else if ( (LA165_0==159) ) {
                alt165=2;
            }
            switch (alt165) {
                case 1 :
                    // delphi.g:6539:185: (TK_4= 'default' constExprGen_2+= constExpr )
                    {
                    // delphi.g:6539:185: (TK_4= 'default' constExprGen_2+= constExpr )
                    // delphi.g:6539:187: TK_4= 'default' constExprGen_2+= constExpr
                    {
                    TK_4=(Token)match(input,158,FOLLOW_158_in_propertySpecifiers6653); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_propertySpecifiers6658);
                    constExprGen_2=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen_2==null) list_constExprGen_2=new ArrayList();
                    list_constExprGen_2.add(constExprGen_2);


                    }


                    }
                    break;
                case 2 :
                    // delphi.g:6539:233: TK_5= 'nodefault'
                    {
                    TK_5=(Token)match(input,159,FOLLOW_159_in_propertySpecifiers6666); if (state.failed) return retval;

                    }
                    break;

            }

            // delphi.g:6539:252: (TK_6= 'implements' typeIdGen+= typeId )?
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==160) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    // delphi.g:6539:254: TK_6= 'implements' typeIdGen+= typeId
                    {
                    TK_6=(Token)match(input,160,FOLLOW_160_in_propertySpecifiers6674); if (state.failed) return retval;
                    pushFollow(FOLLOW_typeId_in_propertySpecifiers6679);
                    typeIdGen=typeId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
                    list_typeIdGen.add(typeIdGen);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node propertySpecifiersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		propertySpecifiersReturnNode.setKind("propertySpecifiers");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen_1 != null) {
              	        for(Iterator it = list_identGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_3!=null?TK_3.getText():null), TK_3.getCharPositionInLine(), TK_3.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen_2 != null) {
              	        for(Iterator it = list_identGen_2.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_constExprGen_1 != null) {
              	        for(Iterator it = list_constExprGen_1.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_4!=null?TK_4.getText():null), TK_4.getCharPositionInLine(), TK_4.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen_2 != null) {
              	        for(Iterator it = list_constExprGen_2.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_5!=null?TK_5.getText():null), TK_5.getCharPositionInLine(), TK_5.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_6!=null?TK_6.getText():null), TK_6.getCharPositionInLine(), TK_6.getLine());
              	 		propertySpecifiersReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeIdGen != null) {
              	        for(Iterator it = list_typeIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.typeId_return r = (delphiParser.typeId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeId");
              	            	propertySpecifiersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = propertySpecifiersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, propertySpecifiers_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "propertySpecifiers"

    public static class interfaceType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceType"
    // delphi.g:6654:1: interfaceType returns [Node returnNode] : TK_0= 'interface' (interfaceHeritageGen+= interfaceHeritage ) (classMethodListGen+= classMethodList ) (classPropertyListGen+= classPropertyList )* TK_1= 'end' ;
    public final delphiParser.interfaceType_return interfaceType() throws RecognitionException {
        delphiParser.interfaceType_return retval = new delphiParser.interfaceType_return();
        retval.start = input.LT(1);
        int interfaceType_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_interfaceHeritageGen=null;
        List list_classMethodListGen=null;
        List list_classPropertyListGen=null;
        RuleReturnScope interfaceHeritageGen = null;
        RuleReturnScope classMethodListGen = null;
        RuleReturnScope classPropertyListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // delphi.g:6655:1: (TK_0= 'interface' (interfaceHeritageGen+= interfaceHeritage ) (classMethodListGen+= classMethodList ) (classPropertyListGen+= classPropertyList )* TK_1= 'end' )
            // delphi.g:6655:5: TK_0= 'interface' (interfaceHeritageGen+= interfaceHeritage ) (classMethodListGen+= classMethodList ) (classPropertyListGen+= classPropertyList )* TK_1= 'end'
            {
            TK_0=(Token)match(input,28,FOLLOW_28_in_interfaceType6704); if (state.failed) return retval;
            // delphi.g:6655:22: (interfaceHeritageGen+= interfaceHeritage )
            // delphi.g:6655:24: interfaceHeritageGen+= interfaceHeritage
            {
            pushFollow(FOLLOW_interfaceHeritage_in_interfaceType6710);
            interfaceHeritageGen=interfaceHeritage();

            state._fsp--;
            if (state.failed) return retval;
            if (list_interfaceHeritageGen==null) list_interfaceHeritageGen=new ArrayList();
            list_interfaceHeritageGen.add(interfaceHeritageGen);


            }

            // delphi.g:6655:65: (classMethodListGen+= classMethodList )
            // delphi.g:6655:67: classMethodListGen+= classMethodList
            {
            pushFollow(FOLLOW_classMethodList_in_interfaceType6717);
            classMethodListGen=classMethodList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_classMethodListGen==null) list_classMethodListGen=new ArrayList();
            list_classMethodListGen.add(classMethodListGen);


            }

            // delphi.g:6655:104: (classPropertyListGen+= classPropertyList )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( ((LA167_0>=150 && LA167_0<=154)) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // delphi.g:6655:106: classPropertyListGen+= classPropertyList
            	    {
            	    pushFollow(FOLLOW_classPropertyList_in_interfaceType6724);
            	    classPropertyListGen=classPropertyList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_classPropertyListGen==null) list_classPropertyListGen=new ArrayList();
            	    list_classPropertyListGen.add(classPropertyListGen);


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);

            TK_1=(Token)match(input,23,FOLLOW_23_in_interfaceType6731); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceTypeReturnNode.setKind("interfaceType");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		interfaceTypeReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_interfaceHeritageGen != null) {
              	        for(Iterator it = list_interfaceHeritageGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.interfaceHeritage_return r = (delphiParser.interfaceHeritage_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceHeritage");
              	            	interfaceTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classMethodListGen != null) {
              	        for(Iterator it = list_classMethodListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classMethodList_return r = (delphiParser.classMethodList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classMethodList");
              	            	interfaceTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classPropertyListGen != null) {
              	        for(Iterator it = list_classPropertyListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.classPropertyList_return r = (delphiParser.classPropertyList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classPropertyList");
              	            	interfaceTypeReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		interfaceTypeReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceTypeReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, interfaceType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceType"

    public static class interfaceHeritage_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceHeritage"
    // delphi.g:6705:1: interfaceHeritage returns [Node returnNode] : TK_0= '(' identListGen+= identList TK_1= ')' ;
    public final delphiParser.interfaceHeritage_return interfaceHeritage() throws RecognitionException {
        delphiParser.interfaceHeritage_return retval = new delphiParser.interfaceHeritage_return();
        retval.start = input.LT(1);
        int interfaceHeritage_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identListGen=null;
        RuleReturnScope identListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // delphi.g:6706:1: (TK_0= '(' identListGen+= identList TK_1= ')' )
            // delphi.g:6706:5: TK_0= '(' identListGen+= identList TK_1= ')'
            {
            TK_0=(Token)match(input,17,FOLLOW_17_in_interfaceHeritage6754); if (state.failed) return retval;
            pushFollow(FOLLOW_identList_in_interfaceHeritage6759);
            identListGen=identList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identListGen==null) list_identListGen=new ArrayList();
            list_identListGen.add(identListGen);

            TK_1=(Token)match(input,18,FOLLOW_18_in_interfaceHeritage6764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceHeritageReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceHeritageReturnNode.setKind("interfaceHeritage");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		interfaceHeritageReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	interfaceHeritageReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		interfaceHeritageReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceHeritageReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, interfaceHeritage_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceHeritage"

    public static class requiresClause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "requiresClause"
    // delphi.g:6736:1: requiresClause returns [Node returnNode] : TK_0= 'requires' (identListGen+= identList )* TK_1= ';' ;
    public final delphiParser.requiresClause_return requiresClause() throws RecognitionException {
        delphiParser.requiresClause_return retval = new delphiParser.requiresClause_return();
        retval.start = input.LT(1);
        int requiresClause_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identListGen=null;
        RuleReturnScope identListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // delphi.g:6737:1: (TK_0= 'requires' (identListGen+= identList )* TK_1= ';' )
            // delphi.g:6737:5: TK_0= 'requires' (identListGen+= identList )* TK_1= ';'
            {
            TK_0=(Token)match(input,161,FOLLOW_161_in_requiresClause6787); if (state.failed) return retval;
            // delphi.g:6737:34: (identListGen+= identList )*
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);

                if ( (LA168_0==ID||LA168_0==100) ) {
                    alt168=1;
                }


                switch (alt168) {
            	case 1 :
            	    // delphi.g:0:0: identListGen+= identList
            	    {
            	    pushFollow(FOLLOW_identList_in_requiresClause6792);
            	    identListGen=identList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_identListGen==null) list_identListGen=new ArrayList();
            	    list_identListGen.add(identListGen);


            	    }
            	    break;

            	default :
            	    break loop168;
                }
            } while (true);

            TK_1=(Token)match(input,19,FOLLOW_19_in_requiresClause6798); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node requiresClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		requiresClauseReturnNode.setKind("requiresClause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		requiresClauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	requiresClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		requiresClauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = requiresClauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, requiresClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "requiresClause"

    public static class containsClause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "containsClause"
    // delphi.g:6767:1: containsClause returns [Node returnNode] : TK_0= 'contains' (identListGen+= identList )* TK_1= ';' ;
    public final delphiParser.containsClause_return containsClause() throws RecognitionException {
        delphiParser.containsClause_return retval = new delphiParser.containsClause_return();
        retval.start = input.LT(1);
        int containsClause_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_identListGen=null;
        RuleReturnScope identListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // delphi.g:6768:1: (TK_0= 'contains' (identListGen+= identList )* TK_1= ';' )
            // delphi.g:6768:5: TK_0= 'contains' (identListGen+= identList )* TK_1= ';'
            {
            TK_0=(Token)match(input,162,FOLLOW_162_in_containsClause6821); if (state.failed) return retval;
            // delphi.g:6768:34: (identListGen+= identList )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==ID||LA169_0==100) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // delphi.g:0:0: identListGen+= identList
            	    {
            	    pushFollow(FOLLOW_identList_in_containsClause6826);
            	    identListGen=identList();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_identListGen==null) list_identListGen=new ArrayList();
            	    list_identListGen.add(identListGen);


            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);

            TK_1=(Token)match(input,19,FOLLOW_19_in_containsClause6832); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node containsClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		containsClauseReturnNode.setKind("containsClause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		containsClauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identListGen != null) {
              	        for(Iterator it = list_identListGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.identList_return r = (delphiParser.identList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("identList");
              	            	containsClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
              	 		containsClauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = containsClauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, containsClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "containsClause"

    public static class identList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "identList"
    // delphi.g:6798:1: identList returns [Node returnNode] : identGen+= ident (TK_0= ',' identGen_1+= ident )* ;
    public final delphiParser.identList_return identList() throws RecognitionException {
        delphiParser.identList_return retval = new delphiParser.identList_return();
        retval.start = input.LT(1);
        int identList_StartIndex = input.index();
        Token TK_0=null;
        List list_identGen=null;
        List list_identGen_1=null;
        RuleReturnScope identGen = null;
        RuleReturnScope identGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // delphi.g:6799:1: (identGen+= ident (TK_0= ',' identGen_1+= ident )* )
            // delphi.g:6799:5: identGen+= ident (TK_0= ',' identGen_1+= ident )*
            {
            pushFollow(FOLLOW_ident_in_identList6855);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            // delphi.g:6799:21: (TK_0= ',' identGen_1+= ident )*
            loop170:
            do {
                int alt170=2;
                int LA170_0 = input.LA(1);

                if ( (LA170_0==33) ) {
                    alt170=1;
                }


                switch (alt170) {
            	case 1 :
            	    // delphi.g:6799:23: TK_0= ',' identGen_1+= ident
            	    {
            	    TK_0=(Token)match(input,33,FOLLOW_33_in_identList6861); if (state.failed) return retval;
            	    pushFollow(FOLLOW_ident_in_identList6866);
            	    identGen_1=ident();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_identGen_1==null) list_identGen_1=new ArrayList();
            	    list_identGen_1.add(identGen_1);


            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node identListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		identListReturnNode.setKind("identList");
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	identListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal identGen_1 aggregation
              		if(list_identGen_1 != null) {
              	    for(int pos = 0; pos < list_identGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		identListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_identGen_1 != null) {		
              	    	delphiParser.ident_return r = (delphiParser.ident_return) list_identGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("ident");
              	    		identListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = identListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, identList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identList"

    public static class qualId_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "qualId"
    // delphi.g:6839:1: qualId returns [Node returnNode] : (unitIdGen+= unitId TK_0= '.' )? identGen+= ident ;
    public final delphiParser.qualId_return qualId() throws RecognitionException {
        delphiParser.qualId_return retval = new delphiParser.qualId_return();
        retval.start = input.LT(1);
        int qualId_StartIndex = input.index();
        Token TK_0=null;
        List list_unitIdGen=null;
        List list_identGen=null;
        RuleReturnScope unitIdGen = null;
        RuleReturnScope identGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // delphi.g:6840:1: ( (unitIdGen+= unitId TK_0= '.' )? identGen+= ident )
            // delphi.g:6840:4: (unitIdGen+= unitId TK_0= '.' )? identGen+= ident
            {
            // delphi.g:6840:4: (unitIdGen+= unitId TK_0= '.' )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==ID) ) {
                int LA171_1 = input.LA(2);

                if ( (LA171_1==20) ) {
                    int LA171_3 = input.LA(3);

                    if ( (LA171_3==ID) ) {
                        int LA171_4 = input.LA(4);

                        if ( (synpred268_delphi()) ) {
                            alt171=1;
                        }
                    }
                    else if ( (LA171_3==100) ) {
                        alt171=1;
                    }
                }
            }
            switch (alt171) {
                case 1 :
                    // delphi.g:6840:6: unitIdGen+= unitId TK_0= '.'
                    {
                    pushFollow(FOLLOW_unitId_in_qualId6892);
                    unitIdGen=unitId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unitIdGen==null) list_unitIdGen=new ArrayList();
                    list_unitIdGen.add(unitIdGen);

                    TK_0=(Token)match(input,20,FOLLOW_20_in_qualId6897); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_ident_in_qualId6904);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node qualIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		qualIdReturnNode.setKind("qualId");
              	    // Create a CST Node
              		if(list_unitIdGen != null) {
              	        for(Iterator it = list_unitIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.unitId_return r = (delphiParser.unitId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("unitId");
              	            	qualIdReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		qualIdReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	qualIdReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = qualIdReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, qualId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualId"

    public static class typeId_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeId"
    // delphi.g:6875:1: typeId returns [Node returnNode] : (unitIdGen+= unitId TK_0= '.' )? qualIdGen+= qualId ;
    public final delphiParser.typeId_return typeId() throws RecognitionException {
        delphiParser.typeId_return retval = new delphiParser.typeId_return();
        retval.start = input.LT(1);
        int typeId_StartIndex = input.index();
        Token TK_0=null;
        List list_unitIdGen=null;
        List list_qualIdGen=null;
        RuleReturnScope unitIdGen = null;
        RuleReturnScope qualIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // delphi.g:6877:2: ( (unitIdGen+= unitId TK_0= '.' )? qualIdGen+= qualId )
            // delphi.g:6877:5: (unitIdGen+= unitId TK_0= '.' )? qualIdGen+= qualId
            {
            // delphi.g:6877:5: (unitIdGen+= unitId TK_0= '.' )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==ID) ) {
                int LA172_1 = input.LA(2);

                if ( (LA172_1==20) ) {
                    int LA172_3 = input.LA(3);

                    if ( (synpred269_delphi()) ) {
                        alt172=1;
                    }
                }
            }
            switch (alt172) {
                case 1 :
                    // delphi.g:6877:7: unitIdGen+= unitId TK_0= '.'
                    {
                    pushFollow(FOLLOW_unitId_in_typeId6930);
                    unitIdGen=unitId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unitIdGen==null) list_unitIdGen=new ArrayList();
                    list_unitIdGen.add(unitIdGen);

                    TK_0=(Token)match(input,20,FOLLOW_20_in_typeId6935); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_qualId_in_typeId6942);
            qualIdGen=qualId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qualIdGen==null) list_qualIdGen=new ArrayList();
            list_qualIdGen.add(qualIdGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typeIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeIdReturnNode.setKind("typeId");
              	    // Create a CST Node
              		if(list_unitIdGen != null) {
              	        for(Iterator it = list_unitIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.unitId_return r = (delphiParser.unitId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("unitId");
              	            	typeIdReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		typeIdReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualIdGen != null) {
              	        for(Iterator it = list_qualIdGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.qualId_return r = (delphiParser.qualId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualId");
              	            	typeIdReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeIdReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, typeId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeId"

    public static class ident_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "ident"
    // delphi.g:6912:1: ident returns [Node returnNode] : (IDGen= ID (TK_0= '.' IDGen_1_List+= ID )* | TK_0= '&' reservedWordGen+= reservedWord | IDGen= ID TK_0= '(' IDGen_1= ID TK_1= '^' TK_2= ')' );
    public final delphiParser.ident_return ident() throws RecognitionException {
        delphiParser.ident_return retval = new delphiParser.ident_return();
        retval.start = input.LT(1);
        int ident_StartIndex = input.index();
        Token IDGen=null;
        Token TK_0=null;
        Token IDGen_1=null;
        Token TK_1=null;
        Token TK_2=null;
        Token IDGen_1_List=null;
        List list_IDGen_1_List=null;
        List list_reservedWordGen=null;
        RuleReturnScope reservedWordGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // delphi.g:6914:2: (IDGen= ID (TK_0= '.' IDGen_1_List+= ID )* | TK_0= '&' reservedWordGen+= reservedWord | IDGen= ID TK_0= '(' IDGen_1= ID TK_1= '^' TK_2= ')' )
            int alt174=3;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==ID) ) {
                int LA174_1 = input.LA(2);

                if ( (LA174_1==17) ) {
                    int LA174_3 = input.LA(3);

                    if ( (LA174_3==ID) ) {
                        int LA174_5 = input.LA(4);

                        if ( (LA174_5==74) ) {
                            int LA174_6 = input.LA(5);

                            if ( (LA174_6==18) ) {
                                int LA174_7 = input.LA(6);

                                if ( (synpred271_delphi()) ) {
                                    alt174=1;
                                }
                                else if ( (true) ) {
                                    alt174=3;
                                }
                                else {
                                    if (state.backtracking>0) {state.failed=true; return retval;}
                                    NoViableAltException nvae =
                                        new NoViableAltException("", 174, 7, input);

                                    throw nvae;
                                }
                            }
                            else if ( (LA174_6==17||LA174_6==20||LA174_6==36||LA174_6==68||LA174_6==74||(LA174_6>=78 && LA174_6<=79)||(LA174_6>=83 && LA174_6<=99)) ) {
                                alt174=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 174, 6, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA174_5>=17 && LA174_5<=20)||LA174_5==33||(LA174_5>=36 && LA174_5<=37)||LA174_5==68||(LA174_5>=78 && LA174_5<=79)||(LA174_5>=83 && LA174_5<=99)) ) {
                            alt174=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 174, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA174_3==INT||(LA174_3>=QVALUE && LA174_3<=DQVALUE)||LA174_3==17||LA174_3==35||LA174_3==68||LA174_3==76||(LA174_3>=78 && LA174_3<=82)||LA174_3==100||LA174_3==126||LA174_3==163) ) {
                        alt174=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 174, 3, input);

                        throw nvae;
                    }
                }
                else if ( (LA174_1==EOF||LA174_1==ID||(LA174_1>=18 && LA174_1<=20)||(LA174_1>=23 && LA174_1<=24)||(LA174_1>=26 && LA174_1<=27)||(LA174_1>=30 && LA174_1<=33)||(LA174_1>=36 && LA174_1<=37)||LA174_1==40||LA174_1==68||LA174_1==77||(LA174_1>=100 && LA174_1<=101)||LA174_1==104||LA174_1==111||LA174_1==120||LA174_1==148||(LA174_1>=155 && LA174_1<=160)) ) {
                    alt174=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 174, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA174_0==100) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    // delphi.g:6914:6: IDGen= ID (TK_0= '.' IDGen_1_List+= ID )*
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_ident6967); if (state.failed) return retval;
                    // delphi.g:6914:15: (TK_0= '.' IDGen_1_List+= ID )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==20) ) {
                            int LA173_2 = input.LA(2);

                            if ( (LA173_2==ID) ) {
                                alt173=1;
                            }


                        }


                        switch (alt173) {
                    	case 1 :
                    	    // delphi.g:6914:17: TK_0= '.' IDGen_1_List+= ID
                    	    {
                    	    TK_0=(Token)match(input,20,FOLLOW_20_in_ident6973); if (state.failed) return retval;
                    	    IDGen_1_List=(Token)match(input,ID,FOLLOW_ID_in_ident6978); if (state.failed) return retval;
                    	    if (list_IDGen_1_List==null) list_IDGen_1_List=new ArrayList();
                    	    list_IDGen_1_List.add(IDGen_1_List);


                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identReturnNode.setKind("ident");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
                      			identReturnNode.getChildren().add(IDGenLeaf);
                      		}

                      		// Create a special CST Node for terminal IDGen_1_List aggregation
                      		if(list_IDGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IDGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		identReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IDGen_1_List != null) {
                      		    Token t = (Token) list_IDGen_1_List.get(pos); 
                      		    Leaf IDGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", t.getText(), t.getCharPositionInLine(), t.getLine());
                      			identReturnNode.getChildren().add(IDGen_1_ListLeaf);
                      		}
                      		}
                      		}

                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:6945:5: TK_0= '&' reservedWordGen+= reservedWord
                    {
                    TK_0=(Token)match(input,100,FOLLOW_100_in_ident6992); if (state.failed) return retval;
                    pushFollow(FOLLOW_reservedWord_in_ident6997);
                    reservedWordGen=reservedWord();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_reservedWordGen==null) list_reservedWordGen=new ArrayList();
                    list_reservedWordGen.add(reservedWordGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identReturnNode.setKind("ident");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		identReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_reservedWordGen != null) {
                      	        for(Iterator it = list_reservedWordGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.reservedWord_return r = (delphiParser.reservedWord_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("reservedWord");
                      	            	identReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:6968:5: IDGen= ID TK_0= '(' IDGen_1= ID TK_1= '^' TK_2= ')'
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_ident7009); if (state.failed) return retval;
                    TK_0=(Token)match(input,17,FOLLOW_17_in_ident7014); if (state.failed) return retval;
                    IDGen_1=(Token)match(input,ID,FOLLOW_ID_in_ident7019); if (state.failed) return retval;
                    TK_1=(Token)match(input,74,FOLLOW_74_in_ident7024); if (state.failed) return retval;
                    TK_2=(Token)match(input,18,FOLLOW_18_in_ident7029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identReturnNode.setKind("ident");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
                      			identReturnNode.getChildren().add(IDGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		identReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IDGen_1 != null) {
                      			Leaf IDGen_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen_1!=null?IDGen_1.getText():null), IDGen_1.getCharPositionInLine(), IDGen_1.getLine());
                      			identReturnNode.getChildren().add(IDGen_1Leaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		identReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		identReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, ident_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "ident"

    public static class reservedWord_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "reservedWord"
    // delphi.g:7003:1: reservedWord returns [Node returnNode] : IDGen= ID ;
    public final delphiParser.reservedWord_return reservedWord() throws RecognitionException {
        delphiParser.reservedWord_return retval = new delphiParser.reservedWord_return();
        retval.start = input.LT(1);
        int reservedWord_StartIndex = input.index();
        Token IDGen=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // delphi.g:7004:1: (IDGen= ID )
            // delphi.g:7004:5: IDGen= ID
            {
            IDGen=(Token)match(input,ID,FOLLOW_ID_in_reservedWord7053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node reservedWordReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		reservedWordReturnNode.setKind("reservedWord");
              	    // Create a CST Leaf
              		if(IDGen != null) {
              			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
              			reservedWordReturnNode.getChildren().add(IDGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = reservedWordReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, reservedWord_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "reservedWord"

    public static class constExpr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constExpr"
    // delphi.g:7019:1: constExpr returns [Node returnNode] : (expressionGen+= expression | TK_0= '(' constExprGen+= constExpr (TK_1= ',' constExprGen_1+= constExpr )* TK_2= ')' | TK_0= '(' recordConstExprGen+= recordConstExpr (TK_1= ',' recordConstExprGen_1+= recordConstExpr )* TK_2= ')' );
    public final delphiParser.constExpr_return constExpr() throws RecognitionException {
        delphiParser.constExpr_return retval = new delphiParser.constExpr_return();
        retval.start = input.LT(1);
        int constExpr_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_expressionGen=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        List list_recordConstExprGen=null;
        List list_recordConstExprGen_1=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        RuleReturnScope recordConstExprGen = null;
        RuleReturnScope recordConstExprGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // delphi.g:7021:2: (expressionGen+= expression | TK_0= '(' constExprGen+= constExpr (TK_1= ',' constExprGen_1+= constExpr )* TK_2= ')' | TK_0= '(' recordConstExprGen+= recordConstExpr (TK_1= ',' recordConstExprGen_1+= recordConstExpr )* TK_2= ')' )
            int alt177=3;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // delphi.g:7021:6: expressionGen+= expression
                    {
                    pushFollow(FOLLOW_expression_in_constExpr7078);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node constExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		constExprReturnNode.setKind("constExpr");
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.expression_return r = (delphiParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	constExprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = constExprReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:7039:5: TK_0= '(' constExprGen+= constExpr (TK_1= ',' constExprGen_1+= constExpr )* TK_2= ')'
                    {
                    TK_0=(Token)match(input,17,FOLLOW_17_in_constExpr7090); if (state.failed) return retval;
                    pushFollow(FOLLOW_constExpr_in_constExpr7095);
                    constExprGen=constExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constExprGen==null) list_constExprGen=new ArrayList();
                    list_constExprGen.add(constExprGen);

                    // delphi.g:7039:39: (TK_1= ',' constExprGen_1+= constExpr )*
                    loop175:
                    do {
                        int alt175=2;
                        int LA175_0 = input.LA(1);

                        if ( (LA175_0==33) ) {
                            alt175=1;
                        }


                        switch (alt175) {
                    	case 1 :
                    	    // delphi.g:7039:41: TK_1= ',' constExprGen_1+= constExpr
                    	    {
                    	    TK_1=(Token)match(input,33,FOLLOW_33_in_constExpr7101); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_constExpr_in_constExpr7106);
                    	    constExprGen_1=constExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
                    	    list_constExprGen_1.add(constExprGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);

                    TK_2=(Token)match(input,18,FOLLOW_18_in_constExpr7112); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node constExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		constExprReturnNode.setKind("constExpr");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		constExprReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constExprGen != null) {
                      	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constExpr");
                      	            	constExprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal constExprGen_1 aggregation
                      		if(list_constExprGen_1 != null) {
                      	    for(int pos = 0; pos < list_constExprGen_1.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		constExprReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// No Terminal extractor
                      	    if(list_constExprGen_1 != null) {		
                      	    	delphiParser.constExpr_return r = (delphiParser.constExpr_return) list_constExprGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("constExpr");
                      	    		constExprReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		constExprReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = constExprReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:7087:5: TK_0= '(' recordConstExprGen+= recordConstExpr (TK_1= ',' recordConstExprGen_1+= recordConstExpr )* TK_2= ')'
                    {
                    TK_0=(Token)match(input,17,FOLLOW_17_in_constExpr7124); if (state.failed) return retval;
                    pushFollow(FOLLOW_recordConstExpr_in_constExpr7129);
                    recordConstExprGen=recordConstExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_recordConstExprGen==null) list_recordConstExprGen=new ArrayList();
                    list_recordConstExprGen.add(recordConstExprGen);

                    // delphi.g:7087:51: (TK_1= ',' recordConstExprGen_1+= recordConstExpr )*
                    loop176:
                    do {
                        int alt176=2;
                        int LA176_0 = input.LA(1);

                        if ( (LA176_0==33) ) {
                            alt176=1;
                        }


                        switch (alt176) {
                    	case 1 :
                    	    // delphi.g:7087:53: TK_1= ',' recordConstExprGen_1+= recordConstExpr
                    	    {
                    	    TK_1=(Token)match(input,33,FOLLOW_33_in_constExpr7135); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_recordConstExpr_in_constExpr7140);
                    	    recordConstExprGen_1=recordConstExpr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_recordConstExprGen_1==null) list_recordConstExprGen_1=new ArrayList();
                    	    list_recordConstExprGen_1.add(recordConstExprGen_1);


                    	    }
                    	    break;

                    	default :
                    	    break loop176;
                        }
                    } while (true);

                    TK_2=(Token)match(input,18,FOLLOW_18_in_constExpr7147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node constExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		constExprReturnNode.setKind("constExpr");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		constExprReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_recordConstExprGen != null) {
                      	        for(Iterator it = list_recordConstExprGen.iterator(); it.hasNext(); )  { 
                      	            delphiParser.recordConstExpr_return r = (delphiParser.recordConstExpr_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("recordConstExpr");
                      	            	constExprReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal recordConstExprGen_1 aggregation
                      		if(list_recordConstExprGen_1 != null) {
                      	    for(int pos = 0; pos < list_recordConstExprGen_1.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_1!=null?TK_1.getText():null), TK_1.getCharPositionInLine(), TK_1.getLine());
                      	 		constExprReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// No Terminal extractor
                      	    if(list_recordConstExprGen_1 != null) {		
                      	    	delphiParser.recordConstExpr_return r = (delphiParser.recordConstExpr_return) list_recordConstExprGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("recordConstExpr");
                      	    		constExprReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_2!=null?TK_2.getText():null), TK_2.getCharPositionInLine(), TK_2.getLine());
                      	 		constExprReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = constExprReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, constExpr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constExpr"

    public static class recordConstExpr_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "recordConstExpr"
    // delphi.g:7137:1: recordConstExpr returns [Node returnNode] : identGen+= ident TK_0= ':' constExprGen+= constExpr ;
    public final delphiParser.recordConstExpr_return recordConstExpr() throws RecognitionException {
        delphiParser.recordConstExpr_return retval = new delphiParser.recordConstExpr_return();
        retval.start = input.LT(1);
        int recordConstExpr_StartIndex = input.index();
        Token TK_0=null;
        List list_identGen=null;
        List list_constExprGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope constExprGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // delphi.g:7139:2: (identGen+= ident TK_0= ':' constExprGen+= constExpr )
            // delphi.g:7139:5: identGen+= ident TK_0= ':' constExprGen+= constExpr
            {
            pushFollow(FOLLOW_ident_in_recordConstExpr7171);
            identGen=ident();

            state._fsp--;
            if (state.failed) return retval;
            if (list_identGen==null) list_identGen=new ArrayList();
            list_identGen.add(identGen);

            TK_0=(Token)match(input,37,FOLLOW_37_in_recordConstExpr7176); if (state.failed) return retval;
            pushFollow(FOLLOW_constExpr_in_recordConstExpr7181);
            constExprGen=constExpr();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constExprGen==null) list_constExprGen=new ArrayList();
            list_constExprGen.add(constExprGen);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node recordConstExprReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		recordConstExprReturnNode.setKind("recordConstExpr");
              	    // Create a CST Node
              		if(list_identGen != null) {
              	        for(Iterator it = list_identGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.ident_return r = (delphiParser.ident_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("ident");
              	            	recordConstExprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
              	 		recordConstExprReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_constExprGen != null) {
              	        for(Iterator it = list_constExprGen.iterator(); it.hasNext(); )  { 
              	            delphiParser.constExpr_return r = (delphiParser.constExpr_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constExpr");
              	            	recordConstExprReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = recordConstExprReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, recordConstExpr_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "recordConstExpr"

    public static class unitId_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "unitId"
    // delphi.g:7174:1: unitId returns [Node returnNode] : IDGen= ID ;
    public final delphiParser.unitId_return unitId() throws RecognitionException {
        delphiParser.unitId_return retval = new delphiParser.unitId_return();
        retval.start = input.LT(1);
        int unitId_StartIndex = input.index();
        Token IDGen=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // delphi.g:7176:2: (IDGen= ID )
            // delphi.g:7176:6: IDGen= ID
            {
            IDGen=(Token)match(input,ID,FOLLOW_ID_in_unitId7206); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node unitIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		unitIdReturnNode.setKind("unitId");
              	    // Create a CST Leaf
              		if(IDGen != null) {
              			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
              			unitIdReturnNode.getChildren().add(IDGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = unitIdReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, unitId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unitId"

    public static class labelId_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "labelId"
    // delphi.g:7191:1: labelId returns [Node returnNode] : (IDGen= ID | INTGen= INT | HEXGen= HEX );
    public final delphiParser.labelId_return labelId() throws RecognitionException {
        delphiParser.labelId_return retval = new delphiParser.labelId_return();
        retval.start = input.LT(1);
        int labelId_StartIndex = input.index();
        Token IDGen=null;
        Token INTGen=null;
        Token HEXGen=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // delphi.g:7193:2: (IDGen= ID | INTGen= INT | HEXGen= HEX )
            int alt178=3;
            switch ( input.LA(1) ) {
            case ID:
                {
                alt178=1;
                }
                break;
            case INT:
                {
                alt178=2;
                }
                break;
            case HEX:
                {
                alt178=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    // delphi.g:7193:6: IDGen= ID
                    {
                    IDGen=(Token)match(input,ID,FOLLOW_ID_in_labelId7231); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node labelIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		labelIdReturnNode.setKind("labelId");
                      	    // Create a CST Leaf
                      		if(IDGen != null) {
                      			Leaf IDGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("ID", (IDGen!=null?IDGen.getText():null), IDGen.getCharPositionInLine(), IDGen.getLine());
                      			labelIdReturnNode.getChildren().add(IDGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = labelIdReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:7206:5: INTGen= INT
                    {
                    INTGen=(Token)match(input,INT,FOLLOW_INT_in_labelId7243); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node labelIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		labelIdReturnNode.setKind("labelId");
                      	    // Create a CST Leaf
                      		if(INTGen != null) {
                      			Leaf INTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("INT", (INTGen!=null?INTGen.getText():null), INTGen.getCharPositionInLine(), INTGen.getLine());
                      			labelIdReturnNode.getChildren().add(INTGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = labelIdReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // delphi.g:7219:5: HEXGen= HEX
                    {
                    HEXGen=(Token)match(input,HEX,FOLLOW_HEX_in_labelId7255); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node labelIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		labelIdReturnNode.setKind("labelId");
                      	    // Create a CST Leaf
                      		if(HEXGen != null) {
                      			Leaf HEXGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("HEX", (HEXGen!=null?HEXGen.getText():null), HEXGen.getCharPositionInLine(), HEXGen.getLine());
                      			labelIdReturnNode.getChildren().add(HEXGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = labelIdReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, labelId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "labelId"

    public static class number_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "number"
    // delphi.g:7234:1: number returns [Node returnNode] : (INTGen= INT | TK_0= '#' INTGen= INT );
    public final delphiParser.number_return number() throws RecognitionException {
        delphiParser.number_return retval = new delphiParser.number_return();
        retval.start = input.LT(1);
        int number_StartIndex = input.index();
        Token INTGen=null;
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // delphi.g:7235:1: (INTGen= INT | TK_0= '#' INTGen= INT )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==INT) ) {
                alt179=1;
            }
            else if ( (LA179_0==163) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // delphi.g:7235:5: INTGen= INT
                    {
                    INTGen=(Token)match(input,INT,FOLLOW_INT_in_number7278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node numberReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		numberReturnNode.setKind("number");
                      	    // Create a CST Leaf
                      		if(INTGen != null) {
                      			Leaf INTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("INT", (INTGen!=null?INTGen.getText():null), INTGen.getCharPositionInLine(), INTGen.getLine());
                      			numberReturnNode.getChildren().add(INTGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = numberReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:7248:5: TK_0= '#' INTGen= INT
                    {
                    TK_0=(Token)match(input,163,FOLLOW_163_in_number7290); if (state.failed) return retval;
                    INTGen=(Token)match(input,INT,FOLLOW_INT_in_number7295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node numberReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		numberReturnNode.setKind("number");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf("TOKEN", (TK_0!=null?TK_0.getText():null), TK_0.getCharPositionInLine(), TK_0.getLine());
                      	 		numberReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(INTGen != null) {
                      			Leaf INTGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("INT", (INTGen!=null?INTGen.getText():null), INTGen.getCharPositionInLine(), INTGen.getLine());
                      			numberReturnNode.getChildren().add(INTGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = numberReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, number_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class string_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "string"
    // delphi.g:7268:1: string returns [Node returnNode] : (QVALUEGen= QVALUE | DQVALUEGen= DQVALUE );
    public final delphiParser.string_return string() throws RecognitionException {
        delphiParser.string_return retval = new delphiParser.string_return();
        retval.start = input.LT(1);
        int string_StartIndex = input.index();
        Token QVALUEGen=null;
        Token DQVALUEGen=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // delphi.g:7269:1: (QVALUEGen= QVALUE | DQVALUEGen= DQVALUE )
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==QVALUE) ) {
                alt180=1;
            }
            else if ( (LA180_0==DQVALUE) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    // delphi.g:7269:5: QVALUEGen= QVALUE
                    {
                    QVALUEGen=(Token)match(input,QVALUE,FOLLOW_QVALUE_in_string7318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node stringReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		stringReturnNode.setKind("string");
                      	    // Create a CST Leaf
                      		if(QVALUEGen != null) {
                      			Leaf QVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("QVALUE", (QVALUEGen!=null?QVALUEGen.getText():null), QVALUEGen.getCharPositionInLine(), QVALUEGen.getLine());
                      			stringReturnNode.getChildren().add(QVALUEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = stringReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // delphi.g:7282:5: DQVALUEGen= DQVALUE
                    {
                    DQVALUEGen=(Token)match(input,DQVALUE,FOLLOW_DQVALUE_in_string7330); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node stringReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		stringReturnNode.setKind("string");
                      	    // Create a CST Leaf
                      		if(DQVALUEGen != null) {
                      			Leaf DQVALUEGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf("DQVALUE", (DQVALUEGen!=null?DQVALUEGen.getText():null), DQVALUEGen.getCharPositionInLine(), DQVALUEGen.getLine());
                      			stringReturnNode.getChildren().add(DQVALUEGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = stringReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, string_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "string"

    // $ANTLR start synpred42_delphi
    public final void synpred42_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_identGen=null;
        List list_typeGen=null;
        List list_portabilityDirectiveGen=null;
        RuleReturnScope identGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope portabilityDirectiveGen = null;
        // delphi.g:1136:5: (identGen+= ident TK_0= '=' (TK_1= 'type' )? typeGen+= type (portabilityDirectiveGen+= portabilityDirective )? )
        // delphi.g:1136:5: identGen+= ident TK_0= '=' (TK_1= 'type' )? typeGen+= type (portabilityDirectiveGen+= portabilityDirective )?
        {
        pushFollow(FOLLOW_ident_in_synpred42_delphi1135);
        identGen=ident();

        state._fsp--;
        if (state.failed) return ;
        if (list_identGen==null) list_identGen=new ArrayList();
        list_identGen.add(identGen);

        TK_0=(Token)match(input,36,FOLLOW_36_in_synpred42_delphi1140); if (state.failed) return ;
        // delphi.g:1136:31: (TK_1= 'type' )?
        int alt184=2;
        int LA184_0 = input.LA(1);

        if ( (LA184_0==38) ) {
            alt184=1;
        }
        switch (alt184) {
            case 1 :
                // delphi.g:1136:33: TK_1= 'type'
                {
                TK_1=(Token)match(input,38,FOLLOW_38_in_synpred42_delphi1146); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_type_in_synpred42_delphi1153);
        typeGen=type();

        state._fsp--;
        if (state.failed) return ;
        if (list_typeGen==null) list_typeGen=new ArrayList();
        list_typeGen.add(typeGen);

        // delphi.g:1136:62: (portabilityDirectiveGen+= portabilityDirective )?
        int alt185=2;
        int LA185_0 = input.LA(1);

        if ( (LA185_0==24||(LA185_0>=26 && LA185_0<=27)) ) {
            alt185=1;
        }
        switch (alt185) {
            case 1 :
                // delphi.g:1136:64: portabilityDirectiveGen+= portabilityDirective
                {
                pushFollow(FOLLOW_portabilityDirective_in_synpred42_delphi1159);
                portabilityDirectiveGen=portabilityDirective();

                state._fsp--;
                if (state.failed) return ;
                if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
                list_portabilityDirectiveGen.add(portabilityDirectiveGen);


                }
                break;

        }


        }
    }
    // $ANTLR end synpred42_delphi

    // $ANTLR start synpred45_delphi
    public final void synpred45_delphi_fragment() throws RecognitionException {   
        List list_constExprGen=null;
        RuleReturnScope constExprGen = null;
        // delphi.g:1235:6: (constExprGen+= constExpr )
        // delphi.g:1235:6: constExprGen+= constExpr
        {
        pushFollow(FOLLOW_constExpr_in_synpred45_delphi1223);
        constExprGen=constExpr();

        state._fsp--;
        if (state.failed) return ;
        if (list_constExprGen==null) list_constExprGen=new ArrayList();
        list_constExprGen.add(constExprGen);


        }
    }
    // $ANTLR end synpred45_delphi

    // $ANTLR start synpred46_delphi
    public final void synpred46_delphi_fragment() throws RecognitionException {   
        List list_arrayConstantGen=null;
        RuleReturnScope arrayConstantGen = null;
        // delphi.g:1235:33: (arrayConstantGen+= arrayConstant )
        // delphi.g:1235:33: arrayConstantGen+= arrayConstant
        {
        pushFollow(FOLLOW_arrayConstant_in_synpred46_delphi1230);
        arrayConstantGen=arrayConstant();

        state._fsp--;
        if (state.failed) return ;
        if (list_arrayConstantGen==null) list_arrayConstantGen=new ArrayList();
        list_arrayConstantGen.add(arrayConstantGen);


        }
    }
    // $ANTLR end synpred46_delphi

    // $ANTLR start synpred47_delphi
    public final void synpred47_delphi_fragment() throws RecognitionException {   
        List list_recordConstantGen=null;
        RuleReturnScope recordConstantGen = null;
        // delphi.g:1235:68: (recordConstantGen+= recordConstant )
        // delphi.g:1235:68: recordConstantGen+= recordConstant
        {
        pushFollow(FOLLOW_recordConstant_in_synpred47_delphi1237);
        recordConstantGen=recordConstant();

        state._fsp--;
        if (state.failed) return ;
        if (list_recordConstantGen==null) list_recordConstantGen=new ArrayList();
        list_recordConstantGen.add(recordConstantGen);


        }
    }
    // $ANTLR end synpred47_delphi

    // $ANTLR start synpred49_delphi
    public final void synpred49_delphi_fragment() throws RecognitionException {   
        List list_typeIdGen=null;
        RuleReturnScope typeIdGen = null;
        // delphi.g:1389:5: (typeIdGen+= typeId )
        // delphi.g:1389:5: typeIdGen+= typeId
        {
        pushFollow(FOLLOW_typeId_in_synpred49_delphi1375);
        typeIdGen=typeId();

        state._fsp--;
        if (state.failed) return ;
        if (list_typeIdGen==null) list_typeIdGen=new ArrayList();
        list_typeIdGen.add(typeIdGen);


        }
    }
    // $ANTLR end synpred49_delphi

    // $ANTLR start synpred50_delphi
    public final void synpred50_delphi_fragment() throws RecognitionException {   
        List list_simpleTypeGen=null;
        RuleReturnScope simpleTypeGen = null;
        // delphi.g:1407:9: (simpleTypeGen+= simpleType )
        // delphi.g:1407:9: simpleTypeGen+= simpleType
        {
        pushFollow(FOLLOW_simpleType_in_synpred50_delphi1391);
        simpleTypeGen=simpleType();

        state._fsp--;
        if (state.failed) return ;
        if (list_simpleTypeGen==null) list_simpleTypeGen=new ArrayList();
        list_simpleTypeGen.add(simpleTypeGen);


        }
    }
    // $ANTLR end synpred50_delphi

    // $ANTLR start synpred54_delphi
    public final void synpred54_delphi_fragment() throws RecognitionException {   
        List list_procedureTypeGen=null;
        RuleReturnScope procedureTypeGen = null;
        // delphi.g:1479:9: (procedureTypeGen+= procedureType )
        // delphi.g:1479:9: procedureTypeGen+= procedureType
        {
        pushFollow(FOLLOW_procedureType_in_synpred54_delphi1455);
        procedureTypeGen=procedureType();

        state._fsp--;
        if (state.failed) return ;
        if (list_procedureTypeGen==null) list_procedureTypeGen=new ArrayList();
        list_procedureTypeGen.add(procedureTypeGen);


        }
    }
    // $ANTLR end synpred54_delphi

    // $ANTLR start synpred65_delphi
    public final void synpred65_delphi_fragment() throws RecognitionException {   
        List list_subrangeTypeGen=null;
        RuleReturnScope subrangeTypeGen = null;
        // delphi.g:1757:5: (subrangeTypeGen+= subrangeType )
        // delphi.g:1757:5: subrangeTypeGen+= subrangeType
        {
        pushFollow(FOLLOW_subrangeType_in_synpred65_delphi1753);
        subrangeTypeGen=subrangeType();

        state._fsp--;
        if (state.failed) return ;
        if (list_subrangeTypeGen==null) list_subrangeTypeGen=new ArrayList();
        list_subrangeTypeGen.add(subrangeTypeGen);


        }
    }
    // $ANTLR end synpred65_delphi

    // $ANTLR start synpred66_delphi
    public final void synpred66_delphi_fragment() throws RecognitionException {   
        List list_enumeratedTypeGen=null;
        RuleReturnScope enumeratedTypeGen = null;
        // delphi.g:1775:6: (enumeratedTypeGen+= enumeratedType )
        // delphi.g:1775:6: enumeratedTypeGen+= enumeratedType
        {
        pushFollow(FOLLOW_enumeratedType_in_synpred66_delphi1767);
        enumeratedTypeGen=enumeratedType();

        state._fsp--;
        if (state.failed) return ;
        if (list_enumeratedTypeGen==null) list_enumeratedTypeGen=new ArrayList();
        list_enumeratedTypeGen.add(enumeratedTypeGen);


        }
    }
    // $ANTLR end synpred66_delphi

    // $ANTLR start synpred91_delphi
    public final void synpred91_delphi_fragment() throws RecognitionException {   
        List list_portabilityDirectiveGen=null;
        RuleReturnScope portabilityDirectiveGen = null;
        // delphi.g:2251:142: (portabilityDirectiveGen+= portabilityDirective )
        // delphi.g:2251:142: portabilityDirectiveGen+= portabilityDirective
        {
        pushFollow(FOLLOW_portabilityDirective_in_synpred91_delphi2344);
        portabilityDirectiveGen=portabilityDirective();

        state._fsp--;
        if (state.failed) return ;
        if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
        list_portabilityDirectiveGen.add(portabilityDirectiveGen);


        }
    }
    // $ANTLR end synpred91_delphi

    // $ANTLR start synpred93_delphi
    public final void synpred93_delphi_fragment() throws RecognitionException {   
        List list_portabilityDirectiveGen=null;
        RuleReturnScope portabilityDirectiveGen = null;
        // delphi.g:2332:61: (portabilityDirectiveGen+= portabilityDirective )
        // delphi.g:2332:61: portabilityDirectiveGen+= portabilityDirective
        {
        pushFollow(FOLLOW_portabilityDirective_in_synpred93_delphi2388);
        portabilityDirectiveGen=portabilityDirective();

        state._fsp--;
        if (state.failed) return ;
        if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
        list_portabilityDirectiveGen.add(portabilityDirectiveGen);


        }
    }
    // $ANTLR end synpred93_delphi

    // $ANTLR start synpred101_delphi
    public final void synpred101_delphi_fragment() throws RecognitionException {   
        List list_portabilityDirectiveGen=null;
        RuleReturnScope portabilityDirectiveGen = null;
        // delphi.g:2592:58: (portabilityDirectiveGen+= portabilityDirective )
        // delphi.g:2592:58: portabilityDirectiveGen+= portabilityDirective
        {
        pushFollow(FOLLOW_portabilityDirective_in_synpred101_delphi2635);
        portabilityDirectiveGen=portabilityDirective();

        state._fsp--;
        if (state.failed) return ;
        if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
        list_portabilityDirectiveGen.add(portabilityDirectiveGen);


        }
    }
    // $ANTLR end synpred101_delphi

    // $ANTLR start synpred102_delphi
    public final void synpred102_delphi_fragment() throws RecognitionException {   
        List list_portabilityDirectiveGen=null;
        RuleReturnScope portabilityDirectiveGen = null;
        // delphi.g:2633:49: (portabilityDirectiveGen+= portabilityDirective )
        // delphi.g:2633:49: portabilityDirectiveGen+= portabilityDirective
        {
        pushFollow(FOLLOW_portabilityDirective_in_synpred102_delphi2676);
        portabilityDirectiveGen=portabilityDirective();

        state._fsp--;
        if (state.failed) return ;
        if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
        list_portabilityDirectiveGen.add(portabilityDirectiveGen);


        }
    }
    // $ANTLR end synpred102_delphi

    // $ANTLR start synpred103_delphi
    public final void synpred103_delphi_fragment() throws RecognitionException {   
        List list_portabilityDirectiveGen=null;
        RuleReturnScope portabilityDirectiveGen = null;
        // delphi.g:2674:35: (portabilityDirectiveGen+= portabilityDirective )
        // delphi.g:2674:35: portabilityDirectiveGen+= portabilityDirective
        {
        pushFollow(FOLLOW_portabilityDirective_in_synpred103_delphi2712);
        portabilityDirectiveGen=portabilityDirective();

        state._fsp--;
        if (state.failed) return ;
        if (list_portabilityDirectiveGen==null) list_portabilityDirectiveGen=new ArrayList();
        list_portabilityDirectiveGen.add(portabilityDirectiveGen);


        }
    }
    // $ANTLR end synpred103_delphi

    // $ANTLR start synpred105_delphi
    public final void synpred105_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;

        // delphi.g:2710:86: (TK_0= 'of' TK_1= 'object' )
        // delphi.g:2710:86: TK_0= 'of' TK_1= 'object'
        {
        TK_0=(Token)match(input,40,FOLLOW_40_in_synpred105_delphi2752); if (state.failed) return ;
        TK_1=(Token)match(input,75,FOLLOW_75_in_synpred105_delphi2757); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred105_delphi

    // $ANTLR start synpred107_delphi
    public final void synpred107_delphi_fragment() throws RecognitionException {   
        List list_identGen=null;
        RuleReturnScope identGen = null;
        // delphi.g:2787:75: (identGen+= ident )
        // delphi.g:2787:75: identGen+= ident
        {
        pushFollow(FOLLOW_ident_in_synpred107_delphi2841);
        identGen=ident();

        state._fsp--;
        if (state.failed) return ;
        if (list_identGen==null) list_identGen=new ArrayList();
        list_identGen.add(identGen);


        }
    }
    // $ANTLR end synpred107_delphi

    // $ANTLR start synpred111_delphi
    public final void synpred111_delphi_fragment() throws RecognitionException {   
        List list_relOpGen=null;
        List list_simpleExpressionGen_1=null;
        RuleReturnScope relOpGen = null;
        RuleReturnScope simpleExpressionGen_1 = null;
        // delphi.g:2874:45: (relOpGen+= relOp simpleExpressionGen_1+= simpleExpression )
        // delphi.g:2874:45: relOpGen+= relOp simpleExpressionGen_1+= simpleExpression
        {
        pushFollow(FOLLOW_relOp_in_synpred111_delphi2902);
        relOpGen=relOp();

        state._fsp--;
        if (state.failed) return ;
        if (list_relOpGen==null) list_relOpGen=new ArrayList();
        list_relOpGen.add(relOpGen);

        pushFollow(FOLLOW_simpleExpression_in_synpred111_delphi2907);
        simpleExpressionGen_1=simpleExpression();

        state._fsp--;
        if (state.failed) return ;
        if (list_simpleExpressionGen_1==null) list_simpleExpressionGen_1=new ArrayList();
        list_simpleExpressionGen_1.add(simpleExpressionGen_1);


        }
    }
    // $ANTLR end synpred111_delphi

    // $ANTLR start synpred114_delphi
    public final void synpred114_delphi_fragment() throws RecognitionException {   
        List list_addOpGen=null;
        List list_termGen_1=null;
        RuleReturnScope addOpGen = null;
        RuleReturnScope termGen_1 = null;
        // delphi.g:2918:46: (addOpGen+= addOp termGen_1+= term )
        // delphi.g:2918:46: addOpGen+= addOp termGen_1+= term
        {
        pushFollow(FOLLOW_addOp_in_synpred114_delphi2953);
        addOpGen=addOp();

        state._fsp--;
        if (state.failed) return ;
        if (list_addOpGen==null) list_addOpGen=new ArrayList();
        list_addOpGen.add(addOpGen);

        pushFollow(FOLLOW_term_in_synpred114_delphi2958);
        termGen_1=term();

        state._fsp--;
        if (state.failed) return ;
        if (list_termGen_1==null) list_termGen_1=new ArrayList();
        list_termGen_1.add(termGen_1);


        }
    }
    // $ANTLR end synpred114_delphi

    // $ANTLR start synpred116_delphi
    public final void synpred116_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_exprListGen=null;
        RuleReturnScope exprListGen = null;
        // delphi.g:3016:33: (TK_0= '(' exprListGen+= exprList TK_1= ')' )
        // delphi.g:3016:33: TK_0= '(' exprListGen+= exprList TK_1= ')'
        {
        TK_0=(Token)match(input,17,FOLLOW_17_in_synpred116_delphi3026); if (state.failed) return ;
        pushFollow(FOLLOW_exprList_in_synpred116_delphi3031);
        exprListGen=exprList();

        state._fsp--;
        if (state.failed) return ;
        if (list_exprListGen==null) list_exprListGen=new ArrayList();
        list_exprListGen.add(exprListGen);

        TK_1=(Token)match(input,18,FOLLOW_18_in_synpred116_delphi3036); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred116_delphi

    // $ANTLR start synpred117_delphi
    public final void synpred117_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_designatorGen=null;
        List list_exprListGen=null;
        RuleReturnScope designatorGen = null;
        RuleReturnScope exprListGen = null;
        // delphi.g:3016:5: (designatorGen+= designator (TK_0= '(' exprListGen+= exprList TK_1= ')' )? )
        // delphi.g:3016:5: designatorGen+= designator (TK_0= '(' exprListGen+= exprList TK_1= ')' )?
        {
        pushFollow(FOLLOW_designator_in_synpred117_delphi3020);
        designatorGen=designator();

        state._fsp--;
        if (state.failed) return ;
        if (list_designatorGen==null) list_designatorGen=new ArrayList();
        list_designatorGen.add(designatorGen);

        // delphi.g:3016:31: (TK_0= '(' exprListGen+= exprList TK_1= ')' )?
        int alt188=2;
        int LA188_0 = input.LA(1);

        if ( (LA188_0==17) ) {
            alt188=1;
        }
        switch (alt188) {
            case 1 :
                // delphi.g:3016:33: TK_0= '(' exprListGen+= exprList TK_1= ')'
                {
                TK_0=(Token)match(input,17,FOLLOW_17_in_synpred117_delphi3026); if (state.failed) return ;
                pushFollow(FOLLOW_exprList_in_synpred117_delphi3031);
                exprListGen=exprList();

                state._fsp--;
                if (state.failed) return ;
                if (list_exprListGen==null) list_exprListGen=new ArrayList();
                list_exprListGen.add(exprListGen);

                TK_1=(Token)match(input,18,FOLLOW_18_in_synpred117_delphi3036); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred117_delphi

    // $ANTLR start synpred143_delphi
    public final void synpred143_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_exprListGen=null;
        RuleReturnScope exprListGen = null;
        // delphi.g:3542:43: (TK_0= '[' exprListGen+= exprList TK_1= ']' )
        // delphi.g:3542:43: TK_0= '[' exprListGen+= exprList TK_1= ']'
        {
        TK_0=(Token)match(input,68,FOLLOW_68_in_synpred143_delphi3599); if (state.failed) return ;
        pushFollow(FOLLOW_exprList_in_synpred143_delphi3604);
        exprListGen=exprList();

        state._fsp--;
        if (state.failed) return ;
        if (list_exprListGen==null) list_exprListGen=new ArrayList();
        list_exprListGen.add(exprListGen);

        TK_1=(Token)match(input,69,FOLLOW_69_in_synpred143_delphi3609); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred143_delphi

    // $ANTLR start synpred145_delphi
    public final void synpred145_delphi_fragment() throws RecognitionException {   
        Token IDGen=null;

        // delphi.g:3594:6: (IDGen= ID )
        // delphi.g:3594:6: IDGen= ID
        {
        IDGen=(Token)match(input,ID,FOLLOW_ID_in_synpred145_delphi3643); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred145_delphi

    // $ANTLR start synpred152_delphi
    public final void synpred152_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;

        // delphi.g:3839:32: (TK_0= ';' )
        // delphi.g:3839:32: TK_0= ';'
        {
        TK_0=(Token)match(input,19,FOLLOW_19_in_synpred152_delphi3889); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred152_delphi

    // $ANTLR start synpred154_delphi
    public final void synpred154_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        List list_designatorGen=null;
        List list_expressionGen=null;
        RuleReturnScope designatorGen = null;
        RuleReturnScope expressionGen = null;
        // delphi.g:3870:4: (designatorGen+= designator TK_0= ':=' expressionGen+= expression )
        // delphi.g:3870:4: designatorGen+= designator TK_0= ':=' expressionGen+= expression
        {
        pushFollow(FOLLOW_designator_in_synpred154_delphi3916);
        designatorGen=designator();

        state._fsp--;
        if (state.failed) return ;
        if (list_designatorGen==null) list_designatorGen=new ArrayList();
        list_designatorGen.add(designatorGen);

        TK_0=(Token)match(input,101,FOLLOW_101_in_synpred154_delphi3921); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred154_delphi3926);
        expressionGen=expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_expressionGen==null) list_expressionGen=new ArrayList();
        list_expressionGen.add(expressionGen);


        }
    }
    // $ANTLR end synpred154_delphi

    // $ANTLR start synpred156_delphi
    public final void synpred156_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_designatorGen=null;
        List list_exprListGen=null;
        RuleReturnScope designatorGen = null;
        RuleReturnScope exprListGen = null;
        // delphi.g:3903:5: (designatorGen+= designator (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )? )
        // delphi.g:3903:5: designatorGen+= designator (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )?
        {
        pushFollow(FOLLOW_designator_in_synpred156_delphi3940);
        designatorGen=designator();

        state._fsp--;
        if (state.failed) return ;
        if (list_designatorGen==null) list_designatorGen=new ArrayList();
        list_designatorGen.add(designatorGen);

        // delphi.g:3903:31: (TK_0= '(' (exprListGen+= exprList ) TK_1= ')' )?
        int alt190=2;
        int LA190_0 = input.LA(1);

        if ( (LA190_0==17) ) {
            alt190=1;
        }
        switch (alt190) {
            case 1 :
                // delphi.g:3903:33: TK_0= '(' (exprListGen+= exprList ) TK_1= ')'
                {
                TK_0=(Token)match(input,17,FOLLOW_17_in_synpred156_delphi3946); if (state.failed) return ;
                // delphi.g:3903:42: (exprListGen+= exprList )
                // delphi.g:3903:44: exprListGen+= exprList
                {
                pushFollow(FOLLOW_exprList_in_synpred156_delphi3952);
                exprListGen=exprList();

                state._fsp--;
                if (state.failed) return ;
                if (list_exprListGen==null) list_exprListGen=new ArrayList();
                list_exprListGen.add(exprListGen);


                }

                TK_1=(Token)match(input,18,FOLLOW_18_in_synpred156_delphi3958); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred156_delphi

    // $ANTLR start synpred165_delphi
    public final void synpred165_delphi_fragment() throws RecognitionException {   
        Token TK_2=null;

        // delphi.g:4179:83: (TK_2= ';' )
        // delphi.g:4179:83: TK_2= ';'
        {
        TK_2=(Token)match(input,19,FOLLOW_19_in_synpred165_delphi4226); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred165_delphi

    // $ANTLR start synpred166_delphi
    public final void synpred166_delphi_fragment() throws RecognitionException {   
        Token TK_4=null;

        // delphi.g:4179:138: (TK_4= ';' )
        // delphi.g:4179:138: TK_4= ';'
        {
        TK_4=(Token)match(input,19,FOLLOW_19_in_synpred166_delphi4246); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred166_delphi

    // $ANTLR start synpred167_delphi
    public final void synpred167_delphi_fragment() throws RecognitionException {   
        Token TK_3=null;
        Token TK_4=null;
        List list_statementGen_1=null;
        RuleReturnScope statementGen_1 = null;
        // delphi.g:4179:96: (TK_3= 'else' statementGen_1+= statement (TK_4= ';' )? )
        // delphi.g:4179:96: TK_3= 'else' statementGen_1+= statement (TK_4= ';' )?
        {
        TK_3=(Token)match(input,107,FOLLOW_107_in_synpred167_delphi4234); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred167_delphi4239);
        statementGen_1=statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_statementGen_1==null) list_statementGen_1=new ArrayList();
        list_statementGen_1.add(statementGen_1);

        // delphi.g:4179:136: (TK_4= ';' )?
        int alt191=2;
        int LA191_0 = input.LA(1);

        if ( (LA191_0==19) ) {
            alt191=1;
        }
        switch (alt191) {
            case 1 :
                // delphi.g:4179:138: TK_4= ';'
                {
                TK_4=(Token)match(input,19,FOLLOW_19_in_synpred167_delphi4246); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred167_delphi

    // $ANTLR start synpred175_delphi
    public final void synpred175_delphi_fragment() throws RecognitionException {   
        Token TK_2=null;

        // delphi.g:4536:84: (TK_2= ';' )
        // delphi.g:4536:84: TK_2= ';'
        {
        TK_2=(Token)match(input,19,FOLLOW_19_in_synpred175_delphi4560); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred175_delphi

    // $ANTLR start synpred177_delphi
    public final void synpred177_delphi_fragment() throws RecognitionException {   
        Token TK_5=null;

        // delphi.g:4582:171: (TK_5= ';' )
        // delphi.g:4582:171: TK_5= ';'
        {
        TK_5=(Token)match(input,19,FOLLOW_19_in_synpred177_delphi4636); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred177_delphi

    // $ANTLR start synpred178_delphi
    public final void synpred178_delphi_fragment() throws RecognitionException {   
        Token TK_2=null;

        // delphi.g:4664:81: (TK_2= ';' )
        // delphi.g:4664:81: TK_2= ';'
        {
        TK_2=(Token)match(input,19,FOLLOW_19_in_synpred178_delphi4684); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred178_delphi

    // $ANTLR start synpred181_delphi
    public final void synpred181_delphi_fragment() throws RecognitionException {   
        Token TK_1=null;
        List list_identGen=null;
        RuleReturnScope identGen = null;
        // delphi.g:4777:18: (identGen+= ident TK_1= ':' )
        // delphi.g:4777:18: identGen+= ident TK_1= ':'
        {
        pushFollow(FOLLOW_ident_in_synpred181_delphi4785);
        identGen=ident();

        state._fsp--;
        if (state.failed) return ;
        if (list_identGen==null) list_identGen=new ArrayList();
        list_identGen.add(identGen);

        TK_1=(Token)match(input,37,FOLLOW_37_in_synpred181_delphi4790); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred181_delphi

    // $ANTLR start synpred185_delphi
    public final void synpred185_delphi_fragment() throws RecognitionException {   
        Token TK_5=null;
        List list_stmtListGen=null;
        RuleReturnScope stmtListGen = null;
        // delphi.g:4777:123: ( (TK_5= 'else' )? stmtListGen+= stmtList )
        // delphi.g:4777:123: (TK_5= 'else' )? stmtListGen+= stmtList
        {
        // delphi.g:4777:123: (TK_5= 'else' )?
        int alt194=2;
        int LA194_0 = input.LA(1);

        if ( (LA194_0==107) ) {
            alt194=1;
        }
        switch (alt194) {
            case 1 :
                // delphi.g:4777:125: TK_5= 'else'
                {
                TK_5=(Token)match(input,107,FOLLOW_107_in_synpred185_delphi4828); if (state.failed) return ;

                }
                break;

        }

        pushFollow(FOLLOW_stmtList_in_synpred185_delphi4835);
        stmtListGen=stmtList();

        state._fsp--;
        if (state.failed) return ;
        if (list_stmtListGen==null) list_stmtListGen=new ArrayList();
        list_stmtListGen.add(stmtListGen);


        }
    }
    // $ANTLR end synpred185_delphi

    // $ANTLR start synpred186_delphi
    public final void synpred186_delphi_fragment() throws RecognitionException {   
        Token IDGen=null;

        // delphi.g:4860:19: (IDGen= ID )
        // delphi.g:4860:19: IDGen= ID
        {
        IDGen=(Token)match(input,ID,FOLLOW_ID_in_synpred186_delphi4870); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred186_delphi

    // $ANTLR start synpred201_delphi
    public final void synpred201_delphi_fragment() throws RecognitionException {   
        Token TK_1=null;
        Token TK_2=null;

        // delphi.g:5254:43: (TK_1= 'array' TK_2= 'of' )
        // delphi.g:5254:43: TK_1= 'array' TK_2= 'of'
        {
        TK_1=(Token)match(input,67,FOLLOW_67_in_synpred201_delphi5290); if (state.failed) return ;
        TK_2=(Token)match(input,40,FOLLOW_40_in_synpred201_delphi5295); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred201_delphi

    // $ANTLR start synpred204_delphi
    public final void synpred204_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_identListGen=null;
        List list_typeGen=null;
        RuleReturnScope identListGen = null;
        RuleReturnScope typeGen = null;
        // delphi.g:5254:5: (identListGen+= identList (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )? )
        // delphi.g:5254:5: identListGen+= identList (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )?
        {
        pushFollow(FOLLOW_identList_in_synpred204_delphi5277);
        identListGen=identList();

        state._fsp--;
        if (state.failed) return ;
        if (list_identListGen==null) list_identListGen=new ArrayList();
        list_identListGen.add(identListGen);

        // delphi.g:5254:29: (TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' ) )?
        int alt200=2;
        int LA200_0 = input.LA(1);

        if ( (LA200_0==37) ) {
            alt200=1;
        }
        switch (alt200) {
            case 1 :
                // delphi.g:5254:31: TK_0= ':' ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' )
                {
                TK_0=(Token)match(input,37,FOLLOW_37_in_synpred204_delphi5283); if (state.failed) return ;
                // delphi.g:5254:40: ( (TK_1= 'array' TK_2= 'of' )? typeGen+= type | TK_3= 'file' )
                int alt199=2;
                int LA199_0 = input.LA(1);

                if ( ((LA199_0>=ID && LA199_0<=INT)||(LA199_0>=QVALUE && LA199_0<=DQVALUE)||LA199_0==17||LA199_0==39||(LA199_0>=41 && LA199_0<=61)||(LA199_0>=63 && LA199_0<=68)||LA199_0==70||LA199_0==72||LA199_0==74||(LA199_0>=78 && LA199_0<=82)||LA199_0==100||(LA199_0>=124 && LA199_0<=125)||LA199_0==163) ) {
                    alt199=1;
                }
                else if ( (LA199_0==73) ) {
                    int LA199_2 = input.LA(2);

                    if ( (LA199_2==40) ) {
                        alt199=1;
                    }
                    else if ( (LA199_2==EOF) ) {
                        alt199=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return ;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 2, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 0, input);

                    throw nvae;
                }
                switch (alt199) {
                    case 1 :
                        // delphi.g:5254:41: (TK_1= 'array' TK_2= 'of' )? typeGen+= type
                        {
                        // delphi.g:5254:41: (TK_1= 'array' TK_2= 'of' )?
                        int alt198=2;
                        alt198 = dfa198.predict(input);
                        switch (alt198) {
                            case 1 :
                                // delphi.g:5254:43: TK_1= 'array' TK_2= 'of'
                                {
                                TK_1=(Token)match(input,67,FOLLOW_67_in_synpred204_delphi5290); if (state.failed) return ;
                                TK_2=(Token)match(input,40,FOLLOW_40_in_synpred204_delphi5295); if (state.failed) return ;

                                }
                                break;

                        }

                        pushFollow(FOLLOW_type_in_synpred204_delphi5302);
                        typeGen=type();

                        state._fsp--;
                        if (state.failed) return ;
                        if (list_typeGen==null) list_typeGen=new ArrayList();
                        list_typeGen.add(typeGen);


                        }
                        break;
                    case 2 :
                        // delphi.g:5254:87: TK_3= 'file'
                        {
                        TK_3=(Token)match(input,73,FOLLOW_73_in_synpred204_delphi5309); if (state.failed) return ;

                        }
                        break;

                }


                }
                break;

        }


        }
    }
    // $ANTLR end synpred204_delphi

    // $ANTLR start synpred226_delphi
    public final void synpred226_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;

        // delphi.g:5695:40: (TK_0= ';' TK_1= 'virtual' )
        // delphi.g:5695:40: TK_0= ';' TK_1= 'virtual'
        {
        TK_0=(Token)match(input,19,FOLLOW_19_in_synpred226_delphi5772); if (state.failed) return ;
        TK_1=(Token)match(input,130,FOLLOW_130_in_synpred226_delphi5777); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred226_delphi

    // $ANTLR start synpred237_delphi
    public final void synpred237_delphi_fragment() throws RecognitionException {   
        List list_classVisibilityGen=null;
        RuleReturnScope classVisibilityGen = null;
        // delphi.g:6026:56: (classVisibilityGen+= classVisibility )
        // delphi.g:6026:56: classVisibilityGen+= classVisibility
        {
        pushFollow(FOLLOW_classVisibility_in_synpred237_delphi6098);
        classVisibilityGen=classVisibility();

        state._fsp--;
        if (state.failed) return ;
        if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
        list_classVisibilityGen.add(classVisibilityGen);


        }
    }
    // $ANTLR end synpred237_delphi

    // $ANTLR start synpred248_delphi
    public final void synpred248_delphi_fragment() throws RecognitionException {   
        List list_classPropertyGen=null;
        RuleReturnScope classPropertyGen = null;
        // delphi.g:6287:21: (classPropertyGen+= classProperty )
        // delphi.g:6287:21: classPropertyGen+= classProperty
        {
        pushFollow(FOLLOW_classProperty_in_synpred248_delphi6356);
        classPropertyGen=classProperty();

        state._fsp--;
        if (state.failed) return ;
        if (list_classPropertyGen==null) list_classPropertyGen=new ArrayList();
        list_classPropertyGen.add(classPropertyGen);


        }
    }
    // $ANTLR end synpred248_delphi

    // $ANTLR start synpred249_delphi
    public final void synpred249_delphi_fragment() throws RecognitionException {   
        List list_classVisibilityGen=null;
        RuleReturnScope classVisibilityGen = null;
        // delphi.g:6308:4: (classVisibilityGen+= classVisibility )
        // delphi.g:6308:4: classVisibilityGen+= classVisibility
        {
        pushFollow(FOLLOW_classVisibility_in_synpred249_delphi6380);
        classVisibilityGen=classVisibility();

        state._fsp--;
        if (state.failed) return ;
        if (list_classVisibilityGen==null) list_classVisibilityGen=new ArrayList();
        list_classVisibilityGen.add(classVisibilityGen);


        }
    }
    // $ANTLR end synpred249_delphi

    // $ANTLR start synpred252_delphi
    public final void synpred252_delphi_fragment() throws RecognitionException {   
        List list_propertySpecifiersGen=null;
        RuleReturnScope propertySpecifiersGen = null;
        // delphi.g:6357:84: (propertySpecifiersGen+= propertySpecifiers )
        // delphi.g:6357:84: propertySpecifiersGen+= propertySpecifiers
        {
        pushFollow(FOLLOW_propertySpecifiers_in_synpred252_delphi6442);
        propertySpecifiersGen=propertySpecifiers();

        state._fsp--;
        if (state.failed) return ;
        if (list_propertySpecifiersGen==null) list_propertySpecifiersGen=new ArrayList();
        list_propertySpecifiersGen.add(propertySpecifiersGen);


        }
    }
    // $ANTLR end synpred252_delphi

    // $ANTLR start synpred259_delphi
    public final void synpred259_delphi_fragment() throws RecognitionException {   
        List list_identGen_2=null;
        RuleReturnScope identGen_2 = null;
        // delphi.g:6539:134: (identGen_2+= ident )
        // delphi.g:6539:134: identGen_2+= ident
        {
        pushFollow(FOLLOW_ident_in_synpred259_delphi6636);
        identGen_2=ident();

        state._fsp--;
        if (state.failed) return ;
        if (list_identGen_2==null) list_identGen_2=new ArrayList();
        list_identGen_2.add(identGen_2);


        }
    }
    // $ANTLR end synpred259_delphi

    // $ANTLR start synpred268_delphi
    public final void synpred268_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        List list_unitIdGen=null;
        RuleReturnScope unitIdGen = null;
        // delphi.g:6840:6: (unitIdGen+= unitId TK_0= '.' )
        // delphi.g:6840:6: unitIdGen+= unitId TK_0= '.'
        {
        pushFollow(FOLLOW_unitId_in_synpred268_delphi6892);
        unitIdGen=unitId();

        state._fsp--;
        if (state.failed) return ;
        if (list_unitIdGen==null) list_unitIdGen=new ArrayList();
        list_unitIdGen.add(unitIdGen);

        TK_0=(Token)match(input,20,FOLLOW_20_in_synpred268_delphi6897); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred268_delphi

    // $ANTLR start synpred269_delphi
    public final void synpred269_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        List list_unitIdGen=null;
        RuleReturnScope unitIdGen = null;
        // delphi.g:6877:7: (unitIdGen+= unitId TK_0= '.' )
        // delphi.g:6877:7: unitIdGen+= unitId TK_0= '.'
        {
        pushFollow(FOLLOW_unitId_in_synpred269_delphi6930);
        unitIdGen=unitId();

        state._fsp--;
        if (state.failed) return ;
        if (list_unitIdGen==null) list_unitIdGen=new ArrayList();
        list_unitIdGen.add(unitIdGen);

        TK_0=(Token)match(input,20,FOLLOW_20_in_synpred269_delphi6935); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred269_delphi

    // $ANTLR start synpred271_delphi
    public final void synpred271_delphi_fragment() throws RecognitionException {   
        Token IDGen=null;
        Token TK_0=null;
        Token IDGen_1_List=null;
        List list_IDGen_1_List=null;

        // delphi.g:6914:6: (IDGen= ID (TK_0= '.' IDGen_1_List+= ID )* )
        // delphi.g:6914:6: IDGen= ID (TK_0= '.' IDGen_1_List+= ID )*
        {
        IDGen=(Token)match(input,ID,FOLLOW_ID_in_synpred271_delphi6967); if (state.failed) return ;
        // delphi.g:6914:15: (TK_0= '.' IDGen_1_List+= ID )*
        loop203:
        do {
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==20) ) {
                alt203=1;
            }


            switch (alt203) {
        	case 1 :
        	    // delphi.g:6914:17: TK_0= '.' IDGen_1_List+= ID
        	    {
        	    TK_0=(Token)match(input,20,FOLLOW_20_in_synpred271_delphi6973); if (state.failed) return ;
        	    IDGen_1_List=(Token)match(input,ID,FOLLOW_ID_in_synpred271_delphi6978); if (state.failed) return ;
        	    if (list_IDGen_1_List==null) list_IDGen_1_List=new ArrayList();
        	    list_IDGen_1_List.add(IDGen_1_List);


        	    }
        	    break;

        	default :
        	    break loop203;
            }
        } while (true);


        }
    }
    // $ANTLR end synpred271_delphi

    // $ANTLR start synpred273_delphi
    public final void synpred273_delphi_fragment() throws RecognitionException {   
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        // delphi.g:7021:6: (expressionGen+= expression )
        // delphi.g:7021:6: expressionGen+= expression
        {
        pushFollow(FOLLOW_expression_in_synpred273_delphi7078);
        expressionGen=expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_expressionGen==null) list_expressionGen=new ArrayList();
        list_expressionGen.add(expressionGen);


        }
    }
    // $ANTLR end synpred273_delphi

    // $ANTLR start synpred275_delphi
    public final void synpred275_delphi_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_constExprGen=null;
        List list_constExprGen_1=null;
        RuleReturnScope constExprGen = null;
        RuleReturnScope constExprGen_1 = null;
        // delphi.g:7039:5: (TK_0= '(' constExprGen+= constExpr (TK_1= ',' constExprGen_1+= constExpr )* TK_2= ')' )
        // delphi.g:7039:5: TK_0= '(' constExprGen+= constExpr (TK_1= ',' constExprGen_1+= constExpr )* TK_2= ')'
        {
        TK_0=(Token)match(input,17,FOLLOW_17_in_synpred275_delphi7090); if (state.failed) return ;
        pushFollow(FOLLOW_constExpr_in_synpred275_delphi7095);
        constExprGen=constExpr();

        state._fsp--;
        if (state.failed) return ;
        if (list_constExprGen==null) list_constExprGen=new ArrayList();
        list_constExprGen.add(constExprGen);

        // delphi.g:7039:39: (TK_1= ',' constExprGen_1+= constExpr )*
        loop204:
        do {
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==33) ) {
                alt204=1;
            }


            switch (alt204) {
        	case 1 :
        	    // delphi.g:7039:41: TK_1= ',' constExprGen_1+= constExpr
        	    {
        	    TK_1=(Token)match(input,33,FOLLOW_33_in_synpred275_delphi7101); if (state.failed) return ;
        	    pushFollow(FOLLOW_constExpr_in_synpred275_delphi7106);
        	    constExprGen_1=constExpr();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    if (list_constExprGen_1==null) list_constExprGen_1=new ArrayList();
        	    list_constExprGen_1.add(constExprGen_1);


        	    }
        	    break;

        	default :
        	    break loop204;
            }
        } while (true);

        TK_2=(Token)match(input,18,FOLLOW_18_in_synpred275_delphi7112); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred275_delphi

    // Delegated rules

    public final boolean synpred46_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred46_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred45_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred45_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred42_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred42_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred186_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred186_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred271_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred271_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred166_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred154_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred154_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred152_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred152_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred143_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred143_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred107_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred107_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred114_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred114_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred116_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred116_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred268_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred268_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred111_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred111_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred103_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred103_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred248_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred248_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred105_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred105_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred252_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred252_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred249_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred249_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_delphi() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_delphi_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA28 dfa28 = new DFA28(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA59 dfa59 = new DFA59(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA73 dfa73 = new DFA73(this);
    protected DFA76 dfa76 = new DFA76(this);
    protected DFA75 dfa75 = new DFA75(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA198 dfa198 = new DFA198(this);
    static final String DFA28_eotS =
        "\14\uffff";
    static final String DFA28_eofS =
        "\14\uffff";
    static final String DFA28_minS =
        "\1\4\1\21\3\4\2\uffff\1\44\1\112\1\24\1\22\1\44";
    static final String DFA28_maxS =
        "\1\144\1\45\3\4\2\uffff\1\45\1\112\1\45\1\22\1\45";
    static final String DFA28_acceptS =
        "\5\uffff\1\1\1\2\5\uffff";
    static final String DFA28_specialS =
        "\14\uffff}>";
    static final String[] DFA28_transitionS = {
            "\1\1\137\uffff\1\2",
            "\1\3\2\uffff\1\4\17\uffff\1\5\1\6",
            "\1\7",
            "\1\10",
            "\1\11",
            "",
            "",
            "\1\5\1\6",
            "\1\12",
            "\1\4\17\uffff\1\5\1\6",
            "\1\13",
            "\1\5\1\6"
    };

    static final short[] DFA28_eot = DFA.unpackEncodedString(DFA28_eotS);
    static final short[] DFA28_eof = DFA.unpackEncodedString(DFA28_eofS);
    static final char[] DFA28_min = DFA.unpackEncodedStringToUnsignedChars(DFA28_minS);
    static final char[] DFA28_max = DFA.unpackEncodedStringToUnsignedChars(DFA28_maxS);
    static final short[] DFA28_accept = DFA.unpackEncodedString(DFA28_acceptS);
    static final short[] DFA28_special = DFA.unpackEncodedString(DFA28_specialS);
    static final short[][] DFA28_transition;

    static {
        int numStates = DFA28_transitionS.length;
        DFA28_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA28_transition[i] = DFA.unpackEncodedString(DFA28_transitionS[i]);
        }
    }

    class DFA28 extends DFA {

        public DFA28(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 28;
            this.eot = DFA28_eot;
            this.eof = DFA28_eof;
            this.min = DFA28_min;
            this.max = DFA28_max;
            this.accept = DFA28_accept;
            this.special = DFA28_special;
            this.transition = DFA28_transition;
        }
        public String getDescription() {
            return "995:1: constantDecl returns [Node returnNode] : (identGen+= ident TK_0= '=' constExprGen+= constExpr (portabilityDirectiveGen+= portabilityDirective )? | identGen+= ident TK_0= ':' typeIdGen+= typeId TK_1= '=' typedConstantGen+= typedConstant (portabilityDirectiveGen+= portabilityDirective )? );";
        }
    }
    static final String DFA35_eotS =
        "\25\uffff";
    static final String DFA35_eofS =
        "\25\uffff";
    static final String DFA35_minS =
        "\1\4\12\uffff\1\0\11\uffff";
    static final String DFA35_maxS =
        "\1\u00a3\12\uffff\1\0\11\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\14\uffff\1\4\4\uffff\1\2\1\3";
    static final String DFA35_specialS =
        "\13\uffff\1\0\11\uffff}>";
    static final String[] DFA35_transitionS = {
            "\2\1\1\uffff\2\1\10\uffff\1\13\1\uffff\1\16\4\uffff\1\16\1"+
            "\uffff\2\16\5\uffff\1\16\42\uffff\1\1\11\uffff\5\1\21\uffff"+
            "\1\1\76\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "1235:4: (constExprGen+= constExpr | arrayConstantGen+= arrayConstant | recordConstantGen+= recordConstant )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA35_11 = input.LA(1);

                         
                        int index35_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred45_delphi()) ) {s = 1;}

                        else if ( (synpred46_delphi()) ) {s = 19;}

                        else if ( (synpred47_delphi()) ) {s = 20;}

                         
                        input.seek(index35_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 35, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\61\uffff";
    static final String DFA37_eofS =
        "\61\uffff";
    static final String DFA37_minS =
        "\1\4\2\0\47\uffff\1\0\6\uffff";
    static final String DFA37_maxS =
        "\1\u00a3\2\0\47\uffff\1\0\6\uffff";
    static final String DFA37_acceptS =
        "\3\uffff\1\2\35\uffff\1\3\4\uffff\1\4\1\5\3\uffff\1\6\1\uffff\1"+
        "\7\1\uffff\1\1\1\10";
    static final String DFA37_specialS =
        "\1\uffff\1\0\1\1\47\uffff\1\2\6\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\1\1\3\1\uffff\2\3\10\uffff\1\3\25\uffff\1\52\1\uffff\23"+
            "\3\2\55\1\uffff\3\47\2\41\1\3\1\uffff\1\41\1\uffff\2\41\1\46"+
            "\3\uffff\5\3\21\uffff\1\2\27\uffff\2\53\45\uffff\1\3",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "1388:1: type returns [Node returnNode] : (typeIdGen+= typeId | simpleTypeGen+= simpleType | strucTypeGen+= strucType | pointerTypeGen+= pointerType | stringTypeGen+= stringType | procedureTypeGen+= procedureType | variantTypeGen+= variantType | classRefTypeGen+= classRefType );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA37_1 = input.LA(1);

                         
                        int index37_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_delphi()) ) {s = 47;}

                        else if ( (synpred50_delphi()) ) {s = 3;}

                         
                        input.seek(index37_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA37_2 = input.LA(1);

                         
                        int index37_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_delphi()) ) {s = 47;}

                        else if ( (synpred50_delphi()) ) {s = 3;}

                         
                        input.seek(index37_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA37_42 = input.LA(1);

                         
                        int index37_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_delphi()) ) {s = 43;}

                        else if ( (true) ) {s = 48;}

                         
                        input.seek(index37_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 37, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA41_eotS =
        "\33\uffff";
    static final String DFA41_eofS =
        "\33\uffff";
    static final String DFA41_minS =
        "\1\4\12\uffff\1\0\17\uffff";
    static final String DFA41_maxS =
        "\1\u00a3\12\uffff\1\0\17\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\1\14\uffff\1\3\13\uffff\1\2";
    static final String DFA41_specialS =
        "\13\uffff\1\0\17\uffff}>";
    static final String[] DFA41_transitionS = {
            "\2\1\1\uffff\2\1\10\uffff\1\13\36\uffff\14\16\10\uffff\1\1"+
            "\11\uffff\5\1\21\uffff\1\1\76\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "1756:1: ordinalType returns [Node returnNode] : (subrangeTypeGen+= subrangeType | enumeratedTypeGen+= enumeratedType | ordIdentGen+= ordIdent );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA41_11 = input.LA(1);

                         
                        int index41_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred65_delphi()) ) {s = 1;}

                        else if ( (synpred66_delphi()) ) {s = 26;}

                         
                        input.seek(index41_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 41, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA59_eotS =
        "\20\uffff";
    static final String DFA59_eofS =
        "\20\uffff";
    static final String DFA59_minS =
        "\1\4\1\21\3\4\2\uffff\1\45\1\112\1\21\1\22\1\4\1\45\1\21\1\4\1"+
        "\24";
    static final String DFA59_maxS =
        "\1\144\1\50\2\4\1\144\2\uffff\1\50\1\112\1\50\1\22\1\144\2\50\1"+
        "\4\1\50";
    static final String DFA59_acceptS =
        "\5\uffff\1\2\1\1\11\uffff";
    static final String DFA59_specialS =
        "\20\uffff}>";
    static final String[] DFA59_transitionS = {
            "\1\1\137\uffff\1\2",
            "\1\3\2\uffff\1\4\20\uffff\1\6\2\uffff\1\5",
            "\1\7",
            "\1\10",
            "\1\11\137\uffff\1\5",
            "",
            "",
            "\1\6\2\uffff\1\5",
            "\1\12",
            "\1\5\2\uffff\1\13\20\uffff\1\6\2\uffff\1\5",
            "\1\14",
            "\1\15\137\uffff\1\5",
            "\1\6\2\uffff\1\5",
            "\1\5\2\uffff\1\16\20\uffff\1\6\2\uffff\1\5",
            "\1\17",
            "\1\16\20\uffff\1\6\2\uffff\1\5"
    };

    static final short[] DFA59_eot = DFA.unpackEncodedString(DFA59_eotS);
    static final short[] DFA59_eof = DFA.unpackEncodedString(DFA59_eofS);
    static final char[] DFA59_min = DFA.unpackEncodedStringToUnsignedChars(DFA59_minS);
    static final char[] DFA59_max = DFA.unpackEncodedStringToUnsignedChars(DFA59_maxS);
    static final short[] DFA59_accept = DFA.unpackEncodedString(DFA59_acceptS);
    static final short[] DFA59_special = DFA.unpackEncodedString(DFA59_specialS);
    static final short[][] DFA59_transition;

    static {
        int numStates = DFA59_transitionS.length;
        DFA59_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA59_transition[i] = DFA.unpackEncodedString(DFA59_transitionS[i]);
        }
    }

    class DFA59 extends DFA {

        public DFA59(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 59;
            this.eot = DFA59_eot;
            this.eof = DFA59_eof;
            this.min = DFA59_min;
            this.max = DFA59_max;
            this.accept = DFA59_accept;
            this.special = DFA59_special;
            this.transition = DFA59_transition;
        }
        public String getDescription() {
            return "2465:17: (identGen+= ident TK_1= ':' )?";
        }
    }
    static final String DFA71_eotS =
        "\117\uffff";
    static final String DFA71_eofS =
        "\1\1\116\uffff";
    static final String DFA71_minS =
        "\1\4\53\uffff\1\0\42\uffff";
    static final String DFA71_maxS =
        "\1\u00a3\53\uffff\1\0\42\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\2\105\uffff\1\1\7\uffff";
    static final String DFA71_specialS =
        "\54\uffff\1\0\42\uffff}>";
    static final String[] DFA71_transitionS = {
            "\5\1\10\uffff\4\1\2\uffff\2\1\1\uffff\2\1\1\uffff\7\1\1\54"+
            "\4\1\25\uffff\1\1\5\uffff\2\1\1\uffff\1\1\4\uffff\7\1\10\107"+
            "\11\uffff\1\1\1\uffff\24\1\1\uffff\3\1\26\uffff\2\1\5\uffff"+
            "\6\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "()* loopback of 2874:43: (relOpGen+= relOp simpleExpressionGen_1+= simpleExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_44 = input.LA(1);

                         
                        int index71_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred111_delphi()) ) {s = 71;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index71_44);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA73_eotS =
        "\121\uffff";
    static final String DFA73_eofS =
        "\1\1\120\uffff";
    static final String DFA73_minS =
        "\1\4\66\uffff\2\0\30\uffff";
    static final String DFA73_maxS =
        "\1\u00a3\66\uffff\2\0\30\uffff";
    static final String DFA73_acceptS =
        "\1\uffff\1\2\115\uffff\1\1\1\uffff";
    static final String DFA73_specialS =
        "\67\uffff\1\0\1\1\30\uffff}>";
    static final String[] DFA73_transitionS = {
            "\5\1\10\uffff\4\1\2\uffff\2\1\1\uffff\2\1\1\uffff\14\1\25\uffff"+
            "\1\1\5\uffff\2\1\1\uffff\1\1\4\uffff\2\1\1\67\1\70\13\1\2\117"+
            "\7\uffff\1\1\1\uffff\24\1\1\uffff\3\1\26\uffff\2\1\5\uffff\6"+
            "\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA73_eot = DFA.unpackEncodedString(DFA73_eotS);
    static final short[] DFA73_eof = DFA.unpackEncodedString(DFA73_eofS);
    static final char[] DFA73_min = DFA.unpackEncodedStringToUnsignedChars(DFA73_minS);
    static final char[] DFA73_max = DFA.unpackEncodedStringToUnsignedChars(DFA73_maxS);
    static final short[] DFA73_accept = DFA.unpackEncodedString(DFA73_acceptS);
    static final short[] DFA73_special = DFA.unpackEncodedString(DFA73_specialS);
    static final short[][] DFA73_transition;

    static {
        int numStates = DFA73_transitionS.length;
        DFA73_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA73_transition[i] = DFA.unpackEncodedString(DFA73_transitionS[i]);
        }
    }

    class DFA73 extends DFA {

        public DFA73(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 73;
            this.eot = DFA73_eot;
            this.eof = DFA73_eof;
            this.min = DFA73_min;
            this.max = DFA73_max;
            this.accept = DFA73_accept;
            this.special = DFA73_special;
            this.transition = DFA73_transition;
        }
        public String getDescription() {
            return "()* loopback of 2918:44: (addOpGen+= addOp termGen_1+= term )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA73_55 = input.LA(1);

                         
                        int index73_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_delphi()) ) {s = 79;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_55);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA73_56 = input.LA(1);

                         
                        int index73_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred114_delphi()) ) {s = 79;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index73_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 73, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA76_eotS =
        "\16\uffff";
    static final String DFA76_eofS =
        "\16\uffff";
    static final String DFA76_minS =
        "\1\4\2\0\13\uffff";
    static final String DFA76_maxS =
        "\1\u00a3\2\0\13\uffff";
    static final String DFA76_acceptS =
        "\3\uffff\1\2\1\3\1\uffff\1\4\1\uffff\1\5\1\6\1\7\1\10\1\1\1\11";
    static final String DFA76_specialS =
        "\1\uffff\1\0\1\1\13\uffff}>";
    static final String[] DFA76_transitionS = {
            "\1\1\1\4\1\uffff\2\6\10\uffff\1\11\62\uffff\1\13\13\uffff\1"+
            "\3\1\10\1\12\21\uffff\1\2\76\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA76_eot = DFA.unpackEncodedString(DFA76_eotS);
    static final short[] DFA76_eof = DFA.unpackEncodedString(DFA76_eofS);
    static final char[] DFA76_min = DFA.unpackEncodedStringToUnsignedChars(DFA76_minS);
    static final char[] DFA76_max = DFA.unpackEncodedStringToUnsignedChars(DFA76_maxS);
    static final short[] DFA76_accept = DFA.unpackEncodedString(DFA76_acceptS);
    static final short[] DFA76_special = DFA.unpackEncodedString(DFA76_specialS);
    static final short[][] DFA76_transition;

    static {
        int numStates = DFA76_transitionS.length;
        DFA76_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA76_transition[i] = DFA.unpackEncodedString(DFA76_transitionS[i]);
        }
    }

    class DFA76 extends DFA {

        public DFA76(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 76;
            this.eot = DFA76_eot;
            this.eof = DFA76_eof;
            this.min = DFA76_min;
            this.max = DFA76_max;
            this.accept = DFA76_accept;
            this.special = DFA76_special;
            this.transition = DFA76_transition;
        }
        public String getDescription() {
            return "3015:1: factor returns [Node returnNode] : (designatorGen+= designator (TK_0= '(' exprListGen+= exprList TK_1= ')' )? | TK_0= '@' designatorGen+= designator | numberGen+= number | stringGen+= string | TK_0= 'nil' | TK_0= '(' expressionGen+= expression TK_1= ')' | TK_0= 'not' factorGen+= factor | setConstructorGen+= setConstructor | typeIdGen+= typeId TK_0= '(' expressionGen+= expression TK_1= ')' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA76_1 = input.LA(1);

                         
                        int index76_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_delphi()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index76_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA76_2 = input.LA(1);

                         
                        int index76_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred117_delphi()) ) {s = 12;}

                        else if ( (true) ) {s = 13;}

                         
                        input.seek(index76_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 76, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA75_eotS =
        "\131\uffff";
    static final String DFA75_eofS =
        "\1\2\130\uffff";
    static final String DFA75_minS =
        "\1\4\1\0\127\uffff";
    static final String DFA75_maxS =
        "\1\u00a3\1\0\127\uffff";
    static final String DFA75_acceptS =
        "\2\uffff\1\2\125\uffff\1\1";
    static final String DFA75_specialS =
        "\1\uffff\1\0\127\uffff}>";
    static final String[] DFA75_transitionS = {
            "\5\2\10\uffff\1\1\3\2\2\uffff\2\2\1\uffff\2\2\1\uffff\14\2"+
            "\25\uffff\1\2\5\uffff\2\2\1\uffff\1\2\4\uffff\31\2\1\uffff\24"+
            "\2\1\uffff\3\2\26\uffff\2\2\5\uffff\6\2\2\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA75_eot = DFA.unpackEncodedString(DFA75_eotS);
    static final short[] DFA75_eof = DFA.unpackEncodedString(DFA75_eofS);
    static final char[] DFA75_min = DFA.unpackEncodedStringToUnsignedChars(DFA75_minS);
    static final char[] DFA75_max = DFA.unpackEncodedStringToUnsignedChars(DFA75_maxS);
    static final short[] DFA75_accept = DFA.unpackEncodedString(DFA75_acceptS);
    static final short[] DFA75_special = DFA.unpackEncodedString(DFA75_specialS);
    static final short[][] DFA75_transition;

    static {
        int numStates = DFA75_transitionS.length;
        DFA75_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA75_transition[i] = DFA.unpackEncodedString(DFA75_transitionS[i]);
        }
    }

    class DFA75 extends DFA {

        public DFA75(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 75;
            this.eot = DFA75_eot;
            this.eof = DFA75_eof;
            this.min = DFA75_min;
            this.max = DFA75_max;
            this.accept = DFA75_accept;
            this.special = DFA75_special;
            this.transition = DFA75_transition;
        }
        public String getDescription() {
            return "3016:31: (TK_0= '(' exprListGen+= exprList TK_1= ')' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA75_1 = input.LA(1);

                         
                        int index75_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred116_delphi()) ) {s = 88;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index75_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 75, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA81_eotS =
        "\133\uffff";
    static final String DFA81_eofS =
        "\1\1\132\uffff";
    static final String DFA81_minS =
        "\1\4\110\uffff\1\0\21\uffff";
    static final String DFA81_maxS =
        "\1\u00a3\110\uffff\1\0\21\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\3\127\uffff\1\2\1\1";
    static final String DFA81_specialS =
        "\111\uffff\1\0\21\uffff}>";
    static final String[] DFA81_transitionS = {
            "\5\1\10\uffff\4\1\2\uffff\2\1\1\uffff\2\1\1\uffff\14\1\25\uffff"+
            "\1\1\5\uffff\1\111\1\1\1\uffff\1\1\2\uffff\1\131\1\uffff\56"+
            "\1\1\uffff\3\1\26\uffff\2\1\5\uffff\6\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 3542:40: (TK_0= '[' exprListGen+= exprList TK_1= ']' | TK_2= '^' )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_73 = input.LA(1);

                         
                        int index81_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred143_delphi()) ) {s = 90;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index81_73);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA109_eotS =
        "\23\uffff";
    static final String DFA109_eofS =
        "\23\uffff";
    static final String DFA109_minS =
        "\1\4\1\21\1\4\1\uffff\2\4\1\uffff\4\21\1\4\2\21\1\4\1\21\1\4\1"+
        "\21\1\0";
    static final String DFA109_maxS =
        "\1\u00a3\1\170\1\4\1\uffff\1\u00a3\1\144\1\uffff\1\170\1\143\1"+
        "\170\1\143\1\144\2\170\1\144\1\170\1\144\1\170\1\0";
    static final String DFA109_acceptS =
        "\3\uffff\1\2\2\uffff\1\1\14\uffff";
    static final String DFA109_specialS =
        "\22\uffff\1\0}>";
    static final String[] DFA109_transitionS = {
            "\1\1\1\3\1\uffff\2\3\10\uffff\1\3\25\uffff\1\3\1\uffff\25\3"+
            "\1\uffff\6\3\1\uffff\1\3\1\uffff\3\3\3\uffff\5\3\21\uffff\1"+
            "\2\27\uffff\2\3\45\uffff\1\3",
            "\1\4\2\uffff\1\5\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1\3"+
            "\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\1\7",
            "",
            "\1\10\1\3\1\uffff\2\3\10\uffff\1\3\62\uffff\1\3\11\uffff\5"+
            "\3\21\uffff\1\3\76\uffff\1\3",
            "\1\11\137\uffff\1\3",
            "",
            "\1\3\2\uffff\1\3\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1\3"+
            "\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\2\3\1\uffff\1\3\14\uffff\1\3\2\uffff\1\3\37\uffff\1\3\5\uffff"+
            "\1\12\3\uffff\2\3\3\uffff\21\3",
            "\1\3\2\uffff\1\13\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1"+
            "\3\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\1\3\1\14\1\uffff\1\3\14\uffff\1\3\2\uffff\1\3\37\uffff\1"+
            "\3\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3",
            "\1\15\137\uffff\1\3",
            "\1\3\2\uffff\1\3\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1\3"+
            "\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\1\3\2\uffff\1\16\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1"+
            "\3\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\1\17\137\uffff\1\3",
            "\1\3\2\uffff\1\20\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1"+
            "\3\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\1\21\137\uffff\1\3",
            "\1\3\2\uffff\1\22\17\uffff\1\3\1\6\30\uffff\1\3\5\uffff\1"+
            "\3\5\uffff\1\3\3\uffff\2\3\3\uffff\21\3\24\uffff\1\3",
            "\1\uffff"
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "4777:16: (identGen+= ident TK_1= ':' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA109_18 = input.LA(1);

                         
                        int index109_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_delphi()) ) {s = 6;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index109_18);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA127_eotS =
        "\60\uffff";
    static final String DFA127_eofS =
        "\60\uffff";
    static final String DFA127_minS =
        "\1\4\1\0\56\uffff";
    static final String DFA127_maxS =
        "\1\u00a3\1\0\56\uffff";
    static final String DFA127_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA127_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA127_transitionS = {
            "\2\2\1\uffff\2\2\10\uffff\1\2\25\uffff\1\2\1\uffff\25\2\1\uffff"+
            "\4\2\1\1\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\5\2\21\uffff\1"+
            "\2\27\uffff\2\2\45\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "5254:41: (TK_1= 'array' TK_2= 'of' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_1 = input.LA(1);

                         
                        int index127_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_delphi()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index127_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA177_eotS =
        "\20\uffff";
    static final String DFA177_eofS =
        "\20\uffff";
    static final String DFA177_minS =
        "\1\4\12\uffff\1\0\4\uffff";
    static final String DFA177_maxS =
        "\1\u00a3\12\uffff\1\0\4\uffff";
    static final String DFA177_acceptS =
        "\1\uffff\1\1\14\uffff\1\2\1\3";
    static final String DFA177_specialS =
        "\13\uffff\1\0\4\uffff}>";
    static final String[] DFA177_transitionS = {
            "\2\1\1\uffff\2\1\10\uffff\1\13\62\uffff\1\1\11\uffff\5\1\21"+
            "\uffff\1\1\76\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "7019:1: constExpr returns [Node returnNode] : (expressionGen+= expression | TK_0= '(' constExprGen+= constExpr (TK_1= ',' constExprGen_1+= constExpr )* TK_2= ')' | TK_0= '(' recordConstExprGen+= recordConstExpr (TK_1= ',' recordConstExprGen_1+= recordConstExpr )* TK_2= ')' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA177_11 = input.LA(1);

                         
                        int index177_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_delphi()) ) {s = 1;}

                        else if ( (synpred275_delphi()) ) {s = 14;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index177_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 177, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA198_eotS =
        "\60\uffff";
    static final String DFA198_eofS =
        "\60\uffff";
    static final String DFA198_minS =
        "\1\4\1\0\56\uffff";
    static final String DFA198_maxS =
        "\1\u00a3\1\0\56\uffff";
    static final String DFA198_acceptS =
        "\2\uffff\1\2\54\uffff\1\1";
    static final String DFA198_specialS =
        "\1\uffff\1\0\56\uffff}>";
    static final String[] DFA198_transitionS = {
            "\2\2\1\uffff\2\2\10\uffff\1\2\25\uffff\1\2\1\uffff\25\2\1\uffff"+
            "\4\2\1\1\1\2\1\uffff\1\2\1\uffff\3\2\3\uffff\5\2\21\uffff\1"+
            "\2\27\uffff\2\2\45\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "5254:41: (TK_1= 'array' TK_2= 'of' )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred201_delphi()) ) {s = 47;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_program_in_mainRule55 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageDecl_in_mainRule69 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_library_in_mainRule83 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unit_in_mainRule96 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_16_in_program120 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_program125 = new BitSet(new long[]{0x00000000000A0000L});
    public static final BitSet FOLLOW_17_in_program131 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_program136 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_program141 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_program148 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_programBlock_in_program155 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_program160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_21_in_unit203 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_unit208 = new BitSet(new long[]{0x000000000D080000L});
    public static final BitSet FOLLOW_portabilityDirective_in_unit214 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_unit221 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_interfaceSection_in_unit226 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_implementationSection_in_unit231 = new BitSet(new long[]{0x0000000000800000L,0x0000010000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_initSection_in_unit236 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_unit241 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_22_in_packageDecl264 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_packageDecl269 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_packageDecl274 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_requiresClause_in_packageDecl280 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_containsClause_in_packageDecl288 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_packageDecl295 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_packageDecl300 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_library323 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_library328 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_library333 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_programBlock_in_library338 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_library343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_usesClause_in_programBlock367 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_block_in_programBlock374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_usesClause399 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_usesClause404 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_usesClause409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_portabilityDirective432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_portabilityDirective448 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_24_in_portabilityDirective464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_interfaceSection487 = new BitSet(new long[]{0x000000CC02000002L,0x3000000000001000L});
    public static final BitSet FOLLOW_usesClause_in_interfaceSection493 = new BitSet(new long[]{0x000000CC00000002L,0x3000000000001000L});
    public static final BitSet FOLLOW_interfaceDecl_in_interfaceSection501 = new BitSet(new long[]{0x000000CC00000002L,0x3000000000001000L});
    public static final BitSet FOLLOW_constSection_in_interfaceDecl526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSection_in_interfaceDecl542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varSection_in_interfaceDecl558 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exportedHeading_in_interfaceDecl574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureHeading_in_exportedHeading597 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_exportedHeading602 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x000000000003FFFFL});
    public static final BitSet FOLLOW_directive_in_exportedHeading608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionHeading_in_exportedHeading623 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_exportedHeading628 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L,0x000000000003FFFFL});
    public static final BitSet FOLLOW_directive_in_exportedHeading634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_29_in_implementationSection659 = new BitSet(new long[]{0x000000CD02000002L,0x3000000000001000L});
    public static final BitSet FOLLOW_usesClause_in_implementationSection665 = new BitSet(new long[]{0x000000CD00000002L,0x3000000000001000L});
    public static final BitSet FOLLOW_declSection_in_implementationSection673 = new BitSet(new long[]{0x000000CD00000002L,0x3000000000001000L});
    public static final BitSet FOLLOW_exportsStmt_in_implementationSection681 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_declSection_in_block707 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_exportsStmt_in_block715 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_compoundStmt_in_block722 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_exportsStmt_in_block728 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_ident_in_exportsItem756 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_30_in_exportsItem762 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_31_in_exportsItem769 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_exportsItem775 = new BitSet(new long[]{0x00000000C0000002L});
    public static final BitSet FOLLOW_31_in_exportsItem783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_exportsItem790 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_exportsItem795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_32_in_exportsStmt819 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_exportsItem_in_exportsStmt824 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_33_in_exportsStmt830 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_exportsItem_in_exportsStmt835 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_labelDeclSection_in_declSection861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constSection_in_declSection877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeSection_in_declSection894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_varSection_in_declSection911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureDeclSection_in_declSection928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_labelDeclSection951 = new BitSet(new long[]{0x0000000000000070L});
    public static final BitSet FOLLOW_labelId_in_labelDeclSection956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_constSection979 = new BitSet(new long[]{0x0000000000000012L,0x0000001000000000L});
    public static final BitSet FOLLOW_constantDecl_in_constSection985 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_constSection990 = new BitSet(new long[]{0x0000000000000012L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_constantDecl1015 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_constantDecl1020 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_constantDecl1025 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_constantDecl1031 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_constantDecl1049 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_constantDecl1054 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_constantDecl1059 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_constantDecl1064 = new BitSet(new long[]{0x000000000D0201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typedConstant_in_constantDecl1069 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_constantDecl1075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_38_in_typeSection1099 = new BitSet(new long[]{0x0000000000000012L,0x0000001000000000L});
    public static final BitSet FOLLOW_typeDecl_in_typeSection1105 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_typeSection1110 = new BitSet(new long[]{0x0000000000000012L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_typeDecl1135 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_typeDecl1140 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_38_in_typeDecl1146 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_typeDecl1153 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_typeDecl1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_typeDecl1173 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_typeDecl1178 = new BitSet(new long[]{0x000000C010000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_38_in_typeDecl1184 = new BitSet(new long[]{0x000000C010000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_restrictedType_in_typeDecl1191 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_typeDecl1197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constExpr_in_typedConstant1223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayConstant_in_typedConstant1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recordConstant_in_typedConstant1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_arrayConstant1262 = new BitSet(new long[]{0x00000002000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typedConstant_in_arrayConstant1267 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_arrayConstant1272 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_arrayConstant1277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_recordConstant1300 = new BitSet(new long[]{0x0000000000040010L,0x0000001000000000L});
    public static final BitSet FOLLOW_recordFieldConstant_in_recordConstant1306 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_recordConstant1311 = new BitSet(new long[]{0x0000000000040010L,0x0000001000000000L});
    public static final BitSet FOLLOW_18_in_recordConstant1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_recordFieldConstant1342 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_recordFieldConstant1347 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typedConstant_in_recordFieldConstant1352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeId_in_type1375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_type1391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_strucType_in_type1406 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pointerType_in_type1422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringType_in_type1438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureType_in_type1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantType_in_type1470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classRefType_in_type1486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_objectType_in_restrictedType1509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classType_in_restrictedType1525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceType_in_restrictedType1541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_classRefType1564 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_classRefType1569 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_classRefType1574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordinalType_in_simpleType1597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_realType_in_simpleType1611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_realType1634 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_42_in_realType1650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_43_in_realType1666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_realType1682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_realType1698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_realType1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_realType1730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subrangeType_in_ordinalType1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeratedType_in_ordinalType1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ordIdent_in_ordinalType1781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_ordIdent1804 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_ordIdent1820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_ordIdent1836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_ordIdent1852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_ordIdent1865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_ordIdent1880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_ordIdent1896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_55_in_ordIdent1912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_ordIdent1928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_ordIdent1944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_ordIdent1960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_ordIdent1976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_variantType1999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_variantType2015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constExpr_in_subrangeType2038 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_62_in_subrangeType2043 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_subrangeType2048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_enumeratedType2071 = new BitSet(new long[]{0x0000000000040010L,0x0000001000000000L});
    public static final BitSet FOLLOW_enumeratedTypeElement_in_enumeratedType2077 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_enumeratedType2082 = new BitSet(new long[]{0x0000000000040010L,0x0000001000000000L});
    public static final BitSet FOLLOW_18_in_enumeratedType2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_enumeratedTypeElement2112 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_enumeratedTypeElement2118 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_enumeratedTypeElement2123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_stringType2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_stringType2165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_stringType2181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_stringType2197 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_stringType2202 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_stringType2207 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_stringType2212 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_66_in_strucType2236 = new BitSet(new long[]{0x0000000000000000L,0x000000000000034CL});
    public static final BitSet FOLLOW_arrayType_in_strucType2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setType_in_strucType2251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fileType_in_strucType2258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recType_in_strucType2265 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_strucType2271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_arrayType2297 = new BitSet(new long[]{0x0000010000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_68_in_arrayType2303 = new BitSet(new long[]{0x0FFF0000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_ordinalType_in_arrayType2308 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_33_in_arrayType2314 = new BitSet(new long[]{0x0FFF0000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_ordinalType_in_arrayType2319 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_arrayType2326 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_arrayType2333 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_arrayType2338 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_arrayType2344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_recType2369 = new BitSet(new long[]{0x0000000000800010L,0x0000001000000000L});
    public static final BitSet FOLLOW_fieldList_in_recType2375 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_recType2382 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_recType2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDecl_in_fieldList2415 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_fieldList2420 = new BitSet(new long[]{0x0000000000080012L,0x0000001000000080L});
    public static final BitSet FOLLOW_variantSection_in_fieldList2428 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_fieldList2436 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identList_in_fieldDecl2461 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_fieldDecl2466 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_fieldDecl2471 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_fieldDecl2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_variantSection2502 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_ident_in_variantSection2508 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_variantSection2513 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_variantSection2520 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_variantSection2525 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_recVariant_in_variantSection2531 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_variantSection2536 = new BitSet(new long[]{0x00000000000201B2L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_recVariant2561 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_recVariant2566 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_recVariant2572 = new BitSet(new long[]{0x00000020000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_37_in_recVariant2579 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_recVariant2584 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_fieldList_in_recVariant2590 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_recVariant2596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_setType2619 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_setType2624 = new BitSet(new long[]{0x0FFF0000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_ordinalType_in_setType2629 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_setType2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_fileType2660 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_fileType2665 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_fileType2670 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_fileType2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_74_in_pointerType2701 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_pointerType2706 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_pointerType2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureHeading_in_procedureType2738 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_functionHeading_in_procedureType2745 = new BitSet(new long[]{0x0000010000000002L});
    public static final BitSet FOLLOW_40_in_procedureType2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_procedureType2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_varSection2782 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_varDecl_in_varSection2788 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_varSection2793 = new BitSet(new long[]{0x0000000000000012L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_varDecl2818 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_varDecl2823 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_varDecl2828 = new BitSet(new long[]{0x000000100D000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_77_in_varDecl2835 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_ident_in_varDecl2841 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_constExpr_in_varDecl2848 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_36_in_varDecl2857 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_varDecl2862 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_varDecl2870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleExpression_in_expression2896 = new BitSet(new long[]{0x0000001000000002L,0x0000000007F80000L});
    public static final BitSet FOLLOW_relOp_in_expression2902 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_simpleExpression_in_expression2907 = new BitSet(new long[]{0x0000001000000002L,0x0000000007F80000L});
    public static final BitSet FOLLOW_78_in_simpleExpression2933 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_79_in_simpleExpression2940 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_term_in_simpleExpression2947 = new BitSet(new long[]{0x0000000000000002L,0x000000001800C000L});
    public static final BitSet FOLLOW_addOp_in_simpleExpression2953 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_term_in_simpleExpression2958 = new BitSet(new long[]{0x0000000000000002L,0x000000001800C000L});
    public static final BitSet FOLLOW_factor_in_term2984 = new BitSet(new long[]{0x0000000000000002L,0x0000000FE0000000L});
    public static final BitSet FOLLOW_mulOp_in_term2990 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_factor_in_term2995 = new BitSet(new long[]{0x0000000000000002L,0x0000000FE0000000L});
    public static final BitSet FOLLOW_designator_in_factor3020 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_17_in_factor3026 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_factor3031 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_factor3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_factor3053 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_designator_in_factor3058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_factor3074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_string_in_factor3090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_factor3106 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_factor3122 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_factor3127 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_factor3132 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_factor3148 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_factor_in_factor3153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_setConstructor_in_factor3169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeId_in_factor3185 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_factor3190 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_factor3195 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_factor3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_36_in_relOp3223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_relOp3235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_relOp3251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_relOp3267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_relOp3283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_87_in_relOp3299 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_relOp3311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_relOp3327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_relOp3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_addOp3366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_addOp3382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_addOp3398 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_addOp3414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_mulOp3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_mulOp3452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_mulOp3468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_mulOp3484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_97_in_mulOp3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_98_in_mulOp3516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_99_in_mulOp3532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designatorSubPart_in_designator3554 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_20_in_designator3560 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_designator_in_designator3565 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designatorPart_in_designatorSubPart3592 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000410L});
    public static final BitSet FOLLOW_68_in_designatorSubPart3599 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_designatorSubPart3604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_designatorSubPart3609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000410L});
    public static final BitSet FOLLOW_74_in_designatorSubPart3616 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000410L});
    public static final BitSet FOLLOW_ID_in_designatorPart3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_100_in_designatorPart3656 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_reservedWord_in_designatorPart3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_designatorPart3673 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_designatorPart3678 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_designatorPart3683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_designatorPart3688 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_designatorPart3693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_setConstructor3716 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_setElement_in_setConstructor3722 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_33_in_setConstructor3728 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_setElement_in_setConstructor3733 = new BitSet(new long[]{0x0000000200000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_setConstructor3741 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_setElement3764 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_62_in_setElement3770 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_setElement3775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_exprList3800 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_33_in_exprList3806 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_exprList3811 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_labelId_in_statement3837 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_statement3842 = new BitSet(new long[]{0x000000CD02000010L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_simpleStatement_in_statement3850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_structStmt_in_statement3857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_stmtList3883 = new BitSet(new long[]{0x000000CD02080072L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_19_in_stmtList3889 = new BitSet(new long[]{0x000000CD02080072L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_designator_in_simpleStatement3916 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_simpleStatement3921 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_simpleStatement3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_simpleStatement3940 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_17_in_simpleStatement3946 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_simpleStatement3952 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_simpleStatement3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_102_in_simpleStatement3973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_103_in_simpleStatement3989 = new BitSet(new long[]{0x0000000000000070L});
    public static final BitSet FOLLOW_labelId_in_simpleStatement3994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compoundStmt_in_structStmt4017 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalStmt_in_structStmt4033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_loopStmt_in_structStmt4049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_withStmt_in_structStmt4065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_tryStmt_in_structStmt4081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raiseStmt_in_structStmt4097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assemblerStmt_in_structStmt4113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_compoundStmt4136 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_compoundStmt4141 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_compoundStmt4146 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ifStmt_in_conditionalStmt4169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseStmt_in_conditionalStmt4181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_ifStmt4204 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_ifStmt4209 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_106_in_ifStmt4214 = new BitSet(new long[]{0x000000CD02080070L,0x3A195BD000001080L});
    public static final BitSet FOLLOW_statement_in_ifStmt4219 = new BitSet(new long[]{0x0000000000080002L,0x0000080000000000L});
    public static final BitSet FOLLOW_19_in_ifStmt4226 = new BitSet(new long[]{0x0000000000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_107_in_ifStmt4234 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_statement_in_ifStmt4239 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_ifStmt4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_caseStmt4273 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_caseStmt4278 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_caseStmt4283 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_caseSelector_in_caseStmt4288 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_caseStmt4293 = new BitSet(new long[]{0x00000000000201B0L,0x000008100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_caseSelector_in_caseStmt4299 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_caseStmt4304 = new BitSet(new long[]{0x00000000000201B0L,0x000008100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_107_in_caseStmt4312 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_caseStmt4317 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_caseStmt4324 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_caseStmt4330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseLabel_in_caseSelector4353 = new BitSet(new long[]{0x0000002200000000L});
    public static final BitSet FOLLOW_33_in_caseSelector4359 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_caseLabel_in_caseSelector4364 = new BitSet(new long[]{0x0000002200000000L});
    public static final BitSet FOLLOW_37_in_caseSelector4371 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_statement_in_caseSelector4376 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_caseSelector4383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constExpr_in_caseLabel4408 = new BitSet(new long[]{0x4000000000000002L});
    public static final BitSet FOLLOW_62_in_caseLabel4414 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_caseLabel4419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_repeatStmt_in_loopStmt4444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_whileStmt_in_loopStmt4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forStmt_in_loopStmt4468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_repeatStmt4491 = new BitSet(new long[]{0x000000CD02080070L,0x3A1973D000001080L});
    public static final BitSet FOLLOW_statement_in_repeatStmt4496 = new BitSet(new long[]{0x0000000000080000L,0x0000200000000000L});
    public static final BitSet FOLLOW_19_in_repeatStmt4503 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_109_in_repeatStmt4510 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_repeatStmt4515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_whileStmt4538 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_whileStmt4543 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_whileStmt4548 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_statement_in_whileStmt4553 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_whileStmt4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_forStmt4585 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_qualId_in_forStmt4590 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_forStmt4595 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_forStmt4600 = new BitSet(new long[]{0x0000000000000000L,0x0006000000000000L});
    public static final BitSet FOLLOW_113_in_forStmt4606 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_114_in_forStmt4613 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_forStmt4619 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_forStmt4624 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_statement_in_forStmt4629 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_forStmt4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_115_in_withStmt4663 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_withStmt4668 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_withStmt4673 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_statement_in_withStmt4678 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_withStmt4684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_116_in_tryStmt4712 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_tryStmt4717 = new BitSet(new long[]{0x0000000000080000L,0x0060000000000000L});
    public static final BitSet FOLLOW_19_in_tryStmt4723 = new BitSet(new long[]{0x0000000000000000L,0x0060000000000000L});
    public static final BitSet FOLLOW_117_in_tryStmt4731 = new BitSet(new long[]{0x000000CD02880070L,0x3A995BD000001080L});
    public static final BitSet FOLLOW_exceptionBlock_in_tryStmt4736 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_118_in_tryStmt4744 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_tryStmt4749 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_tryStmt4755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_119_in_exceptionBlock4779 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_ident_in_exceptionBlock4785 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_exceptionBlock4790 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_exceptionBlock4797 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_120_in_exceptionBlock4801 = new BitSet(new long[]{0x0000000000000000L,0x0000800000000000L});
    public static final BitSet FOLLOW_111_in_exceptionBlock4806 = new BitSet(new long[]{0x000000CD02080070L,0x3A995BD000001080L});
    public static final BitSet FOLLOW_statement_in_exceptionBlock4811 = new BitSet(new long[]{0x000000CD02080072L,0x3A995BD000001080L});
    public static final BitSet FOLLOW_19_in_exceptionBlock4817 = new BitSet(new long[]{0x000000CD02080072L,0x3A995BD000001080L});
    public static final BitSet FOLLOW_107_in_exceptionBlock4828 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_exceptionBlock4835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_121_in_raiseStmt4864 = new BitSet(new long[]{0x0000000000000012L,0x0400000000000000L});
    public static final BitSet FOLLOW_ID_in_raiseStmt4870 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_122_in_raiseStmt4878 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_raiseStmt4883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_123_in_assemblerStmt4908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureDecl_in_procedureDeclSection4941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionDecl_in_procedureDeclSection4957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureHeading_in_procedureDecl4979 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_procedureDecl4984 = new BitSet(new long[]{0x000000CD0F000000L,0xB000010000001000L,0x000000000003FFFFL});
    public static final BitSet FOLLOW_directive_in_procedureDecl4990 = new BitSet(new long[]{0x000000CD0F000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_portabilityDirective_in_procedureDecl4998 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_block_in_procedureDecl5005 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_procedureDecl5010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionHeading_in_functionDecl5033 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_functionDecl5038 = new BitSet(new long[]{0x000000CD0F000000L,0xB000010000001000L,0x000000000003FFFFL});
    public static final BitSet FOLLOW_directive_in_functionDecl5044 = new BitSet(new long[]{0x000000CD0F000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_portabilityDirective_in_functionDecl5052 = new BitSet(new long[]{0x000000CD02000000L,0x3000010000001000L});
    public static final BitSet FOLLOW_block_in_functionDecl5059 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_functionDecl5064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_functionHeading5088 = new BitSet(new long[]{0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_124_in_functionHeading5095 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_functionHeading5100 = new BitSet(new long[]{0x0000002000020000L});
    public static final BitSet FOLLOW_formalParameters_in_functionHeading5106 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_functionHeading5113 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_functionHeading5118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_procedureHeading5142 = new BitSet(new long[]{0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_125_in_procedureHeading5148 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_procedureHeading5153 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_formalParameters_in_procedureHeading5159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_formalParameters5184 = new BitSet(new long[]{0x0000000800000010L,0x4000001000001000L});
    public static final BitSet FOLLOW_formalParm_in_formalParameters5190 = new BitSet(new long[]{0x00000000000C0000L});
    public static final BitSet FOLLOW_19_in_formalParameters5196 = new BitSet(new long[]{0x0000000800000010L,0x4000001000001000L});
    public static final BitSet FOLLOW_formalParm_in_formalParameters5201 = new BitSet(new long[]{0x00000000000C0000L});
    public static final BitSet FOLLOW_18_in_formalParameters5209 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_formalParm5233 = new BitSet(new long[]{0x0000000800000010L,0x4000001000001000L});
    public static final BitSet FOLLOW_35_in_formalParm5240 = new BitSet(new long[]{0x0000000800000010L,0x4000001000001000L});
    public static final BitSet FOLLOW_126_in_formalParm5247 = new BitSet(new long[]{0x0000000800000010L,0x4000001000001000L});
    public static final BitSet FOLLOW_parameter_in_formalParm5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identList_in_parameter5277 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_37_in_parameter5283 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_67_in_parameter5290 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_parameter5295 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_parameter5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_parameter5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_parameter5326 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_parameter5331 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_parameter5336 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_parameter5341 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_parameter5346 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_127_in_directive5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_128_in_directive5386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_129_in_directive5402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_130_in_directive5418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_131_in_directive5434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_132_in_directive5450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_133_in_directive5466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_134_in_directive5482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_135_in_directive5498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_136_in_directive5510 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_directive5515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_137_in_directive5531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_138_in_directive5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_139_in_directive5562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_140_in_directive5577 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_141_in_directive5593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_142_in_directive5609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_143_in_directive5625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_144_in_directive5641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_145_in_directive5657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_objectType5680 = new BitSet(new long[]{0x000000CC00820010L,0x3000001000001000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_objHeritage_in_objectType5686 = new BitSet(new long[]{0x000000CC00800010L,0x3000001000001000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_objFieldList_in_objectType5694 = new BitSet(new long[]{0x000000CC00800000L,0x3000000000001000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_methodList_in_objectType5702 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_objectType5709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_objHeritage5732 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_qualId_in_objHeritage5737 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_objHeritage5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodHeading_in_methodList5766 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_methodList5772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_methodList5777 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_methodList5785 = new BitSet(new long[]{0x0000000000000000L,0x8000000000000000L,0x000000000003FFFFL});
    public static final BitSet FOLLOW_directive_in_methodList5790 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_methodList5798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureHeading_in_methodHeading5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_functionHeading_in_methodHeading5833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constructorHeading_in_methodHeading5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_destructorHeading_in_methodHeading5861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_146_in_constructorHeading5884 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_constructorHeading5889 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorHeading5895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_147_in_destructorHeading5920 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_destructorHeading5925 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_formalParameters_in_destructorHeading5931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identList_in_objFieldList5957 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_objFieldList5962 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_objFieldList5967 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_objFieldList5973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_148_in_initSection5996 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_initSection6001 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_149_in_initSection6007 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_initSection6012 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_initSection6019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_104_in_initSection6035 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_initSection6040 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_initSection6045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_23_in_initSection6061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_classType6084 = new BitSet(new long[]{0x000000CC00820010L,0x3000001000001000L,0x0000000007CC0000L});
    public static final BitSet FOLLOW_classHeritage_in_classType6090 = new BitSet(new long[]{0x000000CC00800010L,0x3000001000001000L,0x0000000007CC0000L});
    public static final BitSet FOLLOW_classVisibility_in_classType6098 = new BitSet(new long[]{0x000000CC00800010L,0x3000001000001000L,0x0000000007CC0000L});
    public static final BitSet FOLLOW_classFieldList_in_classType6106 = new BitSet(new long[]{0x000000CC00800000L,0x3000000000001000L,0x0000000007CC0000L});
    public static final BitSet FOLLOW_classMethodList_in_classType6114 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000007C00000L});
    public static final BitSet FOLLOW_classPropertyList_in_classType6122 = new BitSet(new long[]{0x0000000000800000L});
    public static final BitSet FOLLOW_23_in_classType6129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_classHeritage6152 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_classHeritage6157 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_classHeritage6162 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_150_in_classVisibility6185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_151_in_classVisibility6199 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_152_in_classVisibility6213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_153_in_classVisibility6227 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classField_in_classFieldList6250 = new BitSet(new long[]{0x0000000000000012L,0x0000001000000000L,0x0000000003C00000L});
    public static final BitSet FOLLOW_classVisibility_in_classField6274 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_objFieldList_in_classField6280 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classMethod_in_classMethodList6303 = new BitSet(new long[]{0x000000CC00000002L,0x3000000000001000L,0x0000000003CC0000L});
    public static final BitSet FOLLOW_classVisibility_in_classMethod6327 = new BitSet(new long[]{0x000000CC00000000L,0x3000000000001000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_methodList_in_classMethod6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classProperty_in_classPropertyList6356 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000007C00000L});
    public static final BitSet FOLLOW_classVisibility_in_classProperty6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classVisibility_in_classProperty6393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000007C00000L});
    public static final BitSet FOLLOW_propertyList_in_classProperty6399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_154_in_propertyList6423 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_propertyList6428 = new BitSet(new long[]{0x000000208D080000L,0x0000000000000010L,0x00000001F8000000L});
    public static final BitSet FOLLOW_propertyInterface_in_propertyList6434 = new BitSet(new long[]{0x000000008D080000L,0x0000000000000000L,0x00000001F8000000L});
    public static final BitSet FOLLOW_propertySpecifiers_in_propertyList6442 = new BitSet(new long[]{0x000000000D080000L});
    public static final BitSet FOLLOW_portabilityDirective_in_propertyList6450 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_propertyList6457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyParameterList_in_propertyInterface6481 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_propertyInterface6488 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_propertyInterface6493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_propertyParameterList6516 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_propertyParameterList6521 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_propertyParameterList6526 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_propertyParameterList6531 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_propertyParameterList6536 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000020L});
    public static final BitSet FOLLOW_identList_in_propertyParameterList6542 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_propertyParameterList6547 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_propertyParameterList6552 = new BitSet(new long[]{0x0000000000080000L});
    public static final BitSet FOLLOW_19_in_propertyParameterList6557 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000020L});
    public static final BitSet FOLLOW_69_in_propertyParameterList6564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_31_in_propertySpecifiers6591 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_propertySpecifiers6596 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001F8000000L});
    public static final BitSet FOLLOW_155_in_propertySpecifiers6604 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_propertySpecifiers6609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001F0000000L});
    public static final BitSet FOLLOW_156_in_propertySpecifiers6617 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_propertySpecifiers6622 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001E0000000L});
    public static final BitSet FOLLOW_157_in_propertySpecifiers6630 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_ident_in_propertySpecifiers6636 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001C0000000L});
    public static final BitSet FOLLOW_constExpr_in_propertySpecifiers6643 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x00000001C0000000L});
    public static final BitSet FOLLOW_158_in_propertySpecifiers6653 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_propertySpecifiers6658 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_159_in_propertySpecifiers6666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_160_in_propertySpecifiers6674 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_typeId_in_propertySpecifiers6679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_interfaceType6704 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_interfaceHeritage_in_interfaceType6710 = new BitSet(new long[]{0x000000CC00000000L,0x3000000000001000L,0x0000000003CC0000L});
    public static final BitSet FOLLOW_classMethodList_in_interfaceType6717 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000007C00000L});
    public static final BitSet FOLLOW_classPropertyList_in_interfaceType6724 = new BitSet(new long[]{0x0000000000800000L,0x0000000000000000L,0x0000000007C00000L});
    public static final BitSet FOLLOW_23_in_interfaceType6731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_interfaceHeritage6754 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_interfaceHeritage6759 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_interfaceHeritage6764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_161_in_requiresClause6787 = new BitSet(new long[]{0x0000000000080010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_requiresClause6792 = new BitSet(new long[]{0x0000000000080010L,0x0000001000000000L});
    public static final BitSet FOLLOW_19_in_requiresClause6798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_162_in_containsClause6821 = new BitSet(new long[]{0x0000000000080010L,0x0000001000000000L});
    public static final BitSet FOLLOW_identList_in_containsClause6826 = new BitSet(new long[]{0x0000000000080010L,0x0000001000000000L});
    public static final BitSet FOLLOW_19_in_containsClause6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_identList6855 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_33_in_identList6861 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_identList6866 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_unitId_in_qualId6892 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_qualId6897 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_ident_in_qualId6904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unitId_in_typeId6930 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_typeId6935 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_qualId_in_typeId6942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ident6967 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_20_in_ident6973 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_ident6978 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_100_in_ident6992 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_reservedWord_in_ident6997 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_ident7009 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_17_in_ident7014 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_ident7019 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_ident7024 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_ident7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_reservedWord7053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constExpr7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_constExpr7090 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_constExpr7095 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_33_in_constExpr7101 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_constExpr7106 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_18_in_constExpr7112 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_constExpr7124 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_recordConstExpr_in_constExpr7129 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_33_in_constExpr7135 = new BitSet(new long[]{0x0000000000000010L,0x0000001000000000L});
    public static final BitSet FOLLOW_recordConstExpr_in_constExpr7140 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_18_in_constExpr7147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_recordConstExpr7171 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_recordConstExpr7176 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_recordConstExpr7181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_unitId7206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_labelId7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_labelId7243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HEX_in_labelId7255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_number7278 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_163_in_number7290 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_INT_in_number7295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QVALUE_in_string7318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DQVALUE_in_string7330 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred42_delphi1135 = new BitSet(new long[]{0x0000001000000000L});
    public static final BitSet FOLLOW_36_in_synpred42_delphi1140 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_38_in_synpred42_delphi1146 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_synpred42_delphi1153 = new BitSet(new long[]{0x000000000D000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_synpred42_delphi1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constExpr_in_synpred45_delphi1223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayConstant_in_synpred46_delphi1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_recordConstant_in_synpred47_delphi1237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeId_in_synpred49_delphi1375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simpleType_in_synpred50_delphi1391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_procedureType_in_synpred54_delphi1455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subrangeType_in_synpred65_delphi1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumeratedType_in_synpred66_delphi1767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_synpred91_delphi2344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_synpred93_delphi2388 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_synpred101_delphi2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_synpred102_delphi2676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_portabilityDirective_in_synpred103_delphi2712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_synpred105_delphi2752 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_75_in_synpred105_delphi2757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred107_delphi2841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relOp_in_synpred111_delphi2902 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_simpleExpression_in_synpred111_delphi2907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_addOp_in_synpred114_delphi2953 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_term_in_synpred114_delphi2958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_synpred116_delphi3026 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_synpred116_delphi3031 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_synpred116_delphi3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred117_delphi3020 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_17_in_synpred117_delphi3026 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_synpred117_delphi3031 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_synpred117_delphi3036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_synpred143_delphi3599 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_synpred143_delphi3604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_69_in_synpred143_delphi3609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred145_delphi3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred152_delphi3889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred154_delphi3916 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_101_in_synpred154_delphi3921 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_expression_in_synpred154_delphi3926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_designator_in_synpred156_delphi3940 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_17_in_synpred156_delphi3946 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_exprList_in_synpred156_delphi3952 = new BitSet(new long[]{0x0000000000040000L});
    public static final BitSet FOLLOW_18_in_synpred156_delphi3958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred165_delphi4226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred166_delphi4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_synpred167_delphi4234 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_statement_in_synpred167_delphi4239 = new BitSet(new long[]{0x0000000000080002L});
    public static final BitSet FOLLOW_19_in_synpred167_delphi4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred175_delphi4560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred177_delphi4636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred178_delphi4684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred181_delphi4785 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_synpred181_delphi4790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_107_in_synpred185_delphi4828 = new BitSet(new long[]{0x000000CD02080070L,0x3A1953D000001080L});
    public static final BitSet FOLLOW_stmtList_in_synpred185_delphi4835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred186_delphi4870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_synpred201_delphi5290 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred201_delphi5295 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identList_in_synpred204_delphi5277 = new BitSet(new long[]{0x0000002000000002L});
    public static final BitSet FOLLOW_37_in_synpred204_delphi5283 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_67_in_synpred204_delphi5290 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_40_in_synpred204_delphi5295 = new BitSet(new long[]{0xBFFFFECC000201B0L,0x300000100007D75FL,0x0000000800000000L});
    public static final BitSet FOLLOW_type_in_synpred204_delphi5302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_synpred204_delphi5309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_19_in_synpred226_delphi5772 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_130_in_synpred226_delphi5777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classVisibility_in_synpred237_delphi6098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classProperty_in_synpred248_delphi6356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classVisibility_in_synpred249_delphi6380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySpecifiers_in_synpred252_delphi6442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ident_in_synpred259_delphi6636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unitId_in_synpred268_delphi6892 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_synpred268_delphi6897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unitId_in_synpred269_delphi6930 = new BitSet(new long[]{0x0000000000100000L});
    public static final BitSet FOLLOW_20_in_synpred269_delphi6935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ID_in_synpred271_delphi6967 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_20_in_synpred271_delphi6973 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_ID_in_synpred271_delphi6978 = new BitSet(new long[]{0x0000000000100002L});
    public static final BitSet FOLLOW_expression_in_synpred273_delphi7078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_17_in_synpred275_delphi7090 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_synpred275_delphi7095 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_33_in_synpred275_delphi7101 = new BitSet(new long[]{0x00000000000201B0L,0x000000100007C010L,0x0000000800000000L});
    public static final BitSet FOLLOW_constExpr_in_synpred275_delphi7106 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_18_in_synpred275_delphi7112 = new BitSet(new long[]{0x0000000000000002L});

}