hash columnTypeType
	"VARCHAR2" -> "VARCHAR",
	"NUMBER" -> "NUMBER",
	"DATE" -> "DATE"	
end_hash

rule 'mapProject'
	from ccompilationUnit sf
	to astm::gastm::Project
	queries
		cu : //#CST;
	mappings
		files = cu;
end_rule

rule 'mapCompilationUnit'
	from CST cst
	to astm::gastm::CompilationUnit
	queries
		cts : /cst//data_definition/#create_table;
		css : /cst//data_definition/#create_sequence;
	mappings
		language = "PL/SQL";
		fragments = cts;
		--fragments = css;
end_rule

rule 'mapRDBTableDefinition'
	from	create_table ct
	to		astm::sastm::RDBTableDefinition
	queries
		-- Table columns
		cols  : /ct//#column;
		-- Primary Keys
		pks   : /ct//constraint/#primary_key;
		-- Constraints
		cons  : /add_at/#constraint;
		
		-- Locate alter tables
		alter : //#alter_table{add.exists}/tabname{basename.eq(ct.ID)}; 
		conss : /alter/#constraint;
		-- NOT USED comms : //#comment{ID.eq(ct.ID)};
	mappings
		identifierName = new astm::gastm::Name;
		identifierName.nameString  = ct.ID;
		Column = cols;
		PrimKey = pks;
		Constraint = cons;
		Constraint = conss;
end_rule

rule 'mapRDBColumnReference'
	from primary_key pk
	to astm::sastm::RDBColumnReference
	queries
		name   : /pk/#colname;
		table  : //#create_table//primary_key{this.check(pk)};
		colDef : /table//#column{ID.eq(name.ID)};
	mappings
		name = new astm::gastm::Name;
		name.nameString = name.ID;
		refersTo = colDef;
end_rule

rule 'mapRDBColumnDefinition'
	from column col
	to astm::sastm::RDBColumnDefinition
	queries
		notnull   : /#col{ISNULL.eq("NOT NULL")};	
		isNumber  : /#col{TYPE.eq("NUMBER")};
		isVarchar : /#col{TYPE.eq("VARCHAR") || TYPE.eq("VARCHAR2")};
		isDate    : /#col{TYPE.eq("DATE")};
	mappings
		identifierName = new astm::gastm::Name;
		identifierName.nameString  = col.ID;
		if(isNumber.hasResults) then
			type = new astm::sastm::RDBNumber;
		else
			if(isVarchar.hasResults) then
				type = new astm::sastm::RDBVarchar;
			else
				if(isDate.hasResults) then
					type = new astm::sastm::RDBDate;
				end_if
			end_if
		end_if
		--typeParam = col.NUMBER;
		if(notnull.hasResults) then
			NotNull = "false";
		end_if
end_rule

rule 'mapRDBUniqueKey'
	from constraint/unique_key cons
	to astm::sastm::RDBUniqueKey
	queries
		colnames : /cons/unique_key/#colname;
		
		-- NOT USED alter_table : //#alter_table/constraint{this.check(cons)};
		-- NOT USED tabname : /alter_table/#tabname;
		-- NOT USED table : //#create_table{ID.eq(tabname.basename)};
		-- NOT USED columns : {for each i in colnames} /table/#column{ID.eq(colnames[i].ID)};
	mappings
		Column = colnames;
end_rule

rule 'mapUniqueColumn'
	from colname cn
	to astm::sastm::RDBColumnReference
	queries
		-- Look up the table definition
		table   : //#create_table//colname{this.check(cn)};
		colDefA : /table//#column{ID.eq(cn.ID)};
		
		-- If the colname is inside an alter table
		alterTable : //#alter_table//colname{this.check(cn)};
		alterName  : /alterTable//foreign_key/#tabname;
		locTable   : //#create_table{ID.eq(alterName.basename)};
		colDefB    : /locTable//#column{ID.eq(cn.ID)};		
	mappings
		name = new astm::gastm::Name;
		name.nameString = cn.ID;
		
		if(table.hasResults) then
			refersTo = colDefA;
		else
			if(locTable.hasResults) then
				refersTo = colDefB;
			end_if
		end_if
end_rule

rule 'mapForeignKey'
	from constraint/foreign_key cons
	to astm::sastm::RDBRefIntegrity
	queries
		colname   : /cons/foreign_key/#colname[0];
		alt_table : //#alter_table/constraint{this.check(cons)};
		tabname   : /alt_table/#tabname;
		table     : //#create_table{ID.eq(tabname.basename)};
		
		fcolname  : /cons/foreign_key/#colname[1];		
	mappings
		ForeignKey = fcolname;
		ParentKey = colname;
		ParentTable = new astm::sastm::RDBTableReference;
		ParentTable.name = new astm::gastm::Name;
		ParentTable.name.nameString = tabname.basename;
		ParentTable.refersTo = table;
end_rule
