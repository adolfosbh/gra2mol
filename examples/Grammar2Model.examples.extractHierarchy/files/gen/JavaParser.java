// $ANTLR 3.2 Sep 23, 2009 12:02:23 Java.g 2016-09-04 12:48:51

	import gts.modernization.model.CST.impl.*;
	import gts.modernization.model.CST.*;
	import java.util.Iterator;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.stringtemplate.*;
import org.antlr.stringtemplate.language.*;
import java.util.HashMap;
/** A Java 1.5 grammar for ANTLR v3 derived from the spec
 *
 *  This is a very close representation of the spec; the changes
 *  are comestic (remove left recursion) and also fixes (the spec
 *  isn't exactly perfect).  I have run this on the 1.4.2 source
 *  and some nasty looking enums from 1.5, but have not really
 *  tested for 1.5 compatibility.
 *
 *  I built this with: java -Xmx100M org.antlr.Tool java.g 
 *  and got two errors that are ok (for now): 
 *  java.g:691:9: Decision can match input such as
 *    "'0'..'9'{'E', 'e'}{'+', '-'}'0'..'9'{'D', 'F', 'd', 'f'}"
 *    using multiple alternatives: 3, 4
 *  As a result, alternative(s) 4 were disabled for that input
 *  java.g:734:35: Decision can match input such as "{'$', 'A'..'Z',
 *    '_', 'a'..'z', '\u00C0'..'\u00D6', '\u00D8'..'\u00F6',
 *    '\u00F8'..'\u1FFF', '\u3040'..'\u318F', '\u3300'..'\u337F',
 *    '\u3400'..'\u3D2D', '\u4E00'..'\u9FFF', '\uF900'..'\uFAFF'}"
 *    using multiple alternatives: 1, 2
 *  As a result, alternative(s) 2 were disabled for that input
 *
 *  You can turn enum on/off as a keyword :)
 *
 *  Version 1.0 -- initial release July 5, 2006 (requires 3.0b2 or higher)
 *
 *  Primary author: Terence Parr, July 2006
 *
 *  Version 1.0.1 -- corrections by Koen Vanderkimpen & Marko van Dooren,
 *      October 25, 2006;
 *      fixed normalInterfaceDeclaration: now uses typeParameters instead
 *          of typeParameter (according to JLS, 3rd edition)
 *      fixed castExpression: no longer allows expression next to type
 *          (according to semantics in JLS, in contrast with syntax in JLS)
 *
 *  Version 1.0.2 -- Terence Parr, Nov 27, 2006
 *      java spec I built this from had some bizarre for-loop control.
 *          Looked weird and so I looked elsewhere...Yep, it's messed up.
 *          simplified.
 *
 *  Version 1.0.3 -- Chris Hogue, Feb 26, 2007
 *      Factored out an annotationName rule and used it in the annotation rule.
 *          Not sure why, but typeName wasn't recognizing references to inner
 *          annotations (e.g. @InterfaceName.InnerAnnotation())
 *      Factored out the elementValue section of an annotation reference.  Created 
 *          elementValuePair and elementValuePairs rules, then used them in the 
 *          annotation rule.  Allows it to recognize annotation references with 
 *          multiple, comma separated attributes.
 *      Updated elementValueArrayInitializer so that it allows multiple elements.
 *          (It was only allowing 0 or 1 element).
 *      Updated localVariableDeclaration to allow annotations.  Interestingly the JLS
 *          doesn't appear to indicate this is legal, but it does work as of at least
 *          JDK 1.5.0_06.
 *      Moved the Identifier portion of annotationTypeElementRest to annotationMethodRest.
 *          Because annotationConstantRest already references variableDeclarator which 
 *          has the Identifier portion in it, the parser would fail on constants in 
 *          annotation definitions because it expected two identifiers.  
 *      Added optional trailing ';' to the alternatives in annotationTypeElementRest.
 *          Wouldn't handle an inner interface that has a trailing ';'.
 *      Swapped the expression and type rule reference order in castExpression to 
 *          make it check for genericized casts first.  It was failing to recognize a
 *          statement like  "Class<Byte> TYPE = (Class<Byte>)...;" because it was seeing
 *          'Class<Byte' in the cast expression as a less than expression, then failing 
 *          on the '>'.
 *      Changed createdName to use typeArguments instead of nonWildcardTypeArguments.
 *          Again, JLS doesn't seem to allow this, but java.lang.Class has an example of
 *          of this construct.
 *      Changed the 'this' alternative in primary to allow 'identifierSuffix' rather than
 *          just 'arguments'.  The case it couldn't handle was a call to an explicit
 *          generic method invocation (e.g. this.<E>doSomething()).  Using identifierSuffix
 *          may be overly aggressive--perhaps should create a more constrained thisSuffix rule?
 * 		
 *  Version 1.0.4 -- Hiroaki Nakamura, May 3, 2007
 *
 *	Fixed formalParameterDecls, localVariableDeclaration, forInit,
 *	and forVarControl to use variableModifier* not 'final'? (annotation)?
 *
 *  Version 1.0.5 -- Terence, June 21, 2007
 *	--a[i].foo didn't work. Fixed unaryExpression
 */
public class JavaParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Identifier", "ENUM", "FloatingPointLiteral", "CharacterLiteral", "StringLiteral", "HexLiteral", "OctalLiteral", "DecimalLiteral", "HexDigit", "IntegerTypeSuffix", "Exponent", "FloatTypeSuffix", "EscapeSequence", "UnicodeEscape", "OctalEscape", "Letter", "JavaIDDigit", "WS", "COMMENT", "LINE_COMMENT", "'package'", "';'", "'import'", "'static'", "'.'", "'*'", "'class'", "'extends'", "'implements'", "'<'", "','", "'>'", "'&'", "'{'", "'}'", "'interface'", "'void'", "'['", "']'", "'throws'", "'='", "'public'", "'protected'", "'private'", "'abstract'", "'final'", "'native'", "'synchronized'", "'transient'", "'volatile'", "'strictfp'", "'boolean'", "'char'", "'byte'", "'short'", "'int'", "'long'", "'float'", "'double'", "'?'", "'super'", "'('", "')'", "'...'", "'null'", "'true'", "'false'", "'@'", "'default'", "'assert'", "':'", "'if'", "'else'", "'for'", "'while'", "'do'", "'try'", "'finally'", "'switch'", "'return'", "'throw'", "'break'", "'continue'", "'catch'", "'case'", "'+='", "'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'||'", "'&&'", "'|'", "'^'", "'=='", "'!='", "'instanceof'", "'+'", "'-'", "'/'", "'%'", "'++'", "'--'", "'~'", "'!'", "'this'", "'new'"
    };
    public static final int T__50=50;
    public static final int T__59=59;
    public static final int T__55=55;
    public static final int T__56=56;
    public static final int T__57=57;
    public static final int T__58=58;
    public static final int T__51=51;
    public static final int T__52=52;
    public static final int T__53=53;
    public static final int T__54=54;
    public static final int ENUM=5;
    public static final int T__60=60;
    public static final int T__61=61;
    public static final int HexDigit=12;
    public static final int Letter=19;
    public static final int LINE_COMMENT=23;
    public static final int StringLiteral=8;
    public static final int T__66=66;
    public static final int T__67=67;
    public static final int T__68=68;
    public static final int T__69=69;
    public static final int T__62=62;
    public static final int OctalEscape=18;
    public static final int JavaIDDigit=20;
    public static final int T__63=63;
    public static final int T__64=64;
    public static final int T__65=65;
    public static final int COMMENT=22;
    public static final int T__37=37;
    public static final int IntegerTypeSuffix=13;
    public static final int T__38=38;
    public static final int T__39=39;
    public static final int T__33=33;
    public static final int DecimalLiteral=11;
    public static final int T__34=34;
    public static final int T__35=35;
    public static final int T__36=36;
    public static final int UnicodeEscape=17;
    public static final int T__30=30;
    public static final int T__31=31;
    public static final int T__32=32;
    public static final int T__48=48;
    public static final int T__49=49;
    public static final int FloatingPointLiteral=6;
    public static final int T__44=44;
    public static final int T__45=45;
    public static final int HexLiteral=9;
    public static final int T__46=46;
    public static final int T__47=47;
    public static final int T__40=40;
    public static final int T__41=41;
    public static final int T__42=42;
    public static final int T__43=43;
    public static final int CharacterLiteral=7;
    public static final int T__91=91;
    public static final int T__100=100;
    public static final int T__92=92;
    public static final int T__93=93;
    public static final int T__102=102;
    public static final int T__94=94;
    public static final int T__101=101;
    public static final int T__90=90;
    public static final int Identifier=4;
    public static final int OctalLiteral=10;
    public static final int T__99=99;
    public static final int T__95=95;
    public static final int T__96=96;
    public static final int T__97=97;
    public static final int T__98=98;
    public static final int T__26=26;
    public static final int T__27=27;
    public static final int T__28=28;
    public static final int T__29=29;
    public static final int T__24=24;
    public static final int T__25=25;
    public static final int T__70=70;
    public static final int T__71=71;
    public static final int T__72=72;
    public static final int Exponent=14;
    public static final int T__77=77;
    public static final int T__78=78;
    public static final int FloatTypeSuffix=15;
    public static final int T__79=79;
    public static final int T__73=73;
    public static final int WS=21;
    public static final int EOF=-1;
    public static final int T__74=74;
    public static final int T__75=75;
    public static final int T__76=76;
    public static final int T__80=80;
    public static final int T__111=111;
    public static final int T__81=81;
    public static final int T__110=110;
    public static final int T__82=82;
    public static final int T__113=113;
    public static final int T__83=83;
    public static final int T__112=112;
    public static final int EscapeSequence=16;
    public static final int T__88=88;
    public static final int T__108=108;
    public static final int T__89=89;
    public static final int T__107=107;
    public static final int T__109=109;
    public static final int T__84=84;
    public static final int T__104=104;
    public static final int T__85=85;
    public static final int T__103=103;
    public static final int T__86=86;
    public static final int T__106=106;
    public static final int T__87=87;
    public static final int T__105=105;

    // delegates
    // delegators


        public JavaParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public JavaParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
            this.state.ruleMemo = new HashMap[403+1];
             
             
        }
        
    protected StringTemplateGroup templateLib =
      new StringTemplateGroup("JavaParserTemplates", AngleBracketTemplateLexer.class);

    public void setTemplateLib(StringTemplateGroup templateLib) {
      this.templateLib = templateLib;
    }
    public StringTemplateGroup getTemplateLib() {
      return templateLib;
    }
    /** allows convenient multi-value initialization:
     *  "new STAttrMap().put(...).put(...)"
     */
    public static class STAttrMap extends HashMap {
      public STAttrMap put(String attrName, Object value) {
        super.put(attrName, value);
        return this;
      }
      public STAttrMap put(String attrName, int value) {
        super.put(attrName, new Integer(value));
        return this;
      }
    }

    public String[] getTokenNames() { return JavaParser.tokenNames; }
    public String getGrammarFileName() { return "Java.g"; }


    public static class compilationUnit_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "compilationUnit"
    // Java.g:99:1: compilationUnit returns [Node returnNode] : (annotationsGen+= annotations )? (packageDeclarationGen+= packageDeclaration )? (importDeclarationGen+= importDeclaration )* (typeDeclarationGen+= typeDeclaration )* ;
    public final JavaParser.compilationUnit_return compilationUnit() throws RecognitionException {
        JavaParser.compilationUnit_return retval = new JavaParser.compilationUnit_return();
        retval.start = input.LT(1);
        int compilationUnit_StartIndex = input.index();
        List list_annotationsGen=null;
        List list_packageDeclarationGen=null;
        List list_importDeclarationGen=null;
        List list_typeDeclarationGen=null;
        RuleReturnScope annotationsGen = null;
        RuleReturnScope packageDeclarationGen = null;
        RuleReturnScope importDeclarationGen = null;
        RuleReturnScope typeDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 1) ) { return retval; }
            // Java.g:100:1: ( (annotationsGen+= annotations )? (packageDeclarationGen+= packageDeclaration )? (importDeclarationGen+= importDeclaration )* (typeDeclarationGen+= typeDeclaration )* )
            // Java.g:100:3: (annotationsGen+= annotations )? (packageDeclarationGen+= packageDeclaration )? (importDeclarationGen+= importDeclaration )* (typeDeclarationGen+= typeDeclaration )*
            {
            // Java.g:100:17: (annotationsGen+= annotations )?
            int alt1=2;
            alt1 = dfa1.predict(input);
            switch (alt1) {
                case 1 :
                    // Java.g:0:0: annotationsGen+= annotations
                    {
                    pushFollow(FOLLOW_annotations_in_compilationUnit62);
                    annotationsGen=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationsGen==null) list_annotationsGen=new ArrayList();
                    list_annotationsGen.add(annotationsGen.getTemplate());


                    }
                    break;

            }

            // Java.g:101:24: (packageDeclarationGen+= packageDeclaration )?
            int alt2=2;
            alt2 = dfa2.predict(input);
            switch (alt2) {
                case 1 :
                    // Java.g:0:0: packageDeclarationGen+= packageDeclaration
                    {
                    pushFollow(FOLLOW_packageDeclaration_in_compilationUnit69);
                    packageDeclarationGen=packageDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_packageDeclarationGen==null) list_packageDeclarationGen=new ArrayList();
                    list_packageDeclarationGen.add(packageDeclarationGen.getTemplate());


                    }
                    break;

            }

            // Java.g:102:29: (importDeclarationGen+= importDeclaration )*
            loop3:
            do {
                int alt3=2;
                alt3 = dfa3.predict(input);
                switch (alt3) {
            	case 1 :
            	    // Java.g:0:0: importDeclarationGen+= importDeclaration
            	    {
            	    pushFollow(FOLLOW_importDeclaration_in_compilationUnit82);
            	    importDeclarationGen=importDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_importDeclarationGen==null) list_importDeclarationGen=new ArrayList();
            	    list_importDeclarationGen.add(importDeclarationGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop3;
                }
            } while (true);

            // Java.g:103:27: (typeDeclarationGen+= typeDeclaration )*
            loop4:
            do {
                int alt4=2;
                alt4 = dfa4.predict(input);
                switch (alt4) {
            	case 1 :
            	    // Java.g:0:0: typeDeclarationGen+= typeDeclaration
            	    {
            	    pushFollow(FOLLOW_typeDeclaration_in_compilationUnit95);
            	    typeDeclarationGen=typeDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeDeclarationGen==null) list_typeDeclarationGen=new ArrayList();
            	    list_typeDeclarationGen.add(typeDeclarationGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop4;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node compilationUnitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		compilationUnitReturnNode.setKind("compilationUnit");
              	    // Create a CST Node
              		if(list_annotationsGen != null) {
              	        for(Iterator it = list_annotationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotations_return r = (JavaParser.annotations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotations");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_packageDeclarationGen != null) {
              	        for(Iterator it = list_packageDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.packageDeclaration_return r = (JavaParser.packageDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("packageDeclaration");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_importDeclarationGen != null) {
              	        for(Iterator it = list_importDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.importDeclaration_return r = (JavaParser.importDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("importDeclaration");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeDeclarationGen != null) {
              	        for(Iterator it = list_typeDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeDeclaration_return r = (JavaParser.typeDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeDeclaration");
              	            	compilationUnitReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = compilationUnitReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 1, compilationUnit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "compilationUnit"

    public static class packageDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "packageDeclaration"
    // Java.g:153:1: packageDeclaration returns [Node returnNode] : TK_0= 'package' qualifiedNameGen+= qualifiedName TK_1= ';' ;
    public final JavaParser.packageDeclaration_return packageDeclaration() throws RecognitionException {
        JavaParser.packageDeclaration_return retval = new JavaParser.packageDeclaration_return();
        retval.start = input.LT(1);
        int packageDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_qualifiedNameGen=null;
        RuleReturnScope qualifiedNameGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 2) ) { return retval; }
            // Java.g:154:1: (TK_0= 'package' qualifiedNameGen+= qualifiedName TK_1= ';' )
            // Java.g:154:3: TK_0= 'package' qualifiedNameGen+= qualifiedName TK_1= ';'
            {
            TK_0=(Token)match(input,24,FOLLOW_24_in_packageDeclaration117); if (state.failed) return retval;
            pushFollow(FOLLOW_qualifiedName_in_packageDeclaration121);
            qualifiedNameGen=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qualifiedNameGen==null) list_qualifiedNameGen=new ArrayList();
            list_qualifiedNameGen.add(qualifiedNameGen.getTemplate());

            TK_1=(Token)match(input,25,FOLLOW_25_in_packageDeclaration125); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node packageDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		packageDeclarationReturnNode.setKind("packageDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		packageDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameGen != null) {
              	        for(Iterator it = list_qualifiedNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedName");
              	            	packageDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		packageDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = packageDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 2, packageDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageDeclaration"

    public static class importDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "importDeclaration"
    // Java.g:192:1: importDeclaration returns [Node returnNode] : TK_0= 'import' (TK_1= 'static' )? IdentifierGen= Identifier (TK_2= '.' IdentifierGen_1_List+= Identifier )* (TK_3= '.' TK_4= '*' )? TK_5= ';' ;
    public final JavaParser.importDeclaration_return importDeclaration() throws RecognitionException {
        JavaParser.importDeclaration_return retval = new JavaParser.importDeclaration_return();
        retval.start = input.LT(1);
        int importDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token IdentifierGen=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 3) ) { return retval; }
            // Java.g:193:1: (TK_0= 'import' (TK_1= 'static' )? IdentifierGen= Identifier (TK_2= '.' IdentifierGen_1_List+= Identifier )* (TK_3= '.' TK_4= '*' )? TK_5= ';' )
            // Java.g:193:3: TK_0= 'import' (TK_1= 'static' )? IdentifierGen= Identifier (TK_2= '.' IdentifierGen_1_List+= Identifier )* (TK_3= '.' TK_4= '*' )? TK_5= ';'
            {
            TK_0=(Token)match(input,26,FOLLOW_26_in_importDeclaration147); if (state.failed) return retval;
            // Java.g:193:21: (TK_1= 'static' )?
            int alt5=2;
            int LA5_0 = input.LA(1);

            if ( (LA5_0==27) ) {
                alt5=1;
            }
            switch (alt5) {
                case 1 :
                    // Java.g:0:0: TK_1= 'static'
                    {
                    TK_1=(Token)match(input,27,FOLLOW_27_in_importDeclaration151); if (state.failed) return retval;

                    }
                    break;

            }

            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration156); if (state.failed) return retval;
            // Java.g:193:57: (TK_2= '.' IdentifierGen_1_List+= Identifier )*
            loop6:
            do {
                int alt6=2;
                int LA6_0 = input.LA(1);

                if ( (LA6_0==28) ) {
                    int LA6_1 = input.LA(2);

                    if ( (LA6_1==Identifier) ) {
                        alt6=1;
                    }


                }


                switch (alt6) {
            	case 1 :
            	    // Java.g:193:58: TK_2= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_2=(Token)match(input,28,FOLLOW_28_in_importDeclaration161); if (state.failed) return retval;
            	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_importDeclaration165); if (state.failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop6;
                }
            } while (true);

            // Java.g:193:102: (TK_3= '.' TK_4= '*' )?
            int alt7=2;
            int LA7_0 = input.LA(1);

            if ( (LA7_0==28) ) {
                alt7=1;
            }
            switch (alt7) {
                case 1 :
                    // Java.g:193:103: TK_3= '.' TK_4= '*'
                    {
                    TK_3=(Token)match(input,28,FOLLOW_28_in_importDeclaration172); if (state.failed) return retval;
                    TK_4=(Token)match(input,29,FOLLOW_29_in_importDeclaration176); if (state.failed) return retval;

                    }
                    break;

            }

            TK_5=(Token)match(input,25,FOLLOW_25_in_importDeclaration182); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node importDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		importDeclarationReturnNode.setKind("importDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			importDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}

              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			importDeclarationReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue((TK_4!=null?TK_4.getText():null));
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue((TK_5!=null?TK_5.getText():null));
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		importDeclarationReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = importDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 3, importDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "importDeclaration"

    public static class typeDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeDeclaration"
    // Java.g:283:1: typeDeclaration returns [Node returnNode] : (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | TK_0= ';' );
    public final JavaParser.typeDeclaration_return typeDeclaration() throws RecognitionException {
        JavaParser.typeDeclaration_return retval = new JavaParser.typeDeclaration_return();
        retval.start = input.LT(1);
        int typeDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_classOrInterfaceDeclarationGen=null;
        RuleReturnScope classOrInterfaceDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 4) ) { return retval; }
            // Java.g:284:1: (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | TK_0= ';' )
            int alt8=2;
            alt8 = dfa8.predict(input);
            switch (alt8) {
                case 1 :
                    // Java.g:284:3: classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration204);
                    classOrInterfaceDeclarationGen=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classOrInterfaceDeclarationGen==null) list_classOrInterfaceDeclarationGen=new ArrayList();
                    list_classOrInterfaceDeclarationGen.add(classOrInterfaceDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeDeclarationReturnNode.setKind("typeDeclaration");
                      	    // Create a CST Node
                      		if(list_classOrInterfaceDeclarationGen != null) {
                      	        for(Iterator it = list_classOrInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classOrInterfaceDeclaration_return r = (JavaParser.classOrInterfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classOrInterfaceDeclaration");
                      	            	typeDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:302:9: TK_0= ';'
                    {
                    TK_0=(Token)match(input,25,FOLLOW_25_in_typeDeclaration220); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeDeclarationReturnNode.setKind("typeDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 4, typeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeDeclaration"

    public static class classOrInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classOrInterfaceDeclaration"
    // Java.g:321:1: classOrInterfaceDeclaration returns [Node returnNode] : (modifierGen+= modifier )* (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration ) ;
    public final JavaParser.classOrInterfaceDeclaration_return classOrInterfaceDeclaration() throws RecognitionException {
        JavaParser.classOrInterfaceDeclaration_return retval = new JavaParser.classOrInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int classOrInterfaceDeclaration_StartIndex = input.index();
        List list_modifierGen=null;
        List list_classDeclarationGen=null;
        List list_interfaceDeclarationGen=null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope classDeclarationGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 5) ) { return retval; }
            // Java.g:322:1: ( (modifierGen+= modifier )* (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration ) )
            // Java.g:322:3: (modifierGen+= modifier )* (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration )
            {
            // Java.g:322:14: (modifierGen+= modifier )*
            loop9:
            do {
                int alt9=2;
                alt9 = dfa9.predict(input);
                switch (alt9) {
            	case 1 :
            	    // Java.g:0:0: modifierGen+= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_classOrInterfaceDeclaration242);
            	    modifierGen=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
            	    list_modifierGen.add(modifierGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop9;
                }
            } while (true);

            // Java.g:322:26: (classDeclarationGen+= classDeclaration | interfaceDeclarationGen+= interfaceDeclaration )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==ENUM||LA10_0==30) ) {
                alt10=1;
            }
            else if ( (LA10_0==39||LA10_0==71) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // Java.g:322:27: classDeclarationGen+= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_classOrInterfaceDeclaration248);
                    classDeclarationGen=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen.getTemplate());


                    }
                    break;
                case 2 :
                    // Java.g:322:67: interfaceDeclarationGen+= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration254);
                    interfaceDeclarationGen=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classOrInterfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classOrInterfaceDeclarationReturnNode.setKind("classOrInterfaceDeclaration");
              	    // Create a CST Node
              		if(list_modifierGen != null) {
              	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("modifier");
              	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classDeclarationGen != null) {
              	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classDeclaration");
              	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_interfaceDeclarationGen != null) {
              	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceDeclaration");
              	            	classOrInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classOrInterfaceDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 5, classOrInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classOrInterfaceDeclaration"

    public static class classDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classDeclaration"
    // Java.g:362:1: classDeclaration returns [Node returnNode] : (normalClassDeclarationGen+= normalClassDeclaration | enumDeclarationGen+= enumDeclaration );
    public final JavaParser.classDeclaration_return classDeclaration() throws RecognitionException {
        JavaParser.classDeclaration_return retval = new JavaParser.classDeclaration_return();
        retval.start = input.LT(1);
        int classDeclaration_StartIndex = input.index();
        List list_normalClassDeclarationGen=null;
        List list_enumDeclarationGen=null;
        RuleReturnScope normalClassDeclarationGen = null;
        RuleReturnScope enumDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 6) ) { return retval; }
            // Java.g:363:1: (normalClassDeclarationGen+= normalClassDeclaration | enumDeclarationGen+= enumDeclaration )
            int alt11=2;
            int LA11_0 = input.LA(1);

            if ( (LA11_0==30) ) {
                alt11=1;
            }
            else if ( (LA11_0==ENUM) ) {
                alt11=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 11, 0, input);

                throw nvae;
            }
            switch (alt11) {
                case 1 :
                    // Java.g:363:3: normalClassDeclarationGen+= normalClassDeclaration
                    {
                    pushFollow(FOLLOW_normalClassDeclaration_in_classDeclaration277);
                    normalClassDeclarationGen=normalClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_normalClassDeclarationGen==null) list_normalClassDeclarationGen=new ArrayList();
                    list_normalClassDeclarationGen.add(normalClassDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classDeclarationReturnNode.setKind("classDeclaration");
                      	    // Create a CST Node
                      		if(list_normalClassDeclarationGen != null) {
                      	        for(Iterator it = list_normalClassDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.normalClassDeclaration_return r = (JavaParser.normalClassDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("normalClassDeclaration");
                      	            	classDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:381:9: enumDeclarationGen+= enumDeclaration
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_classDeclaration293);
                    enumDeclarationGen=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_enumDeclarationGen==null) list_enumDeclarationGen=new ArrayList();
                    list_enumDeclarationGen.add(enumDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classDeclarationReturnNode.setKind("classDeclaration");
                      	    // Create a CST Node
                      		if(list_enumDeclarationGen != null) {
                      	        for(Iterator it = list_enumDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.enumDeclaration_return r = (JavaParser.enumDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumDeclaration");
                      	            	classDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 6, classDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classDeclaration"

    public static class normalClassDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "normalClassDeclaration"
    // Java.g:401:1: normalClassDeclaration returns [Node returnNode] : TK_0= 'class' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' extendsClass+= type )? (TK_2= 'implements' implementsList+= typeList )? classBodyGen+= classBody ;
    public final JavaParser.normalClassDeclaration_return normalClassDeclaration() throws RecognitionException {
        JavaParser.normalClassDeclaration_return retval = new JavaParser.normalClassDeclaration_return();
        retval.start = input.LT(1);
        int normalClassDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeParametersGen=null;
        List list_extendsClass=null;
        List list_implementsList=null;
        List list_classBodyGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope extendsClass = null;
        RuleReturnScope implementsList = null;
        RuleReturnScope classBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 7) ) { return retval; }
            // Java.g:402:1: (TK_0= 'class' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' extendsClass+= type )? (TK_2= 'implements' implementsList+= typeList )? classBodyGen+= classBody )
            // Java.g:402:3: TK_0= 'class' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' extendsClass+= type )? (TK_2= 'implements' implementsList+= typeList )? classBodyGen+= classBody
            {
            TK_0=(Token)match(input,30,FOLLOW_30_in_normalClassDeclaration315); if (state.failed) return retval;
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalClassDeclaration319); if (state.failed) return retval;
            // Java.g:402:41: (typeParametersGen+= typeParameters )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==33) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // Java.g:402:42: typeParametersGen+= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalClassDeclaration324);
                    typeParametersGen=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
                    list_typeParametersGen.add(typeParametersGen.getTemplate());


                    }
                    break;

            }

            // Java.g:403:9: (TK_1= 'extends' extendsClass+= type )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==31) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // Java.g:403:10: TK_1= 'extends' extendsClass+= type
                    {
                    TK_1=(Token)match(input,31,FOLLOW_31_in_normalClassDeclaration339); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_normalClassDeclaration343);
                    extendsClass=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_extendsClass==null) list_extendsClass=new ArrayList();
                    list_extendsClass.add(extendsClass.getTemplate());


                    }
                    break;

            }

            // Java.g:404:9: (TK_2= 'implements' implementsList+= typeList )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==32) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // Java.g:404:10: TK_2= 'implements' implementsList+= typeList
                    {
                    TK_2=(Token)match(input,32,FOLLOW_32_in_normalClassDeclaration358); if (state.failed) return retval;
                    pushFollow(FOLLOW_typeList_in_normalClassDeclaration362);
                    implementsList=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_implementsList==null) list_implementsList=new ArrayList();
                    list_implementsList.add(implementsList.getTemplate());


                    }
                    break;

            }

            pushFollow(FOLLOW_classBody_in_normalClassDeclaration376);
            classBodyGen=classBody();

            state._fsp--;
            if (state.failed) return retval;
            if (list_classBodyGen==null) list_classBodyGen=new ArrayList();
            list_classBodyGen.add(classBodyGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node normalClassDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		normalClassDeclarationReturnNode.setKind("normalClassDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		normalClassDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			normalClassDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		normalClassDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_extendsClass != null) {
              	        for(Iterator it = list_extendsClass.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("extendsClass");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		normalClassDeclarationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_implementsList != null) {
              	        for(Iterator it = list_implementsList.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("implementsList");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classBodyGen != null) {
              	        for(Iterator it = list_classBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBody");
              	            	normalClassDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = normalClassDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 7, normalClassDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalClassDeclaration"

    public static class typeParameters_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeParameters"
    // Java.g:491:1: typeParameters returns [Node returnNode] : TK_0= '<' typeParameterGen+= typeParameter (TK_1= ',' typeParameterGen_1+= typeParameter )* TK_2= '>' ;
    public final JavaParser.typeParameters_return typeParameters() throws RecognitionException {
        JavaParser.typeParameters_return retval = new JavaParser.typeParameters_return();
        retval.start = input.LT(1);
        int typeParameters_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeParameterGen=null;
        List list_typeParameterGen_1=null;
        RuleReturnScope typeParameterGen = null;
        RuleReturnScope typeParameterGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 8) ) { return retval; }
            // Java.g:492:1: (TK_0= '<' typeParameterGen+= typeParameter (TK_1= ',' typeParameterGen_1+= typeParameter )* TK_2= '>' )
            // Java.g:492:3: TK_0= '<' typeParameterGen+= typeParameter (TK_1= ',' typeParameterGen_1+= typeParameter )* TK_2= '>'
            {
            TK_0=(Token)match(input,33,FOLLOW_33_in_typeParameters398); if (state.failed) return retval;
            pushFollow(FOLLOW_typeParameter_in_typeParameters402);
            typeParameterGen=typeParameter();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeParameterGen==null) list_typeParameterGen=new ArrayList();
            list_typeParameterGen.add(typeParameterGen.getTemplate());

            // Java.g:492:44: (TK_1= ',' typeParameterGen_1+= typeParameter )*
            loop15:
            do {
                int alt15=2;
                int LA15_0 = input.LA(1);

                if ( (LA15_0==34) ) {
                    alt15=1;
                }


                switch (alt15) {
            	case 1 :
            	    // Java.g:492:45: TK_1= ',' typeParameterGen_1+= typeParameter
            	    {
            	    TK_1=(Token)match(input,34,FOLLOW_34_in_typeParameters407); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeParameter_in_typeParameters411);
            	    typeParameterGen_1=typeParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeParameterGen_1==null) list_typeParameterGen_1=new ArrayList();
            	    list_typeParameterGen_1.add(typeParameterGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop15;
                }
            } while (true);

            TK_2=(Token)match(input,35,FOLLOW_35_in_typeParameters417); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typeParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeParametersReturnNode.setKind("typeParameters");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeParametersReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeParameterGen != null) {
              	        for(Iterator it = list_typeParameterGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameter_return r = (JavaParser.typeParameter_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameter");
              	            	typeParametersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal typeParameterGen_1 aggregation
              		if(list_typeParameterGen_1 != null) {
              	    for(int pos = 0; pos < list_typeParameterGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		typeParametersReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeParameterGen_1 != null) {		
              	    	JavaParser.typeParameter_return r = (JavaParser.typeParameter_return) list_typeParameterGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("typeParameter");
              	    		typeParametersReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		typeParametersReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeParametersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 8, typeParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameters"

    public static class typeParameter_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeParameter"
    // Java.g:554:1: typeParameter returns [Node returnNode] : IdentifierGen= Identifier (TK_0= 'extends' boundGen+= bound )? ;
    public final JavaParser.typeParameter_return typeParameter() throws RecognitionException {
        JavaParser.typeParameter_return retval = new JavaParser.typeParameter_return();
        retval.start = input.LT(1);
        int typeParameter_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_boundGen=null;
        RuleReturnScope boundGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 9) ) { return retval; }
            // Java.g:555:1: (IdentifierGen= Identifier (TK_0= 'extends' boundGen+= bound )? )
            // Java.g:555:3: IdentifierGen= Identifier (TK_0= 'extends' boundGen+= bound )?
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeParameter438); if (state.failed) return retval;
            // Java.g:555:28: (TK_0= 'extends' boundGen+= bound )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==31) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // Java.g:555:29: TK_0= 'extends' boundGen+= bound
                    {
                    TK_0=(Token)match(input,31,FOLLOW_31_in_typeParameter443); if (state.failed) return retval;
                    pushFollow(FOLLOW_bound_in_typeParameter447);
                    boundGen=bound();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_boundGen==null) list_boundGen=new ArrayList();
                    list_boundGen.add(boundGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typeParameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeParameterReturnNode.setKind("typeParameter");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			typeParameterReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeParameterReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_boundGen != null) {
              	        for(Iterator it = list_boundGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.bound_return r = (JavaParser.bound_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("bound");
              	            	typeParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeParameterReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 9, typeParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeParameter"

    public static class bound_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "bound"
    // Java.g:593:1: bound returns [Node returnNode] : typeGen+= type (TK_0= '&' typeGen_1+= type )* ;
    public final JavaParser.bound_return bound() throws RecognitionException {
        JavaParser.bound_return retval = new JavaParser.bound_return();
        retval.start = input.LT(1);
        int bound_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_typeGen_1=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope typeGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 10) ) { return retval; }
            // Java.g:594:1: (typeGen+= type (TK_0= '&' typeGen_1+= type )* )
            // Java.g:594:3: typeGen+= type (TK_0= '&' typeGen_1+= type )*
            {
            pushFollow(FOLLOW_type_in_bound472);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            // Java.g:594:17: (TK_0= '&' typeGen_1+= type )*
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==36) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    // Java.g:594:18: TK_0= '&' typeGen_1+= type
            	    {
            	    TK_0=(Token)match(input,36,FOLLOW_36_in_bound477); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_bound481);
            	    typeGen_1=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeGen_1==null) list_typeGen_1=new ArrayList();
            	    list_typeGen_1.add(typeGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node boundReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		boundReturnNode.setKind("bound");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	boundReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal typeGen_1 aggregation
              		if(list_typeGen_1 != null) {
              	    for(int pos = 0; pos < list_typeGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		boundReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeGen_1 != null) {		
              	    	JavaParser.type_return r = (JavaParser.type_return) list_typeGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("type");
              	    		boundReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = boundReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 10, bound_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "bound"

    public static class enumDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumDeclaration"
    // Java.g:638:1: enumDeclaration returns [Node returnNode] : ENUMGen= ENUM IdentifierGen= Identifier (TK_0= 'implements' typeListGen+= typeList )? enumBodyGen+= enumBody ;
    public final JavaParser.enumDeclaration_return enumDeclaration() throws RecognitionException {
        JavaParser.enumDeclaration_return retval = new JavaParser.enumDeclaration_return();
        retval.start = input.LT(1);
        int enumDeclaration_StartIndex = input.index();
        Token ENUMGen=null;
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_typeListGen=null;
        List list_enumBodyGen=null;
        RuleReturnScope typeListGen = null;
        RuleReturnScope enumBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 11) ) { return retval; }
            // Java.g:639:1: (ENUMGen= ENUM IdentifierGen= Identifier (TK_0= 'implements' typeListGen+= typeList )? enumBodyGen+= enumBody )
            // Java.g:639:3: ENUMGen= ENUM IdentifierGen= Identifier (TK_0= 'implements' typeListGen+= typeList )? enumBodyGen+= enumBody
            {
            ENUMGen=(Token)match(input,ENUM,FOLLOW_ENUM_in_enumDeclaration504); if (state.failed) return retval;
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumDeclaration508); if (state.failed) return retval;
            // Java.g:639:41: (TK_0= 'implements' typeListGen+= typeList )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==32) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // Java.g:639:42: TK_0= 'implements' typeListGen+= typeList
                    {
                    TK_0=(Token)match(input,32,FOLLOW_32_in_enumDeclaration513); if (state.failed) return retval;
                    pushFollow(FOLLOW_typeList_in_enumDeclaration517);
                    typeListGen=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeListGen==null) list_typeListGen=new ArrayList();
                    list_typeListGen.add(typeListGen.getTemplate());


                    }
                    break;

            }

            pushFollow(FOLLOW_enumBody_in_enumDeclaration523);
            enumBodyGen=enumBody();

            state._fsp--;
            if (state.failed) return retval;
            if (list_enumBodyGen==null) list_enumBodyGen=new ArrayList();
            list_enumBodyGen.add(enumBodyGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumDeclarationReturnNode.setKind("enumDeclaration");
              	    // Create a CST Leaf
              		if(ENUMGen != null) {
              			Leaf ENUMGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			ENUMGenLeaf.setKind("ENUM");
              			ENUMGenLeaf.setValue((ENUMGen!=null?ENUMGen.getText():null));
              			ENUMGenLeaf.setPos(ENUMGen.getCharPositionInLine());
              			ENUMGenLeaf.setLine(ENUMGen.getLine());
              			enumDeclarationReturnNode.getChildren().add(ENUMGenLeaf);
              		}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			enumDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeListGen != null) {
              	        for(Iterator it = list_typeListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeList");
              	            	enumDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_enumBodyGen != null) {
              	        for(Iterator it = list_enumBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumBody_return r = (JavaParser.enumBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumBody");
              	            	enumDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 11, enumDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumDeclaration"

    public static class enumBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumBody"
    // Java.g:696:1: enumBody returns [Node returnNode] : TK_0= '{' (enumConstantsGen+= enumConstants )? (TK_1= ',' )? (enumBodyDeclarationsGen+= enumBodyDeclarations )? TK_2= '}' ;
    public final JavaParser.enumBody_return enumBody() throws RecognitionException {
        JavaParser.enumBody_return retval = new JavaParser.enumBody_return();
        retval.start = input.LT(1);
        int enumBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_enumConstantsGen=null;
        List list_enumBodyDeclarationsGen=null;
        RuleReturnScope enumConstantsGen = null;
        RuleReturnScope enumBodyDeclarationsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 12) ) { return retval; }
            // Java.g:697:1: (TK_0= '{' (enumConstantsGen+= enumConstants )? (TK_1= ',' )? (enumBodyDeclarationsGen+= enumBodyDeclarations )? TK_2= '}' )
            // Java.g:697:3: TK_0= '{' (enumConstantsGen+= enumConstants )? (TK_1= ',' )? (enumBodyDeclarationsGen+= enumBodyDeclarations )? TK_2= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_enumBody545); if (state.failed) return retval;
            // Java.g:697:28: (enumConstantsGen+= enumConstants )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==Identifier||LA19_0==71) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // Java.g:0:0: enumConstantsGen+= enumConstants
                    {
                    pushFollow(FOLLOW_enumConstants_in_enumBody549);
                    enumConstantsGen=enumConstants();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_enumConstantsGen==null) list_enumConstantsGen=new ArrayList();
                    list_enumConstantsGen.add(enumConstantsGen.getTemplate());


                    }
                    break;

            }

            // Java.g:697:49: (TK_1= ',' )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==34) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // Java.g:0:0: TK_1= ','
                    {
                    TK_1=(Token)match(input,34,FOLLOW_34_in_enumBody554); if (state.failed) return retval;

                    }
                    break;

            }

            // Java.g:697:78: (enumBodyDeclarationsGen+= enumBodyDeclarations )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==25) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // Java.g:0:0: enumBodyDeclarationsGen+= enumBodyDeclarations
                    {
                    pushFollow(FOLLOW_enumBodyDeclarations_in_enumBody559);
                    enumBodyDeclarationsGen=enumBodyDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_enumBodyDeclarationsGen==null) list_enumBodyDeclarationsGen=new ArrayList();
                    list_enumBodyDeclarationsGen.add(enumBodyDeclarationsGen.getTemplate());


                    }
                    break;

            }

            TK_2=(Token)match(input,38,FOLLOW_38_in_enumBody564); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumBodyReturnNode.setKind("enumBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_enumConstantsGen != null) {
              	        for(Iterator it = list_enumConstantsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumConstants_return r = (JavaParser.enumConstants_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumConstants");
              	            	enumBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		enumBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_enumBodyDeclarationsGen != null) {
              	        for(Iterator it = list_enumBodyDeclarationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumBodyDeclarations_return r = (JavaParser.enumBodyDeclarations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumBodyDeclarations");
              	            	enumBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		enumBodyReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 12, enumBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBody"

    public static class enumConstants_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumConstants"
    // Java.g:754:1: enumConstants returns [Node returnNode] : enumConstantGen+= enumConstant (TK_0= ',' enumConstantGen_1+= enumConstant )* ;
    public final JavaParser.enumConstants_return enumConstants() throws RecognitionException {
        JavaParser.enumConstants_return retval = new JavaParser.enumConstants_return();
        retval.start = input.LT(1);
        int enumConstants_StartIndex = input.index();
        Token TK_0=null;
        List list_enumConstantGen=null;
        List list_enumConstantGen_1=null;
        RuleReturnScope enumConstantGen = null;
        RuleReturnScope enumConstantGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 13) ) { return retval; }
            // Java.g:755:1: (enumConstantGen+= enumConstant (TK_0= ',' enumConstantGen_1+= enumConstant )* )
            // Java.g:755:3: enumConstantGen+= enumConstant (TK_0= ',' enumConstantGen_1+= enumConstant )*
            {
            pushFollow(FOLLOW_enumConstant_in_enumConstants585);
            enumConstantGen=enumConstant();

            state._fsp--;
            if (state.failed) return retval;
            if (list_enumConstantGen==null) list_enumConstantGen=new ArrayList();
            list_enumConstantGen.add(enumConstantGen.getTemplate());

            // Java.g:755:33: (TK_0= ',' enumConstantGen_1+= enumConstant )*
            loop22:
            do {
                int alt22=2;
                int LA22_0 = input.LA(1);

                if ( (LA22_0==34) ) {
                    int LA22_1 = input.LA(2);

                    if ( (LA22_1==Identifier||LA22_1==71) ) {
                        alt22=1;
                    }


                }


                switch (alt22) {
            	case 1 :
            	    // Java.g:755:34: TK_0= ',' enumConstantGen_1+= enumConstant
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_enumConstants590); if (state.failed) return retval;
            	    pushFollow(FOLLOW_enumConstant_in_enumConstants594);
            	    enumConstantGen_1=enumConstant();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_enumConstantGen_1==null) list_enumConstantGen_1=new ArrayList();
            	    list_enumConstantGen_1.add(enumConstantGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop22;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumConstantsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumConstantsReturnNode.setKind("enumConstants");
              	    // Create a CST Node
              		if(list_enumConstantGen != null) {
              	        for(Iterator it = list_enumConstantGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.enumConstant_return r = (JavaParser.enumConstant_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("enumConstant");
              	            	enumConstantsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal enumConstantGen_1 aggregation
              		if(list_enumConstantGen_1 != null) {
              	    for(int pos = 0; pos < list_enumConstantGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumConstantsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_enumConstantGen_1 != null) {		
              	    	JavaParser.enumConstant_return r = (JavaParser.enumConstant_return) list_enumConstantGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("enumConstant");
              	    		enumConstantsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumConstantsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 13, enumConstants_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstants"

    public static class enumConstant_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumConstant"
    // Java.g:799:1: enumConstant returns [Node returnNode] : (annotationsGen+= annotations )? IdentifierGen= Identifier (argumentsGen+= arguments )? (classBodyGen+= classBody )? ;
    public final JavaParser.enumConstant_return enumConstant() throws RecognitionException {
        JavaParser.enumConstant_return retval = new JavaParser.enumConstant_return();
        retval.start = input.LT(1);
        int enumConstant_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_annotationsGen=null;
        List list_argumentsGen=null;
        List list_classBodyGen=null;
        RuleReturnScope annotationsGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope classBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 14) ) { return retval; }
            // Java.g:800:1: ( (annotationsGen+= annotations )? IdentifierGen= Identifier (argumentsGen+= arguments )? (classBodyGen+= classBody )? )
            // Java.g:800:3: (annotationsGen+= annotations )? IdentifierGen= Identifier (argumentsGen+= arguments )? (classBodyGen+= classBody )?
            {
            // Java.g:800:17: (annotationsGen+= annotations )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==71) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // Java.g:0:0: annotationsGen+= annotations
                    {
                    pushFollow(FOLLOW_annotations_in_enumConstant618);
                    annotationsGen=annotations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationsGen==null) list_annotationsGen=new ArrayList();
                    list_annotationsGen.add(annotationsGen.getTemplate());


                    }
                    break;

            }

            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstant623); if (state.failed) return retval;
            // Java.g:800:57: (argumentsGen+= arguments )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==65) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // Java.g:800:58: argumentsGen+= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_enumConstant628);
                    argumentsGen=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen.getTemplate());


                    }
                    break;

            }

            // Java.g:800:84: (classBodyGen+= classBody )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==37) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // Java.g:800:85: classBodyGen+= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_enumConstant635);
                    classBodyGen=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classBodyGen==null) list_classBodyGen=new ArrayList();
                    list_classBodyGen.add(classBodyGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumConstantReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumConstantReturnNode.setKind("enumConstant");
              	    // Create a CST Node
              		if(list_annotationsGen != null) {
              	        for(Iterator it = list_annotationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotations_return r = (JavaParser.annotations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotations");
              	            	enumConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			enumConstantReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	enumConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classBodyGen != null) {
              	        for(Iterator it = list_classBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBody");
              	            	enumConstantReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumConstantReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 14, enumConstant_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstant"

    public static class enumBodyDeclarations_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumBodyDeclarations"
    // Java.g:849:1: enumBodyDeclarations returns [Node returnNode] : TK_0= ';' (classBodyDeclarationGen+= classBodyDeclaration )* ;
    public final JavaParser.enumBodyDeclarations_return enumBodyDeclarations() throws RecognitionException {
        JavaParser.enumBodyDeclarations_return retval = new JavaParser.enumBodyDeclarations_return();
        retval.start = input.LT(1);
        int enumBodyDeclarations_StartIndex = input.index();
        Token TK_0=null;
        List list_classBodyDeclarationGen=null;
        RuleReturnScope classBodyDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 15) ) { return retval; }
            // Java.g:850:1: (TK_0= ';' (classBodyDeclarationGen+= classBodyDeclaration )* )
            // Java.g:850:3: TK_0= ';' (classBodyDeclarationGen+= classBodyDeclaration )*
            {
            TK_0=(Token)match(input,25,FOLLOW_25_in_enumBodyDeclarations659); if (state.failed) return retval;
            // Java.g:850:12: (classBodyDeclarationGen+= classBodyDeclaration )*
            loop26:
            do {
                int alt26=2;
                alt26 = dfa26.predict(input);
                switch (alt26) {
            	case 1 :
            	    // Java.g:850:13: classBodyDeclarationGen+= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_enumBodyDeclarations664);
            	    classBodyDeclarationGen=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_classBodyDeclarationGen==null) list_classBodyDeclarationGen=new ArrayList();
            	    list_classBodyDeclarationGen.add(classBodyDeclarationGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop26;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumBodyDeclarationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumBodyDeclarationsReturnNode.setKind("enumBodyDeclarations");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		enumBodyDeclarationsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_classBodyDeclarationGen != null) {
              	        for(Iterator it = list_classBodyDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBodyDeclaration_return r = (JavaParser.classBodyDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBodyDeclaration");
              	            	enumBodyDeclarationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumBodyDeclarationsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 15, enumBodyDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumBodyDeclarations"

    public static class interfaceDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceDeclaration"
    // Java.g:879:1: interfaceDeclaration returns [Node returnNode] : (normalInterfaceDeclarationGen+= normalInterfaceDeclaration | annotationTypeDeclarationGen+= annotationTypeDeclaration );
    public final JavaParser.interfaceDeclaration_return interfaceDeclaration() throws RecognitionException {
        JavaParser.interfaceDeclaration_return retval = new JavaParser.interfaceDeclaration_return();
        retval.start = input.LT(1);
        int interfaceDeclaration_StartIndex = input.index();
        List list_normalInterfaceDeclarationGen=null;
        List list_annotationTypeDeclarationGen=null;
        RuleReturnScope normalInterfaceDeclarationGen = null;
        RuleReturnScope annotationTypeDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 16) ) { return retval; }
            // Java.g:880:1: (normalInterfaceDeclarationGen+= normalInterfaceDeclaration | annotationTypeDeclarationGen+= annotationTypeDeclaration )
            int alt27=2;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==39) ) {
                alt27=1;
            }
            else if ( (LA27_0==71) ) {
                alt27=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 27, 0, input);

                throw nvae;
            }
            switch (alt27) {
                case 1 :
                    // Java.g:880:3: normalInterfaceDeclarationGen+= normalInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration688);
                    normalInterfaceDeclarationGen=normalInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_normalInterfaceDeclarationGen==null) list_normalInterfaceDeclarationGen=new ArrayList();
                    list_normalInterfaceDeclarationGen.add(normalInterfaceDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclarationReturnNode.setKind("interfaceDeclaration");
                      	    // Create a CST Node
                      		if(list_normalInterfaceDeclarationGen != null) {
                      	        for(Iterator it = list_normalInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.normalInterfaceDeclaration_return r = (JavaParser.normalInterfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("normalInterfaceDeclaration");
                      	            	interfaceDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:898:5: annotationTypeDeclarationGen+= annotationTypeDeclaration
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration700);
                    annotationTypeDeclarationGen=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationTypeDeclarationGen==null) list_annotationTypeDeclarationGen=new ArrayList();
                    list_annotationTypeDeclarationGen.add(annotationTypeDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceDeclarationReturnNode.setKind("interfaceDeclaration");
                      	    // Create a CST Node
                      		if(list_annotationTypeDeclarationGen != null) {
                      	        for(Iterator it = list_annotationTypeDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationTypeDeclaration_return r = (JavaParser.annotationTypeDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationTypeDeclaration");
                      	            	interfaceDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 16, interfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceDeclaration"

    public static class normalInterfaceDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "normalInterfaceDeclaration"
    // Java.g:918:1: normalInterfaceDeclaration returns [Node returnNode] : TK_0= 'interface' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' extendsList+= typeList )? interfaceBodyGen+= interfaceBody ;
    public final JavaParser.normalInterfaceDeclaration_return normalInterfaceDeclaration() throws RecognitionException {
        JavaParser.normalInterfaceDeclaration_return retval = new JavaParser.normalInterfaceDeclaration_return();
        retval.start = input.LT(1);
        int normalInterfaceDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        Token TK_1=null;
        List list_typeParametersGen=null;
        List list_extendsList=null;
        List list_interfaceBodyGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope extendsList = null;
        RuleReturnScope interfaceBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 17) ) { return retval; }
            // Java.g:919:1: (TK_0= 'interface' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' extendsList+= typeList )? interfaceBodyGen+= interfaceBody )
            // Java.g:919:3: TK_0= 'interface' IdentifierGen= Identifier (typeParametersGen+= typeParameters )? (TK_1= 'extends' extendsList+= typeList )? interfaceBodyGen+= interfaceBody
            {
            TK_0=(Token)match(input,39,FOLLOW_39_in_normalInterfaceDeclaration722); if (state.failed) return retval;
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_normalInterfaceDeclaration726); if (state.failed) return retval;
            // Java.g:919:62: (typeParametersGen+= typeParameters )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==33) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // Java.g:0:0: typeParametersGen+= typeParameters
                    {
                    pushFollow(FOLLOW_typeParameters_in_normalInterfaceDeclaration730);
                    typeParametersGen=typeParameters();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
                    list_typeParametersGen.add(typeParametersGen.getTemplate());


                    }
                    break;

            }

            // Java.g:919:80: (TK_1= 'extends' extendsList+= typeList )?
            int alt29=2;
            int LA29_0 = input.LA(1);

            if ( (LA29_0==31) ) {
                alt29=1;
            }
            switch (alt29) {
                case 1 :
                    // Java.g:919:81: TK_1= 'extends' extendsList+= typeList
                    {
                    TK_1=(Token)match(input,31,FOLLOW_31_in_normalInterfaceDeclaration736); if (state.failed) return retval;
                    pushFollow(FOLLOW_typeList_in_normalInterfaceDeclaration740);
                    extendsList=typeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_extendsList==null) list_extendsList=new ArrayList();
                    list_extendsList.add(extendsList.getTemplate());


                    }
                    break;

            }

            pushFollow(FOLLOW_interfaceBody_in_normalInterfaceDeclaration746);
            interfaceBodyGen=interfaceBody();

            state._fsp--;
            if (state.failed) return retval;
            if (list_interfaceBodyGen==null) list_interfaceBodyGen=new ArrayList();
            list_interfaceBodyGen.add(interfaceBodyGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node normalInterfaceDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		normalInterfaceDeclarationReturnNode.setKind("normalInterfaceDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		normalInterfaceDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			normalInterfaceDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		normalInterfaceDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_extendsList != null) {
              	        for(Iterator it = list_extendsList.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("extendsList");
              	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_interfaceBodyGen != null) {
              	        for(Iterator it = list_interfaceBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceBody_return r = (JavaParser.interfaceBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceBody");
              	            	normalInterfaceDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = normalInterfaceDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 17, normalInterfaceDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "normalInterfaceDeclaration"

    public static class typeList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeList"
    // Java.g:986:1: typeList returns [Node returnNode] : typeGen+= type (TK_0= ',' typeGen_1+= type )* ;
    public final JavaParser.typeList_return typeList() throws RecognitionException {
        JavaParser.typeList_return retval = new JavaParser.typeList_return();
        retval.start = input.LT(1);
        int typeList_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_typeGen_1=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope typeGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 18) ) { return retval; }
            // Java.g:987:1: (typeGen+= type (TK_0= ',' typeGen_1+= type )* )
            // Java.g:987:3: typeGen+= type (TK_0= ',' typeGen_1+= type )*
            {
            pushFollow(FOLLOW_type_in_typeList768);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            // Java.g:987:17: (TK_0= ',' typeGen_1+= type )*
            loop30:
            do {
                int alt30=2;
                int LA30_0 = input.LA(1);

                if ( (LA30_0==34) ) {
                    alt30=1;
                }


                switch (alt30) {
            	case 1 :
            	    // Java.g:987:18: TK_0= ',' typeGen_1+= type
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_typeList773); if (state.failed) return retval;
            	    pushFollow(FOLLOW_type_in_typeList777);
            	    typeGen_1=type();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeGen_1==null) list_typeGen_1=new ArrayList();
            	    list_typeGen_1.add(typeGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop30;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typeListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeListReturnNode.setKind("typeList");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	typeListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal typeGen_1 aggregation
              		if(list_typeGen_1 != null) {
              	    for(int pos = 0; pos < list_typeGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeGen_1 != null) {		
              	    	JavaParser.type_return r = (JavaParser.type_return) list_typeGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("type");
              	    		typeListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 18, typeList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeList"

    public static class classBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classBody"
    // Java.g:1031:1: classBody returns [Node returnNode] : TK_0= '{' (classBodyDeclarationGen+= classBodyDeclaration )* TK_1= '}' ;
    public final JavaParser.classBody_return classBody() throws RecognitionException {
        JavaParser.classBody_return retval = new JavaParser.classBody_return();
        retval.start = input.LT(1);
        int classBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_classBodyDeclarationGen=null;
        RuleReturnScope classBodyDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 19) ) { return retval; }
            // Java.g:1032:1: (TK_0= '{' (classBodyDeclarationGen+= classBodyDeclaration )* TK_1= '}' )
            // Java.g:1032:3: TK_0= '{' (classBodyDeclarationGen+= classBodyDeclaration )* TK_1= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_classBody801); if (state.failed) return retval;
            // Java.g:1032:35: (classBodyDeclarationGen+= classBodyDeclaration )*
            loop31:
            do {
                int alt31=2;
                alt31 = dfa31.predict(input);
                switch (alt31) {
            	case 1 :
            	    // Java.g:0:0: classBodyDeclarationGen+= classBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_classBodyDeclaration_in_classBody805);
            	    classBodyDeclarationGen=classBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_classBodyDeclarationGen==null) list_classBodyDeclarationGen=new ArrayList();
            	    list_classBodyDeclarationGen.add(classBodyDeclarationGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop31;
                }
            } while (true);

            TK_1=(Token)match(input,38,FOLLOW_38_in_classBody810); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classBodyReturnNode.setKind("classBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		classBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_classBodyDeclarationGen != null) {
              	        for(Iterator it = list_classBodyDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBodyDeclaration_return r = (JavaParser.classBodyDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBodyDeclaration");
              	            	classBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		classBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 19, classBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBody"

    public static class interfaceBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceBody"
    // Java.g:1070:1: interfaceBody returns [Node returnNode] : TK_0= '{' (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )* TK_1= '}' ;
    public final JavaParser.interfaceBody_return interfaceBody() throws RecognitionException {
        JavaParser.interfaceBody_return retval = new JavaParser.interfaceBody_return();
        retval.start = input.LT(1);
        int interfaceBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_interfaceBodyDeclarationGen=null;
        RuleReturnScope interfaceBodyDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 20) ) { return retval; }
            // Java.g:1071:1: (TK_0= '{' (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )* TK_1= '}' )
            // Java.g:1071:3: TK_0= '{' (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )* TK_1= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_interfaceBody832); if (state.failed) return retval;
            // Java.g:1071:39: (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )*
            loop32:
            do {
                int alt32=2;
                alt32 = dfa32.predict(input);
                switch (alt32) {
            	case 1 :
            	    // Java.g:0:0: interfaceBodyDeclarationGen+= interfaceBodyDeclaration
            	    {
            	    pushFollow(FOLLOW_interfaceBodyDeclaration_in_interfaceBody836);
            	    interfaceBodyDeclarationGen=interfaceBodyDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_interfaceBodyDeclarationGen==null) list_interfaceBodyDeclarationGen=new ArrayList();
            	    list_interfaceBodyDeclarationGen.add(interfaceBodyDeclarationGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop32;
                }
            } while (true);

            TK_1=(Token)match(input,38,FOLLOW_38_in_interfaceBody841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceBodyReturnNode.setKind("interfaceBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		interfaceBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_interfaceBodyDeclarationGen != null) {
              	        for(Iterator it = list_interfaceBodyDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceBodyDeclaration_return r = (JavaParser.interfaceBodyDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceBodyDeclaration");
              	            	interfaceBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		interfaceBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 20, interfaceBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBody"

    public static class classBodyDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classBodyDeclaration"
    // Java.g:1109:1: classBodyDeclaration returns [Node returnNode] : (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl );
    public final JavaParser.classBodyDeclaration_return classBodyDeclaration() throws RecognitionException {
        JavaParser.classBodyDeclaration_return retval = new JavaParser.classBodyDeclaration_return();
        retval.start = input.LT(1);
        int classBodyDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_blockGen=null;
        List list_modifierGen=null;
        List list_memberDeclGen=null;
        RuleReturnScope blockGen = null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope memberDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 21) ) { return retval; }
            // Java.g:1110:1: (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl )
            int alt35=3;
            alt35 = dfa35.predict(input);
            switch (alt35) {
                case 1 :
                    // Java.g:1110:3: TK_0= ';'
                    {
                    TK_0=(Token)match(input,25,FOLLOW_25_in_classBodyDeclaration862); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		classBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1127:4: (TK_0= 'static' )? blockGen+= block
                    {
                    // Java.g:1127:8: (TK_0= 'static' )?
                    int alt33=2;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==27) ) {
                        alt33=1;
                    }
                    switch (alt33) {
                        case 1 :
                            // Java.g:0:0: TK_0= 'static'
                            {
                            TK_0=(Token)match(input,27,FOLLOW_27_in_classBodyDeclaration873); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_block_in_classBodyDeclaration878);
                    blockGen=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		classBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1154:4: (modifierGen+= modifier )* memberDeclGen+= memberDecl
                    {
                    // Java.g:1154:15: (modifierGen+= modifier )*
                    loop34:
                    do {
                        int alt34=2;
                        alt34 = dfa34.predict(input);
                        switch (alt34) {
                    	case 1 :
                    	    // Java.g:0:0: modifierGen+= modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_classBodyDeclaration889);
                    	    modifierGen=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
                    	    list_modifierGen.add(modifierGen.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop34;
                        }
                    } while (true);

                    pushFollow(FOLLOW_memberDecl_in_classBodyDeclaration894);
                    memberDeclGen=memberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_memberDeclGen==null) list_memberDeclGen=new ArrayList();
                    list_memberDeclGen.add(memberDeclGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node classBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		classBodyDeclarationReturnNode.setKind("classBodyDeclaration");
                      	    // Create a CST Node
                      		if(list_modifierGen != null) {
                      	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("modifier");
                      	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_memberDeclGen != null) {
                      	        for(Iterator it = list_memberDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.memberDecl_return r = (JavaParser.memberDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("memberDecl");
                      	            	classBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = classBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 21, classBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classBodyDeclaration"

    public static class memberDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "memberDecl"
    // Java.g:1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );
    public final JavaParser.memberDecl_return memberDecl() throws RecognitionException {
        JavaParser.memberDecl_return retval = new JavaParser.memberDecl_return();
        retval.start = input.LT(1);
        int memberDecl_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_genericMethodOrConstructorDeclGen=null;
        List list_methodDeclarationGen=null;
        List list_fieldDeclarationGen=null;
        List list_voidMethodDeclaratorRestGen=null;
        List list_constructorDeclaratorRestGen=null;
        List list_interfaceDeclarationGen=null;
        List list_classDeclarationGen=null;
        RuleReturnScope genericMethodOrConstructorDeclGen = null;
        RuleReturnScope methodDeclarationGen = null;
        RuleReturnScope fieldDeclarationGen = null;
        RuleReturnScope voidMethodDeclaratorRestGen = null;
        RuleReturnScope constructorDeclaratorRestGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        RuleReturnScope classDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 22) ) { return retval; }
            // Java.g:1185:1: (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration )
            int alt36=7;
            alt36 = dfa36.predict(input);
            switch (alt36) {
                case 1 :
                    // Java.g:1185:3: genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl
                    {
                    pushFollow(FOLLOW_genericMethodOrConstructorDecl_in_memberDecl916);
                    genericMethodOrConstructorDeclGen=genericMethodOrConstructorDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_genericMethodOrConstructorDeclGen==null) list_genericMethodOrConstructorDeclGen=new ArrayList();
                    list_genericMethodOrConstructorDeclGen.add(genericMethodOrConstructorDeclGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_genericMethodOrConstructorDeclGen != null) {
                      	        for(Iterator it = list_genericMethodOrConstructorDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.genericMethodOrConstructorDecl_return r = (JavaParser.genericMethodOrConstructorDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("genericMethodOrConstructorDecl");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1203:4: methodDeclarationGen+= methodDeclaration
                    {
                    pushFollow(FOLLOW_methodDeclaration_in_memberDecl927);
                    methodDeclarationGen=methodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_methodDeclarationGen==null) list_methodDeclarationGen=new ArrayList();
                    list_methodDeclarationGen.add(methodDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_methodDeclarationGen != null) {
                      	        for(Iterator it = list_methodDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.methodDeclaration_return r = (JavaParser.methodDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("methodDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1221:4: fieldDeclarationGen+= fieldDeclaration
                    {
                    pushFollow(FOLLOW_fieldDeclaration_in_memberDecl938);
                    fieldDeclarationGen=fieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_fieldDeclarationGen==null) list_fieldDeclarationGen=new ArrayList();
                    list_fieldDeclarationGen.add(fieldDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_fieldDeclarationGen != null) {
                      	        for(Iterator it = list_fieldDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.fieldDeclaration_return r = (JavaParser.fieldDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("fieldDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:1239:4: TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest
                    {
                    TK_0=(Token)match(input,40,FOLLOW_40_in_memberDecl949); if (state.failed) return retval;
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_memberDecl953); if (state.failed) return retval;
                    pushFollow(FOLLOW_voidMethodDeclaratorRest_in_memberDecl957);
                    voidMethodDeclaratorRestGen=voidMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_voidMethodDeclaratorRestGen==null) list_voidMethodDeclaratorRestGen=new ArrayList();
                    list_voidMethodDeclaratorRestGen.add(voidMethodDeclaratorRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		memberDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			memberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_voidMethodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_voidMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.voidMethodDeclaratorRest_return r = (JavaParser.voidMethodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("voidMethodDeclaratorRest");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:1275:4: IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_memberDecl968); if (state.failed) return retval;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_memberDecl972);
                    constructorDeclaratorRestGen=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constructorDeclaratorRestGen==null) list_constructorDeclaratorRestGen=new ArrayList();
                    list_constructorDeclaratorRestGen.add(constructorDeclaratorRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			memberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_constructorDeclaratorRestGen != null) {
                      	        for(Iterator it = list_constructorDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constructorDeclaratorRest_return r = (JavaParser.constructorDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constructorDeclaratorRest");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:1302:4: interfaceDeclarationGen+= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_memberDecl983);
                    interfaceDeclarationGen=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceDeclarationGen != null) {
                      	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:1320:4: classDeclarationGen+= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_memberDecl994);
                    classDeclarationGen=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node memberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		memberDeclReturnNode.setKind("memberDecl");
                      	    // Create a CST Node
                      		if(list_classDeclarationGen != null) {
                      	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classDeclaration");
                      	            	memberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = memberDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 22, memberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "memberDecl"

    public static class genericMethodOrConstructorDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "genericMethodOrConstructorDecl"
    // Java.g:1340:1: genericMethodOrConstructorDecl returns [Node returnNode] : typeParametersGen+= typeParameters genericMethodOrConstructorRestGen+= genericMethodOrConstructorRest ;
    public final JavaParser.genericMethodOrConstructorDecl_return genericMethodOrConstructorDecl() throws RecognitionException {
        JavaParser.genericMethodOrConstructorDecl_return retval = new JavaParser.genericMethodOrConstructorDecl_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorDecl_StartIndex = input.index();
        List list_typeParametersGen=null;
        List list_genericMethodOrConstructorRestGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope genericMethodOrConstructorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 23) ) { return retval; }
            // Java.g:1341:1: (typeParametersGen+= typeParameters genericMethodOrConstructorRestGen+= genericMethodOrConstructorRest )
            // Java.g:1341:3: typeParametersGen+= typeParameters genericMethodOrConstructorRestGen+= genericMethodOrConstructorRest
            {
            pushFollow(FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1016);
            typeParametersGen=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
            list_typeParametersGen.add(typeParametersGen.getTemplate());

            pushFollow(FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1020);
            genericMethodOrConstructorRestGen=genericMethodOrConstructorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_genericMethodOrConstructorRestGen==null) list_genericMethodOrConstructorRestGen=new ArrayList();
            list_genericMethodOrConstructorRestGen.add(genericMethodOrConstructorRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node genericMethodOrConstructorDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		genericMethodOrConstructorDeclReturnNode.setKind("genericMethodOrConstructorDecl");
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	genericMethodOrConstructorDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_genericMethodOrConstructorRestGen != null) {
              	        for(Iterator it = list_genericMethodOrConstructorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.genericMethodOrConstructorRest_return r = (JavaParser.genericMethodOrConstructorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("genericMethodOrConstructorRest");
              	            	genericMethodOrConstructorDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = genericMethodOrConstructorDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 23, genericMethodOrConstructorDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorDecl"

    public static class genericMethodOrConstructorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "genericMethodOrConstructorRest"
    // Java.g:1371:1: genericMethodOrConstructorRest returns [Node returnNode] : ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest );
    public final JavaParser.genericMethodOrConstructorRest_return genericMethodOrConstructorRest() throws RecognitionException {
        JavaParser.genericMethodOrConstructorRest_return retval = new JavaParser.genericMethodOrConstructorRest_return();
        retval.start = input.LT(1);
        int genericMethodOrConstructorRest_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_typeGen=null;
        List list_methodDeclaratorRestGen=null;
        List list_constructorDeclaratorRestGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope methodDeclaratorRestGen = null;
        RuleReturnScope constructorDeclaratorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 24) ) { return retval; }
            // Java.g:1372:1: ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest )
            int alt38=2;
            alt38 = dfa38.predict(input);
            switch (alt38) {
                case 1 :
                    // Java.g:1372:3: (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest
                    {
                    // Java.g:1372:3: (typeGen+= type | TK_0= 'void' )
                    int alt37=2;
                    alt37 = dfa37.predict(input);
                    switch (alt37) {
                        case 1 :
                            // Java.g:1372:4: typeGen+= type
                            {
                            pushFollow(FOLLOW_type_in_genericMethodOrConstructorRest1043);
                            typeGen=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_typeGen==null) list_typeGen=new ArrayList();
                            list_typeGen.add(typeGen.getTemplate());


                            }
                            break;
                        case 2 :
                            // Java.g:1372:20: TK_0= 'void'
                            {
                            TK_0=(Token)match(input,40,FOLLOW_40_in_genericMethodOrConstructorRest1049); if (state.failed) return retval;

                            }
                            break;

                    }

                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1054); if (state.failed) return retval;
                    pushFollow(FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1058);
                    methodDeclaratorRestGen=methodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_methodDeclaratorRestGen==null) list_methodDeclaratorRestGen=new ArrayList();
                    list_methodDeclaratorRestGen.add(methodDeclaratorRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node genericMethodOrConstructorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		genericMethodOrConstructorRestReturnNode.setKind("genericMethodOrConstructorRest");
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		genericMethodOrConstructorRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			genericMethodOrConstructorRestReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_methodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_methodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.methodDeclaratorRest_return r = (JavaParser.methodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("methodDeclaratorRest");
                      	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = genericMethodOrConstructorRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1418:4: IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_genericMethodOrConstructorRest1069); if (state.failed) return retval;
                    pushFollow(FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1073);
                    constructorDeclaratorRestGen=constructorDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constructorDeclaratorRestGen==null) list_constructorDeclaratorRestGen=new ArrayList();
                    list_constructorDeclaratorRestGen.add(constructorDeclaratorRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node genericMethodOrConstructorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		genericMethodOrConstructorRestReturnNode.setKind("genericMethodOrConstructorRest");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			genericMethodOrConstructorRestReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_constructorDeclaratorRestGen != null) {
                      	        for(Iterator it = list_constructorDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constructorDeclaratorRest_return r = (JavaParser.constructorDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constructorDeclaratorRest");
                      	            	genericMethodOrConstructorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = genericMethodOrConstructorRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 24, genericMethodOrConstructorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "genericMethodOrConstructorRest"

    public static class methodDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "methodDeclaration"
    // Java.g:1447:1: methodDeclaration returns [Node returnNode] : typeGen+= type IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest ;
    public final JavaParser.methodDeclaration_return methodDeclaration() throws RecognitionException {
        JavaParser.methodDeclaration_return retval = new JavaParser.methodDeclaration_return();
        retval.start = input.LT(1);
        int methodDeclaration_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_typeGen=null;
        List list_methodDeclaratorRestGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope methodDeclaratorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 25) ) { return retval; }
            // Java.g:1448:1: (typeGen+= type IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest )
            // Java.g:1448:3: typeGen+= type IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest
            {
            pushFollow(FOLLOW_type_in_methodDeclaration1094);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_methodDeclaration1098); if (state.failed) return retval;
            pushFollow(FOLLOW_methodDeclaratorRest_in_methodDeclaration1102);
            methodDeclaratorRestGen=methodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_methodDeclaratorRestGen==null) list_methodDeclaratorRestGen=new ArrayList();
            list_methodDeclaratorRestGen.add(methodDeclaratorRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node methodDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodDeclarationReturnNode.setKind("methodDeclaration");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	methodDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			methodDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_methodDeclaratorRestGen != null) {
              	        for(Iterator it = list_methodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodDeclaratorRest_return r = (JavaParser.methodDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodDeclaratorRest");
              	            	methodDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 25, methodDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaration"

    public static class fieldDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "fieldDeclaration"
    // Java.g:1487:1: fieldDeclaration returns [Node returnNode] : typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' ;
    public final JavaParser.fieldDeclaration_return fieldDeclaration() throws RecognitionException {
        JavaParser.fieldDeclaration_return retval = new JavaParser.fieldDeclaration_return();
        retval.start = input.LT(1);
        int fieldDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 26) ) { return retval; }
            // Java.g:1488:1: (typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' )
            // Java.g:1488:3: typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';'
            {
            pushFollow(FOLLOW_type_in_fieldDeclaration1123);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            pushFollow(FOLLOW_variableDeclarators_in_fieldDeclaration1127);
            variableDeclaratorsGen=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
            list_variableDeclaratorsGen.add(variableDeclaratorsGen.getTemplate());

            TK_0=(Token)match(input,25,FOLLOW_25_in_fieldDeclaration1131); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node fieldDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		fieldDeclarationReturnNode.setKind("fieldDeclaration");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	fieldDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_variableDeclaratorsGen != null) {
              	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarators");
              	            	fieldDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		fieldDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = fieldDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 26, fieldDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "fieldDeclaration"

    public static class interfaceBodyDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceBodyDeclaration"
    // Java.g:1527:1: interfaceBodyDeclaration returns [Node returnNode] : ( (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl | TK_0= ';' );
    public final JavaParser.interfaceBodyDeclaration_return interfaceBodyDeclaration() throws RecognitionException {
        JavaParser.interfaceBodyDeclaration_return retval = new JavaParser.interfaceBodyDeclaration_return();
        retval.start = input.LT(1);
        int interfaceBodyDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_modifierGen=null;
        List list_interfaceMemberDeclGen=null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope interfaceMemberDeclGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 27) ) { return retval; }
            // Java.g:1528:1: ( (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl | TK_0= ';' )
            int alt40=2;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    // Java.g:1528:3: (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl
                    {
                    // Java.g:1528:14: (modifierGen+= modifier )*
                    loop39:
                    do {
                        int alt39=2;
                        alt39 = dfa39.predict(input);
                        switch (alt39) {
                    	case 1 :
                    	    // Java.g:0:0: modifierGen+= modifier
                    	    {
                    	    pushFollow(FOLLOW_modifier_in_interfaceBodyDeclaration1154);
                    	    modifierGen=modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
                    	    list_modifierGen.add(modifierGen.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    pushFollow(FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration1159);
                    interfaceMemberDeclGen=interfaceMemberDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceMemberDeclGen==null) list_interfaceMemberDeclGen=new ArrayList();
                    list_interfaceMemberDeclGen.add(interfaceMemberDeclGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceBodyDeclarationReturnNode.setKind("interfaceBodyDeclaration");
                      	    // Create a CST Node
                      		if(list_modifierGen != null) {
                      	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("modifier");
                      	            	interfaceBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_interfaceMemberDeclGen != null) {
                      	        for(Iterator it = list_interfaceMemberDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceMemberDecl_return r = (JavaParser.interfaceMemberDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceMemberDecl");
                      	            	interfaceBodyDeclarationReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1556:6: TK_0= ';'
                    {
                    TK_0=(Token)match(input,25,FOLLOW_25_in_interfaceBodyDeclaration1172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceBodyDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceBodyDeclarationReturnNode.setKind("interfaceBodyDeclaration");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		interfaceBodyDeclarationReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceBodyDeclarationReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 27, interfaceBodyDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceBodyDeclaration"

    public static class interfaceMemberDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceMemberDecl"
    // Java.g:1575:1: interfaceMemberDecl returns [Node returnNode] : (interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl | interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl | TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );
    public final JavaParser.interfaceMemberDecl_return interfaceMemberDecl() throws RecognitionException {
        JavaParser.interfaceMemberDecl_return retval = new JavaParser.interfaceMemberDecl_return();
        retval.start = input.LT(1);
        int interfaceMemberDecl_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_interfaceMethodOrFieldDeclGen=null;
        List list_interfaceGenericMethodDeclGen=null;
        List list_voidInterfaceMethodDeclaratorRestGen=null;
        List list_interfaceDeclarationGen=null;
        List list_classDeclarationGen=null;
        RuleReturnScope interfaceMethodOrFieldDeclGen = null;
        RuleReturnScope interfaceGenericMethodDeclGen = null;
        RuleReturnScope voidInterfaceMethodDeclaratorRestGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        RuleReturnScope classDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 28) ) { return retval; }
            // Java.g:1576:1: (interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl | interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl | TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration )
            int alt41=5;
            alt41 = dfa41.predict(input);
            switch (alt41) {
                case 1 :
                    // Java.g:1576:3: interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl
                    {
                    pushFollow(FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl1193);
                    interfaceMethodOrFieldDeclGen=interfaceMethodOrFieldDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceMethodOrFieldDeclGen==null) list_interfaceMethodOrFieldDeclGen=new ArrayList();
                    list_interfaceMethodOrFieldDeclGen.add(interfaceMethodOrFieldDeclGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceMethodOrFieldDeclGen != null) {
                      	        for(Iterator it = list_interfaceMethodOrFieldDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceMethodOrFieldDecl_return r = (JavaParser.interfaceMethodOrFieldDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceMethodOrFieldDecl");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1594:6: interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl
                    {
                    pushFollow(FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl1206);
                    interfaceGenericMethodDeclGen=interfaceGenericMethodDecl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceGenericMethodDeclGen==null) list_interfaceGenericMethodDeclGen=new ArrayList();
                    list_interfaceGenericMethodDeclGen.add(interfaceGenericMethodDeclGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceGenericMethodDeclGen != null) {
                      	        for(Iterator it = list_interfaceGenericMethodDeclGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceGenericMethodDecl_return r = (JavaParser.interfaceGenericMethodDecl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceGenericMethodDecl");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:1612:9: TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest
                    {
                    TK_0=(Token)match(input,40,FOLLOW_40_in_interfaceMemberDecl1222); if (state.failed) return retval;
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceMemberDecl1226); if (state.failed) return retval;
                    pushFollow(FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl1230);
                    voidInterfaceMethodDeclaratorRestGen=voidInterfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_voidInterfaceMethodDeclaratorRestGen==null) list_voidInterfaceMethodDeclaratorRestGen=new ArrayList();
                    list_voidInterfaceMethodDeclaratorRestGen.add(voidInterfaceMethodDeclaratorRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		interfaceMemberDeclReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			interfaceMemberDeclReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_voidInterfaceMethodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_voidInterfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.voidInterfaceMethodDeclaratorRest_return r = (JavaParser.voidInterfaceMethodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("voidInterfaceMethodDeclaratorRest");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:1648:9: interfaceDeclarationGen+= interfaceDeclaration
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_interfaceMemberDecl1246);
                    interfaceDeclarationGen=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_interfaceDeclarationGen != null) {
                      	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceDeclaration");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:1666:9: classDeclarationGen+= classDeclaration
                    {
                    pushFollow(FOLLOW_classDeclaration_in_interfaceMemberDecl1262);
                    classDeclarationGen=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMemberDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMemberDeclReturnNode.setKind("interfaceMemberDecl");
                      	    // Create a CST Node
                      		if(list_classDeclarationGen != null) {
                      	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classDeclaration");
                      	            	interfaceMemberDeclReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMemberDeclReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 28, interfaceMemberDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMemberDecl"

    public static class interfaceMethodOrFieldDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceMethodOrFieldDecl"
    // Java.g:1686:1: interfaceMethodOrFieldDecl returns [Node returnNode] : typeGen+= type IdentifierGen= Identifier interfaceMethodOrFieldRestGen+= interfaceMethodOrFieldRest ;
    public final JavaParser.interfaceMethodOrFieldDecl_return interfaceMethodOrFieldDecl() throws RecognitionException {
        JavaParser.interfaceMethodOrFieldDecl_return retval = new JavaParser.interfaceMethodOrFieldDecl_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldDecl_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_typeGen=null;
        List list_interfaceMethodOrFieldRestGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope interfaceMethodOrFieldRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 29) ) { return retval; }
            // Java.g:1687:1: (typeGen+= type IdentifierGen= Identifier interfaceMethodOrFieldRestGen+= interfaceMethodOrFieldRest )
            // Java.g:1687:3: typeGen+= type IdentifierGen= Identifier interfaceMethodOrFieldRestGen+= interfaceMethodOrFieldRest
            {
            pushFollow(FOLLOW_type_in_interfaceMethodOrFieldDecl1284);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceMethodOrFieldDecl1288); if (state.failed) return retval;
            pushFollow(FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl1292);
            interfaceMethodOrFieldRestGen=interfaceMethodOrFieldRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_interfaceMethodOrFieldRestGen==null) list_interfaceMethodOrFieldRestGen=new ArrayList();
            list_interfaceMethodOrFieldRestGen.add(interfaceMethodOrFieldRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceMethodOrFieldDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceMethodOrFieldDeclReturnNode.setKind("interfaceMethodOrFieldDecl");
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	interfaceMethodOrFieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			interfaceMethodOrFieldDeclReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_interfaceMethodOrFieldRestGen != null) {
              	        for(Iterator it = list_interfaceMethodOrFieldRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceMethodOrFieldRest_return r = (JavaParser.interfaceMethodOrFieldRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceMethodOrFieldRest");
              	            	interfaceMethodOrFieldDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceMethodOrFieldDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 29, interfaceMethodOrFieldDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldDecl"

    public static class interfaceMethodOrFieldRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceMethodOrFieldRest"
    // Java.g:1726:1: interfaceMethodOrFieldRest returns [Node returnNode] : (constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';' | interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest );
    public final JavaParser.interfaceMethodOrFieldRest_return interfaceMethodOrFieldRest() throws RecognitionException {
        JavaParser.interfaceMethodOrFieldRest_return retval = new JavaParser.interfaceMethodOrFieldRest_return();
        retval.start = input.LT(1);
        int interfaceMethodOrFieldRest_StartIndex = input.index();
        Token TK_0=null;
        List list_constantDeclaratorsRestGen=null;
        List list_interfaceMethodDeclaratorRestGen=null;
        RuleReturnScope constantDeclaratorsRestGen = null;
        RuleReturnScope interfaceMethodDeclaratorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 30) ) { return retval; }
            // Java.g:1727:1: (constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';' | interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest )
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==41||LA42_0==44) ) {
                alt42=1;
            }
            else if ( (LA42_0==65) ) {
                alt42=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 42, 0, input);

                throw nvae;
            }
            switch (alt42) {
                case 1 :
                    // Java.g:1727:3: constantDeclaratorsRestGen+= constantDeclaratorsRest TK_0= ';'
                    {
                    pushFollow(FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest1314);
                    constantDeclaratorsRestGen=constantDeclaratorsRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constantDeclaratorsRestGen==null) list_constantDeclaratorsRestGen=new ArrayList();
                    list_constantDeclaratorsRestGen.add(constantDeclaratorsRestGen.getTemplate());

                    TK_0=(Token)match(input,25,FOLLOW_25_in_interfaceMethodOrFieldRest1318); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMethodOrFieldRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMethodOrFieldRestReturnNode.setKind("interfaceMethodOrFieldRest");
                      	    // Create a CST Node
                      		if(list_constantDeclaratorsRestGen != null) {
                      	        for(Iterator it = list_constantDeclaratorsRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constantDeclaratorsRest_return r = (JavaParser.constantDeclaratorsRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constantDeclaratorsRest");
                      	            	interfaceMethodOrFieldRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		interfaceMethodOrFieldRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMethodOrFieldRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:1754:4: interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest
                    {
                    pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest1329);
                    interfaceMethodDeclaratorRestGen=interfaceMethodDeclaratorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceMethodDeclaratorRestGen==null) list_interfaceMethodDeclaratorRestGen=new ArrayList();
                    list_interfaceMethodDeclaratorRestGen.add(interfaceMethodDeclaratorRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node interfaceMethodOrFieldRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		interfaceMethodOrFieldRestReturnNode.setKind("interfaceMethodOrFieldRest");
                      	    // Create a CST Node
                      		if(list_interfaceMethodDeclaratorRestGen != null) {
                      	        for(Iterator it = list_interfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceMethodDeclaratorRest_return r = (JavaParser.interfaceMethodDeclaratorRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceMethodDeclaratorRest");
                      	            	interfaceMethodOrFieldRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = interfaceMethodOrFieldRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 30, interfaceMethodOrFieldRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodOrFieldRest"

    public static class methodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "methodDeclaratorRest"
    // Java.g:1774:1: methodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_3= ';' ) ;
    public final JavaParser.methodDeclaratorRest_return methodDeclaratorRest() throws RecognitionException {
        JavaParser.methodDeclaratorRest_return retval = new JavaParser.methodDeclaratorRest_return();
        retval.start = input.LT(1);
        int methodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        List list_methodBodyGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        RuleReturnScope methodBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 31) ) { return retval; }
            // Java.g:1775:1: (formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_3= ';' ) )
            // Java.g:1775:3: formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_3= ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_methodDeclaratorRest1351);
            formalParametersGen=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen.getTemplate());

            // Java.g:1775:41: (TK_0= '[' TK_1= ']' )*
            loop43:
            do {
                int alt43=2;
                int LA43_0 = input.LA(1);

                if ( (LA43_0==41) ) {
                    alt43=1;
                }


                switch (alt43) {
            	case 1 :
            	    // Java.g:1775:42: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)match(input,41,FOLLOW_41_in_methodDeclaratorRest1356); if (state.failed) return retval;
            	    TK_1=(Token)match(input,42,FOLLOW_42_in_methodDeclaratorRest1360); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop43;
                }
            } while (true);

            // Java.g:1776:9: (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==43) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    // Java.g:1776:10: TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_2=(Token)match(input,43,FOLLOW_43_in_methodDeclaratorRest1375); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_methodDeclaratorRest1379);
                    qualifiedNameListGen=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen.getTemplate());


                    }
                    break;

            }

            // Java.g:1777:9: (methodBodyGen+= methodBody | TK_3= ';' )
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==37) ) {
                alt45=1;
            }
            else if ( (LA45_0==25) ) {
                alt45=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 45, 0, input);

                throw nvae;
            }
            switch (alt45) {
                case 1 :
                    // Java.g:1777:13: methodBodyGen+= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_methodDeclaratorRest1397);
                    methodBodyGen=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_methodBodyGen==null) list_methodBodyGen=new ArrayList();
                    list_methodBodyGen.add(methodBodyGen.getTemplate());


                    }
                    break;
                case 2 :
                    // Java.g:1778:13: TK_3= ';'
                    {
                    TK_3=(Token)match(input,25,FOLLOW_25_in_methodDeclaratorRest1413); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node methodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodDeclaratorRestReturnNode.setKind("methodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		methodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		methodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		methodDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodBodyGen != null) {
              	        for(Iterator it = list_methodBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodBody");
              	            	methodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		methodDeclaratorRestReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 31, methodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodDeclaratorRest"

    public static class voidMethodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "voidMethodDeclaratorRest"
    // Java.g:1855:1: voidMethodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_1= ';' ) ;
    public final JavaParser.voidMethodDeclaratorRest_return voidMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidMethodDeclaratorRest_return retval = new JavaParser.voidMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidMethodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        List list_methodBodyGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        RuleReturnScope methodBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 32) ) { return retval; }
            // Java.g:1856:1: (formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_1= ';' ) )
            // Java.g:1856:3: formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? (methodBodyGen+= methodBody | TK_1= ';' )
            {
            pushFollow(FOLLOW_formalParameters_in_voidMethodDeclaratorRest1445);
            formalParametersGen=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen.getTemplate());

            // Java.g:1856:41: (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==43) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // Java.g:1856:42: TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_0=(Token)match(input,43,FOLLOW_43_in_voidMethodDeclaratorRest1450); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest1454);
                    qualifiedNameListGen=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen.getTemplate());


                    }
                    break;

            }

            // Java.g:1857:9: (methodBodyGen+= methodBody | TK_1= ';' )
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==37) ) {
                alt47=1;
            }
            else if ( (LA47_0==25) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    // Java.g:1857:13: methodBodyGen+= methodBody
                    {
                    pushFollow(FOLLOW_methodBody_in_voidMethodDeclaratorRest1472);
                    methodBodyGen=methodBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_methodBodyGen==null) list_methodBodyGen=new ArrayList();
                    list_methodBodyGen.add(methodBodyGen.getTemplate());


                    }
                    break;
                case 2 :
                    // Java.g:1858:13: TK_1= ';'
                    {
                    TK_1=(Token)match(input,25,FOLLOW_25_in_voidMethodDeclaratorRest1488); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node voidMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		voidMethodDeclaratorRestReturnNode.setKind("voidMethodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		voidMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodBodyGen != null) {
              	        for(Iterator it = list_methodBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodBody");
              	            	voidMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		voidMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = voidMethodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 32, voidMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidMethodDeclaratorRest"

    public static class interfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceMethodDeclaratorRest"
    // Java.g:1917:1: interfaceMethodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_3= ';' ;
    public final JavaParser.interfaceMethodDeclaratorRest_return interfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.interfaceMethodDeclaratorRest_return retval = new JavaParser.interfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int interfaceMethodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 33) ) { return retval; }
            // Java.g:1918:1: (formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_3= ';' )
            // Java.g:1918:3: formalParametersGen+= formalParameters (TK_0= '[' TK_1= ']' )* (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_3= ';'
            {
            pushFollow(FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1520);
            formalParametersGen=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen.getTemplate());

            // Java.g:1918:41: (TK_0= '[' TK_1= ']' )*
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);

                if ( (LA48_0==41) ) {
                    alt48=1;
                }


                switch (alt48) {
            	case 1 :
            	    // Java.g:1918:42: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)match(input,41,FOLLOW_41_in_interfaceMethodDeclaratorRest1525); if (state.failed) return retval;
            	    TK_1=(Token)match(input,42,FOLLOW_42_in_interfaceMethodDeclaratorRest1529); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop48;
                }
            } while (true);

            // Java.g:1918:62: (TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==43) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // Java.g:1918:63: TK_2= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_2=(Token)match(input,43,FOLLOW_43_in_interfaceMethodDeclaratorRest1536); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest1540);
                    qualifiedNameListGen=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen.getTemplate());


                    }
                    break;

            }

            TK_3=(Token)match(input,25,FOLLOW_25_in_interfaceMethodDeclaratorRest1546); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceMethodDeclaratorRestReturnNode.setKind("interfaceMethodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	interfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	interfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		interfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceMethodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 33, interfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceMethodDeclaratorRest"

    public static class interfaceGenericMethodDecl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "interfaceGenericMethodDecl"
    // Java.g:1984:1: interfaceGenericMethodDecl returns [Node returnNode] : typeParametersGen+= typeParameters (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest ;
    public final JavaParser.interfaceGenericMethodDecl_return interfaceGenericMethodDecl() throws RecognitionException {
        JavaParser.interfaceGenericMethodDecl_return retval = new JavaParser.interfaceGenericMethodDecl_return();
        retval.start = input.LT(1);
        int interfaceGenericMethodDecl_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_typeParametersGen=null;
        List list_typeGen=null;
        List list_interfaceMethodDeclaratorRestGen=null;
        RuleReturnScope typeParametersGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope interfaceMethodDeclaratorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 34) ) { return retval; }
            // Java.g:1985:1: (typeParametersGen+= typeParameters (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest )
            // Java.g:1985:3: typeParametersGen+= typeParameters (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier interfaceMethodDeclaratorRestGen+= interfaceMethodDeclaratorRest
            {
            pushFollow(FOLLOW_typeParameters_in_interfaceGenericMethodDecl1568);
            typeParametersGen=typeParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeParametersGen==null) list_typeParametersGen=new ArrayList();
            list_typeParametersGen.add(typeParametersGen.getTemplate());

            // Java.g:1985:37: (typeGen+= type | TK_0= 'void' )
            int alt50=2;
            alt50 = dfa50.predict(input);
            switch (alt50) {
                case 1 :
                    // Java.g:1985:38: typeGen+= type
                    {
                    pushFollow(FOLLOW_type_in_interfaceGenericMethodDecl1573);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen.getTemplate());


                    }
                    break;
                case 2 :
                    // Java.g:1985:54: TK_0= 'void'
                    {
                    TK_0=(Token)match(input,40,FOLLOW_40_in_interfaceGenericMethodDecl1579); if (state.failed) return retval;

                    }
                    break;

            }

            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_interfaceGenericMethodDecl1584); if (state.failed) return retval;
            pushFollow(FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1596);
            interfaceMethodDeclaratorRestGen=interfaceMethodDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_interfaceMethodDeclaratorRestGen==null) list_interfaceMethodDeclaratorRestGen=new ArrayList();
            list_interfaceMethodDeclaratorRestGen.add(interfaceMethodDeclaratorRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node interfaceGenericMethodDeclReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		interfaceGenericMethodDeclReturnNode.setKind("interfaceGenericMethodDecl");
              	    // Create a CST Node
              		if(list_typeParametersGen != null) {
              	        for(Iterator it = list_typeParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeParameters_return r = (JavaParser.typeParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeParameters");
              	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		interfaceGenericMethodDeclReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			interfaceGenericMethodDeclReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_interfaceMethodDeclaratorRestGen != null) {
              	        for(Iterator it = list_interfaceMethodDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.interfaceMethodDeclaratorRest_return r = (JavaParser.interfaceMethodDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("interfaceMethodDeclaratorRest");
              	            	interfaceGenericMethodDeclReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = interfaceGenericMethodDeclReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 34, interfaceGenericMethodDecl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "interfaceGenericMethodDecl"

    public static class voidInterfaceMethodDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "voidInterfaceMethodDeclaratorRest"
    // Java.g:2044:1: voidInterfaceMethodDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_1= ';' ;
    public final JavaParser.voidInterfaceMethodDeclaratorRest_return voidInterfaceMethodDeclaratorRest() throws RecognitionException {
        JavaParser.voidInterfaceMethodDeclaratorRest_return retval = new JavaParser.voidInterfaceMethodDeclaratorRest_return();
        retval.start = input.LT(1);
        int voidInterfaceMethodDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 35) ) { return retval; }
            // Java.g:2045:1: (formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_1= ';' )
            // Java.g:2045:3: formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? TK_1= ';'
            {
            pushFollow(FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1618);
            formalParametersGen=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen.getTemplate());

            // Java.g:2045:41: (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==43) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // Java.g:2045:42: TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_0=(Token)match(input,43,FOLLOW_43_in_voidInterfaceMethodDeclaratorRest1623); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest1627);
                    qualifiedNameListGen=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen.getTemplate());


                    }
                    break;

            }

            TK_1=(Token)match(input,25,FOLLOW_25_in_voidInterfaceMethodDeclaratorRest1633); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node voidInterfaceMethodDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		voidInterfaceMethodDeclaratorRestReturnNode.setKind("voidInterfaceMethodDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		voidInterfaceMethodDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = voidInterfaceMethodDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 35, voidInterfaceMethodDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "voidInterfaceMethodDeclaratorRest"

    public static class constructorDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constructorDeclaratorRest"
    // Java.g:2093:1: constructorDeclaratorRest returns [Node returnNode] : formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? methodBodyGen+= methodBody ;
    public final JavaParser.constructorDeclaratorRest_return constructorDeclaratorRest() throws RecognitionException {
        JavaParser.constructorDeclaratorRest_return retval = new JavaParser.constructorDeclaratorRest_return();
        retval.start = input.LT(1);
        int constructorDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        List list_formalParametersGen=null;
        List list_qualifiedNameListGen=null;
        List list_methodBodyGen=null;
        RuleReturnScope formalParametersGen = null;
        RuleReturnScope qualifiedNameListGen = null;
        RuleReturnScope methodBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 36) ) { return retval; }
            // Java.g:2094:1: (formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? methodBodyGen+= methodBody )
            // Java.g:2094:3: formalParametersGen+= formalParameters (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )? methodBodyGen+= methodBody
            {
            pushFollow(FOLLOW_formalParameters_in_constructorDeclaratorRest1655);
            formalParametersGen=formalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParametersGen==null) list_formalParametersGen=new ArrayList();
            list_formalParametersGen.add(formalParametersGen.getTemplate());

            // Java.g:2094:41: (TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList )?
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==43) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    // Java.g:2094:42: TK_0= 'throws' qualifiedNameListGen+= qualifiedNameList
                    {
                    TK_0=(Token)match(input,43,FOLLOW_43_in_constructorDeclaratorRest1660); if (state.failed) return retval;
                    pushFollow(FOLLOW_qualifiedNameList_in_constructorDeclaratorRest1664);
                    qualifiedNameListGen=qualifiedNameList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_qualifiedNameListGen==null) list_qualifiedNameListGen=new ArrayList();
                    list_qualifiedNameListGen.add(qualifiedNameListGen.getTemplate());


                    }
                    break;

            }

            pushFollow(FOLLOW_methodBody_in_constructorDeclaratorRest1670);
            methodBodyGen=methodBody();

            state._fsp--;
            if (state.failed) return retval;
            if (list_methodBodyGen==null) list_methodBodyGen=new ArrayList();
            list_methodBodyGen.add(methodBodyGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constructorDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constructorDeclaratorRestReturnNode.setKind("constructorDeclaratorRest");
              	    // Create a CST Node
              		if(list_formalParametersGen != null) {
              	        for(Iterator it = list_formalParametersGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameters_return r = (JavaParser.formalParameters_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameters");
              	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		constructorDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_qualifiedNameListGen != null) {
              	        for(Iterator it = list_qualifiedNameListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedNameList_return r = (JavaParser.qualifiedNameList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedNameList");
              	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_methodBodyGen != null) {
              	        for(Iterator it = list_methodBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.methodBody_return r = (JavaParser.methodBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("methodBody");
              	            	constructorDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constructorDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 36, constructorDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constructorDeclaratorRest"

    public static class constantDeclarator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constantDeclarator"
    // Java.g:2143:1: constantDeclarator returns [Node returnNode] : IdentifierGen= Identifier constantDeclaratorRestGen+= constantDeclaratorRest ;
    public final JavaParser.constantDeclarator_return constantDeclarator() throws RecognitionException {
        JavaParser.constantDeclarator_return retval = new JavaParser.constantDeclarator_return();
        retval.start = input.LT(1);
        int constantDeclarator_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_constantDeclaratorRestGen=null;
        RuleReturnScope constantDeclaratorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 37) ) { return retval; }
            // Java.g:2144:1: (IdentifierGen= Identifier constantDeclaratorRestGen+= constantDeclaratorRest )
            // Java.g:2144:3: IdentifierGen= Identifier constantDeclaratorRestGen+= constantDeclaratorRest
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_constantDeclarator1691); if (state.failed) return retval;
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclarator1695);
            constantDeclaratorRestGen=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constantDeclaratorRestGen==null) list_constantDeclaratorRestGen=new ArrayList();
            list_constantDeclaratorRestGen.add(constantDeclaratorRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constantDeclaratorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantDeclaratorReturnNode.setKind("constantDeclarator");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			constantDeclaratorReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_constantDeclaratorRestGen != null) {
              	        for(Iterator it = list_constantDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.constantDeclaratorRest_return r = (JavaParser.constantDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constantDeclaratorRest");
              	            	constantDeclaratorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantDeclaratorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 37, constantDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclarator"

    public static class variableDeclarators_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variableDeclarators"
    // Java.g:2173:1: variableDeclarators returns [Node returnNode] : variableDeclaratorGen+= variableDeclarator (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )* ;
    public final JavaParser.variableDeclarators_return variableDeclarators() throws RecognitionException {
        JavaParser.variableDeclarators_return retval = new JavaParser.variableDeclarators_return();
        retval.start = input.LT(1);
        int variableDeclarators_StartIndex = input.index();
        Token TK_0=null;
        List list_variableDeclaratorGen=null;
        List list_variableDeclaratorGen_1=null;
        RuleReturnScope variableDeclaratorGen = null;
        RuleReturnScope variableDeclaratorGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 38) ) { return retval; }
            // Java.g:2174:1: (variableDeclaratorGen+= variableDeclarator (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )* )
            // Java.g:2174:3: variableDeclaratorGen+= variableDeclarator (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )*
            {
            pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1717);
            variableDeclaratorGen=variableDeclarator();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableDeclaratorGen==null) list_variableDeclaratorGen=new ArrayList();
            list_variableDeclaratorGen.add(variableDeclaratorGen.getTemplate());

            // Java.g:2174:45: (TK_0= ',' variableDeclaratorGen_1+= variableDeclarator )*
            loop53:
            do {
                int alt53=2;
                int LA53_0 = input.LA(1);

                if ( (LA53_0==34) ) {
                    alt53=1;
                }


                switch (alt53) {
            	case 1 :
            	    // Java.g:2174:46: TK_0= ',' variableDeclaratorGen_1+= variableDeclarator
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_variableDeclarators1722); if (state.failed) return retval;
            	    pushFollow(FOLLOW_variableDeclarator_in_variableDeclarators1726);
            	    variableDeclaratorGen_1=variableDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_variableDeclaratorGen_1==null) list_variableDeclaratorGen_1=new ArrayList();
            	    list_variableDeclaratorGen_1.add(variableDeclaratorGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop53;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node variableDeclaratorsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variableDeclaratorsReturnNode.setKind("variableDeclarators");
              	    // Create a CST Node
              		if(list_variableDeclaratorGen != null) {
              	        for(Iterator it = list_variableDeclaratorGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarator_return r = (JavaParser.variableDeclarator_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarator");
              	            	variableDeclaratorsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal variableDeclaratorGen_1 aggregation
              		if(list_variableDeclaratorGen_1 != null) {
              	    for(int pos = 0; pos < list_variableDeclaratorGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		variableDeclaratorsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_variableDeclaratorGen_1 != null) {		
              	    	JavaParser.variableDeclarator_return r = (JavaParser.variableDeclarator_return) list_variableDeclaratorGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("variableDeclarator");
              	    		variableDeclaratorsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variableDeclaratorsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 38, variableDeclarators_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarators"

    public static class variableDeclarator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variableDeclarator"
    // Java.g:2218:1: variableDeclarator returns [Node returnNode] : IdentifierGen= Identifier variableDeclaratorRestGen+= variableDeclaratorRest ;
    public final JavaParser.variableDeclarator_return variableDeclarator() throws RecognitionException {
        JavaParser.variableDeclarator_return retval = new JavaParser.variableDeclarator_return();
        retval.start = input.LT(1);
        int variableDeclarator_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_variableDeclaratorRestGen=null;
        RuleReturnScope variableDeclaratorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 39) ) { return retval; }
            // Java.g:2219:1: (IdentifierGen= Identifier variableDeclaratorRestGen+= variableDeclaratorRest )
            // Java.g:2219:3: IdentifierGen= Identifier variableDeclaratorRestGen+= variableDeclaratorRest
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclarator1749); if (state.failed) return retval;
            pushFollow(FOLLOW_variableDeclaratorRest_in_variableDeclarator1753);
            variableDeclaratorRestGen=variableDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableDeclaratorRestGen==null) list_variableDeclaratorRestGen=new ArrayList();
            list_variableDeclaratorRestGen.add(variableDeclaratorRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node variableDeclaratorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variableDeclaratorReturnNode.setKind("variableDeclarator");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			variableDeclaratorReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_variableDeclaratorRestGen != null) {
              	        for(Iterator it = list_variableDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclaratorRest_return r = (JavaParser.variableDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclaratorRest");
              	            	variableDeclaratorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variableDeclaratorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 39, variableDeclarator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclarator"

    public static class variableDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variableDeclaratorRest"
    // Java.g:2248:1: variableDeclaratorRest returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )? | TK_0= '=' variableInitializerGen+= variableInitializer | );
    public final JavaParser.variableDeclaratorRest_return variableDeclaratorRest() throws RecognitionException {
        JavaParser.variableDeclaratorRest_return retval = new JavaParser.variableDeclaratorRest_return();
        retval.start = input.LT(1);
        int variableDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_variableInitializerGen=null;
        RuleReturnScope variableInitializerGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 40) ) { return retval; }
            // Java.g:2249:1: ( (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )? | TK_0= '=' variableInitializerGen+= variableInitializer | )
            int alt56=3;
            switch ( input.LA(1) ) {
            case 41:
                {
                alt56=1;
                }
                break;
            case 44:
                {
                alt56=2;
                }
                break;
            case EOF:
            case 25:
            case 34:
                {
                alt56=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }

            switch (alt56) {
                case 1 :
                    // Java.g:2249:3: (TK_0= '[' TK_1= ']' )+ (TK_2= '=' variableInitializerGen+= variableInitializer )?
                    {
                    // Java.g:2249:3: (TK_0= '[' TK_1= ']' )+
                    int cnt54=0;
                    loop54:
                    do {
                        int alt54=2;
                        int LA54_0 = input.LA(1);

                        if ( (LA54_0==41) ) {
                            alt54=1;
                        }


                        switch (alt54) {
                    	case 1 :
                    	    // Java.g:2249:4: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)match(input,41,FOLLOW_41_in_variableDeclaratorRest1776); if (state.failed) return retval;
                    	    TK_1=(Token)match(input,42,FOLLOW_42_in_variableDeclaratorRest1780); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt54 >= 1 ) break loop54;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(54, input);
                                throw eee;
                        }
                        cnt54++;
                    } while (true);

                    // Java.g:2249:24: (TK_2= '=' variableInitializerGen+= variableInitializer )?
                    int alt55=2;
                    int LA55_0 = input.LA(1);

                    if ( (LA55_0==44) ) {
                        alt55=1;
                    }
                    switch (alt55) {
                        case 1 :
                            // Java.g:2249:25: TK_2= '=' variableInitializerGen+= variableInitializer
                            {
                            TK_2=(Token)match(input,44,FOLLOW_44_in_variableDeclaratorRest1787); if (state.failed) return retval;
                            pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest1791);
                            variableInitializerGen=variableInitializer();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
                            list_variableInitializerGen.add(variableInitializerGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variableDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableDeclaratorRestReturnNode.setKind("variableDeclaratorRest");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		variableDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		variableDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		variableDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_variableInitializerGen != null) {
                      	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableInitializer");
                      	            	variableDeclaratorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableDeclaratorRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:2294:4: TK_0= '=' variableInitializerGen+= variableInitializer
                    {
                    TK_0=(Token)match(input,44,FOLLOW_44_in_variableDeclaratorRest1804); if (state.failed) return retval;
                    pushFollow(FOLLOW_variableInitializer_in_variableDeclaratorRest1808);
                    variableInitializerGen=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
                    list_variableInitializerGen.add(variableInitializerGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variableDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableDeclaratorRestReturnNode.setKind("variableDeclaratorRest");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		variableDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_variableInitializerGen != null) {
                      	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableInitializer");
                      	            	variableDeclaratorRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableDeclaratorRestReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:2322:2: 
                    {
                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 40, variableDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorRest"

    public static class constantDeclaratorsRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constantDeclaratorsRest"
    // Java.g:2324:1: constantDeclaratorsRest returns [Node returnNode] : constantDeclaratorRestGen+= constantDeclaratorRest (TK_0= ',' constantDeclaratorGen+= constantDeclarator )* ;
    public final JavaParser.constantDeclaratorsRest_return constantDeclaratorsRest() throws RecognitionException {
        JavaParser.constantDeclaratorsRest_return retval = new JavaParser.constantDeclaratorsRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorsRest_StartIndex = input.index();
        Token TK_0=null;
        List list_constantDeclaratorRestGen=null;
        List list_constantDeclaratorGen=null;
        RuleReturnScope constantDeclaratorRestGen = null;
        RuleReturnScope constantDeclaratorGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 41) ) { return retval; }
            // Java.g:2325:1: (constantDeclaratorRestGen+= constantDeclaratorRest (TK_0= ',' constantDeclaratorGen+= constantDeclarator )* )
            // Java.g:2325:5: constantDeclaratorRestGen+= constantDeclaratorRest (TK_0= ',' constantDeclaratorGen+= constantDeclarator )*
            {
            pushFollow(FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest1835);
            constantDeclaratorRestGen=constantDeclaratorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_constantDeclaratorRestGen==null) list_constantDeclaratorRestGen=new ArrayList();
            list_constantDeclaratorRestGen.add(constantDeclaratorRestGen.getTemplate());

            // Java.g:2325:55: (TK_0= ',' constantDeclaratorGen+= constantDeclarator )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==34) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // Java.g:2325:56: TK_0= ',' constantDeclaratorGen+= constantDeclarator
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_constantDeclaratorsRest1840); if (state.failed) return retval;
            	    pushFollow(FOLLOW_constantDeclarator_in_constantDeclaratorsRest1844);
            	    constantDeclaratorGen=constantDeclarator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_constantDeclaratorGen==null) list_constantDeclaratorGen=new ArrayList();
            	    list_constantDeclaratorGen.add(constantDeclaratorGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constantDeclaratorsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantDeclaratorsRestReturnNode.setKind("constantDeclaratorsRest");
              	    // Create a CST Node
              		if(list_constantDeclaratorRestGen != null) {
              	        for(Iterator it = list_constantDeclaratorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.constantDeclaratorRest_return r = (JavaParser.constantDeclaratorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("constantDeclaratorRest");
              	            	constantDeclaratorsRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal constantDeclaratorGen aggregation
              		if(list_constantDeclaratorGen != null) {
              	    for(int pos = 0; pos < list_constantDeclaratorGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		constantDeclaratorsRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_constantDeclaratorGen != null) {		
              	    	JavaParser.constantDeclarator_return r = (JavaParser.constantDeclarator_return) list_constantDeclaratorGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("constantDeclarator");
              	    		constantDeclaratorsRestReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantDeclaratorsRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 41, constantDeclaratorsRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorsRest"

    public static class constantDeclaratorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constantDeclaratorRest"
    // Java.g:2369:1: constantDeclaratorRest returns [Node returnNode] : (TK_0= '[' TK_1= ']' )* TK_2= '=' variableInitializerGen+= variableInitializer ;
    public final JavaParser.constantDeclaratorRest_return constantDeclaratorRest() throws RecognitionException {
        JavaParser.constantDeclaratorRest_return retval = new JavaParser.constantDeclaratorRest_return();
        retval.start = input.LT(1);
        int constantDeclaratorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_variableInitializerGen=null;
        RuleReturnScope variableInitializerGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 42) ) { return retval; }
            // Java.g:2370:1: ( (TK_0= '[' TK_1= ']' )* TK_2= '=' variableInitializerGen+= variableInitializer )
            // Java.g:2370:3: (TK_0= '[' TK_1= ']' )* TK_2= '=' variableInitializerGen+= variableInitializer
            {
            // Java.g:2370:3: (TK_0= '[' TK_1= ']' )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==41) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // Java.g:2370:4: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)match(input,41,FOLLOW_41_in_constantDeclaratorRest1871); if (state.failed) return retval;
            	    TK_1=(Token)match(input,42,FOLLOW_42_in_constantDeclaratorRest1875); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            TK_2=(Token)match(input,44,FOLLOW_44_in_constantDeclaratorRest1881); if (state.failed) return retval;
            pushFollow(FOLLOW_variableInitializer_in_constantDeclaratorRest1885);
            variableInitializerGen=variableInitializer();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
            list_variableInitializerGen.add(variableInitializerGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constantDeclaratorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantDeclaratorRestReturnNode.setKind("constantDeclaratorRest");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		constantDeclaratorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		constantDeclaratorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		constantDeclaratorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_variableInitializerGen != null) {
              	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableInitializer");
              	            	constantDeclaratorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantDeclaratorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 42, constantDeclaratorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantDeclaratorRest"

    public static class variableDeclaratorId_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variableDeclaratorId"
    // Java.g:2417:1: variableDeclaratorId returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '[' TK_1= ']' )* ;
    public final JavaParser.variableDeclaratorId_return variableDeclaratorId() throws RecognitionException {
        JavaParser.variableDeclaratorId_return retval = new JavaParser.variableDeclaratorId_return();
        retval.start = input.LT(1);
        int variableDeclaratorId_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token TK_1=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 43) ) { return retval; }
            // Java.g:2418:1: (IdentifierGen= Identifier (TK_0= '[' TK_1= ']' )* )
            // Java.g:2418:3: IdentifierGen= Identifier (TK_0= '[' TK_1= ']' )*
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_variableDeclaratorId1907); if (state.failed) return retval;
            // Java.g:2418:28: (TK_0= '[' TK_1= ']' )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==41) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // Java.g:2418:29: TK_0= '[' TK_1= ']'
            	    {
            	    TK_0=(Token)match(input,41,FOLLOW_41_in_variableDeclaratorId1912); if (state.failed) return retval;
            	    TK_1=(Token)match(input,42,FOLLOW_42_in_variableDeclaratorId1916); if (state.failed) return retval;

            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node variableDeclaratorIdReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		variableDeclaratorIdReturnNode.setKind("variableDeclaratorId");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			variableDeclaratorIdReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		variableDeclaratorIdReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		variableDeclaratorIdReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = variableDeclaratorIdReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 43, variableDeclaratorId_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableDeclaratorId"

    public static class variableInitializer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variableInitializer"
    // Java.g:2455:1: variableInitializer returns [Node returnNode] : (arrayInitializerGen+= arrayInitializer | expressionGen+= expression );
    public final JavaParser.variableInitializer_return variableInitializer() throws RecognitionException {
        JavaParser.variableInitializer_return retval = new JavaParser.variableInitializer_return();
        retval.start = input.LT(1);
        int variableInitializer_StartIndex = input.index();
        List list_arrayInitializerGen=null;
        List list_expressionGen=null;
        RuleReturnScope arrayInitializerGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 44) ) { return retval; }
            // Java.g:2456:1: (arrayInitializerGen+= arrayInitializer | expressionGen+= expression )
            int alt60=2;
            alt60 = dfa60.predict(input);
            switch (alt60) {
                case 1 :
                    // Java.g:2456:3: arrayInitializerGen+= arrayInitializer
                    {
                    pushFollow(FOLLOW_arrayInitializer_in_variableInitializer1939);
                    arrayInitializerGen=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_arrayInitializerGen==null) list_arrayInitializerGen=new ArrayList();
                    list_arrayInitializerGen.add(arrayInitializerGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variableInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableInitializerReturnNode.setKind("variableInitializer");
                      	    // Create a CST Node
                      		if(list_arrayInitializerGen != null) {
                      	        for(Iterator it = list_arrayInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arrayInitializer_return r = (JavaParser.arrayInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arrayInitializer");
                      	            	variableInitializerReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableInitializerReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:2474:9: expressionGen+= expression
                    {
                    pushFollow(FOLLOW_expression_in_variableInitializer1955);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variableInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableInitializerReturnNode.setKind("variableInitializer");
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	variableInitializerReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableInitializerReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 44, variableInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableInitializer"

    public static class arrayInitializer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "arrayInitializer"
    // Java.g:2494:1: arrayInitializer returns [Node returnNode] : TK_0= '{' (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )? TK_3= '}' ;
    public final JavaParser.arrayInitializer_return arrayInitializer() throws RecognitionException {
        JavaParser.arrayInitializer_return retval = new JavaParser.arrayInitializer_return();
        retval.start = input.LT(1);
        int arrayInitializer_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_variableInitializerGen=null;
        List list_variableInitializerGen_1=null;
        RuleReturnScope variableInitializerGen = null;
        RuleReturnScope variableInitializerGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 45) ) { return retval; }
            // Java.g:2495:1: (TK_0= '{' (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )? TK_3= '}' )
            // Java.g:2495:3: TK_0= '{' (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )? TK_3= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_arrayInitializer1977); if (state.failed) return retval;
            // Java.g:2495:12: (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )?
            int alt63=2;
            alt63 = dfa63.predict(input);
            switch (alt63) {
                case 1 :
                    // Java.g:2495:13: variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )?
                    {
                    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1982);
                    variableInitializerGen=variableInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variableInitializerGen==null) list_variableInitializerGen=new ArrayList();
                    list_variableInitializerGen.add(variableInitializerGen.getTemplate());

                    // Java.g:2495:57: (TK_1= ',' variableInitializerGen_1+= variableInitializer )*
                    loop61:
                    do {
                        int alt61=2;
                        alt61 = dfa61.predict(input);
                        switch (alt61) {
                    	case 1 :
                    	    // Java.g:2495:58: TK_1= ',' variableInitializerGen_1+= variableInitializer
                    	    {
                    	    TK_1=(Token)match(input,34,FOLLOW_34_in_arrayInitializer1987); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_variableInitializer_in_arrayInitializer1991);
                    	    variableInitializerGen_1=variableInitializer();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_variableInitializerGen_1==null) list_variableInitializerGen_1=new ArrayList();
                    	    list_variableInitializerGen_1.add(variableInitializerGen_1.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop61;
                        }
                    } while (true);

                    // Java.g:2495:115: (TK_2= ',' )?
                    int alt62=2;
                    int LA62_0 = input.LA(1);

                    if ( (LA62_0==34) ) {
                        alt62=1;
                    }
                    switch (alt62) {
                        case 1 :
                            // Java.g:2495:116: TK_2= ','
                            {
                            TK_2=(Token)match(input,34,FOLLOW_34_in_arrayInitializer1998); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }

            TK_3=(Token)match(input,38,FOLLOW_38_in_arrayInitializer2007); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node arrayInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		arrayInitializerReturnNode.setKind("arrayInitializer");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_variableInitializerGen != null) {
              	        for(Iterator it = list_variableInitializerGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableInitializer");
              	            	arrayInitializerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal variableInitializerGen_1 aggregation
              		if(list_variableInitializerGen_1 != null) {
              	    for(int pos = 0; pos < list_variableInitializerGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_variableInitializerGen_1 != null) {		
              	    	JavaParser.variableInitializer_return r = (JavaParser.variableInitializer_return) list_variableInitializerGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("variableInitializer");
              	    		arrayInitializerReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		arrayInitializerReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = arrayInitializerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 45, arrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayInitializer"

    public static class modifier_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "modifier"
    // Java.g:2566:1: modifier returns [Node returnNode] : (annotationGen+= annotation | TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'static' | TK_0= 'abstract' | TK_0= 'final' | TK_0= 'native' | TK_0= 'synchronized' | TK_0= 'transient' | TK_0= 'volatile' | TK_0= 'strictfp' );
    public final JavaParser.modifier_return modifier() throws RecognitionException {
        JavaParser.modifier_return retval = new JavaParser.modifier_return();
        retval.start = input.LT(1);
        int modifier_StartIndex = input.index();
        Token TK_0=null;
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 46) ) { return retval; }
            // Java.g:2567:1: (annotationGen+= annotation | TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'static' | TK_0= 'abstract' | TK_0= 'final' | TK_0= 'native' | TK_0= 'synchronized' | TK_0= 'transient' | TK_0= 'volatile' | TK_0= 'strictfp' )
            int alt64=12;
            alt64 = dfa64.predict(input);
            switch (alt64) {
                case 1 :
                    // Java.g:2567:5: annotationGen+= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_modifier2030);
                    annotationGen=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationGen==null) list_annotationGen=new ArrayList();
                    list_annotationGen.add(annotationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a CST Node
                      		if(list_annotationGen != null) {
                      	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotation");
                      	            	modifierReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:2585:9: TK_0= 'public'
                    {
                    TK_0=(Token)match(input,45,FOLLOW_45_in_modifier2046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:2602:9: TK_0= 'protected'
                    {
                    TK_0=(Token)match(input,46,FOLLOW_46_in_modifier2062); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:2619:9: TK_0= 'private'
                    {
                    TK_0=(Token)match(input,47,FOLLOW_47_in_modifier2078); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:2636:9: TK_0= 'static'
                    {
                    TK_0=(Token)match(input,27,FOLLOW_27_in_modifier2094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:2653:9: TK_0= 'abstract'
                    {
                    TK_0=(Token)match(input,48,FOLLOW_48_in_modifier2110); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:2670:9: TK_0= 'final'
                    {
                    TK_0=(Token)match(input,49,FOLLOW_49_in_modifier2126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // Java.g:2687:9: TK_0= 'native'
                    {
                    TK_0=(Token)match(input,50,FOLLOW_50_in_modifier2142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // Java.g:2704:9: TK_0= 'synchronized'
                    {
                    TK_0=(Token)match(input,51,FOLLOW_51_in_modifier2158); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // Java.g:2721:9: TK_0= 'transient'
                    {
                    TK_0=(Token)match(input,52,FOLLOW_52_in_modifier2174); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // Java.g:2738:9: TK_0= 'volatile'
                    {
                    TK_0=(Token)match(input,53,FOLLOW_53_in_modifier2190); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // Java.g:2755:9: TK_0= 'strictfp'
                    {
                    TK_0=(Token)match(input,54,FOLLOW_54_in_modifier2206); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node modifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		modifierReturnNode.setKind("modifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		modifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = modifierReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 46, modifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "modifier"

    public static class packageOrTypeName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "packageOrTypeName"
    // Java.g:2774:1: packageOrTypeName returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* ;
    public final JavaParser.packageOrTypeName_return packageOrTypeName() throws RecognitionException {
        JavaParser.packageOrTypeName_return retval = new JavaParser.packageOrTypeName_return();
        retval.start = input.LT(1);
        int packageOrTypeName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 47) ) { return retval; }
            // Java.g:2775:1: (IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* )
            // Java.g:2775:3: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2230); if (state.failed) return retval;
            // Java.g:2775:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==28) ) {
                    int LA65_1 = input.LA(2);

                    if ( (LA65_1==Identifier) ) {
                        int LA65_2 = input.LA(3);

                        if ( (synpred85_Java()) ) {
                            alt65=1;
                        }


                    }


                }


                switch (alt65) {
            	case 1 :
            	    // Java.g:2775:29: TK_0= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_0=(Token)match(input,28,FOLLOW_28_in_packageOrTypeName2235); if (state.failed) return retval;
            	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_packageOrTypeName2239); if (state.failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node packageOrTypeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		packageOrTypeNameReturnNode.setKind("packageOrTypeName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			packageOrTypeNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}

              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		packageOrTypeNameReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			packageOrTypeNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = packageOrTypeNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 47, packageOrTypeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "packageOrTypeName"

    public static class enumConstantName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "enumConstantName"
    // Java.g:2820:1: enumConstantName returns [Node returnNode] : IdentifierGen= Identifier ;
    public final JavaParser.enumConstantName_return enumConstantName() throws RecognitionException {
        JavaParser.enumConstantName_return retval = new JavaParser.enumConstantName_return();
        retval.start = input.LT(1);
        int enumConstantName_StartIndex = input.index();
        Token IdentifierGen=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 48) ) { return retval; }
            // Java.g:2821:1: (IdentifierGen= Identifier )
            // Java.g:2821:5: IdentifierGen= Identifier
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_enumConstantName2264); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node enumConstantNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		enumConstantNameReturnNode.setKind("enumConstantName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			enumConstantNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = enumConstantNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 48, enumConstantName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "enumConstantName"

    public static class typeName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeName"
    // Java.g:2840:1: typeName returns [Node returnNode] : (IdentifierGen= Identifier | packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier );
    public final JavaParser.typeName_return typeName() throws RecognitionException {
        JavaParser.typeName_return retval = new JavaParser.typeName_return();
        retval.start = input.LT(1);
        int typeName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_packageOrTypeNameGen=null;
        RuleReturnScope packageOrTypeNameGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 49) ) { return retval; }
            // Java.g:2841:1: (IdentifierGen= Identifier | packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Identifier) ) {
                int LA66_1 = input.LA(2);

                if ( (LA66_1==EOF) ) {
                    alt66=1;
                }
                else if ( (LA66_1==28) ) {
                    alt66=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 66, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // Java.g:2841:5: IdentifierGen= Identifier
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2290); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeNameReturnNode.setKind("typeName");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			typeNameReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeNameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:2858:9: packageOrTypeNameGen+= packageOrTypeName TK_0= '.' IdentifierGen= Identifier
                    {
                    pushFollow(FOLLOW_packageOrTypeName_in_typeName2306);
                    packageOrTypeNameGen=packageOrTypeName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_packageOrTypeNameGen==null) list_packageOrTypeNameGen=new ArrayList();
                    list_packageOrTypeNameGen.add(packageOrTypeNameGen.getTemplate());

                    TK_0=(Token)match(input,28,FOLLOW_28_in_typeName2310); if (state.failed) return retval;
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_typeName2314); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeNameReturnNode.setKind("typeName");
                      	    // Create a CST Node
                      		if(list_packageOrTypeNameGen != null) {
                      	        for(Iterator it = list_packageOrTypeNameGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.packageOrTypeName_return r = (JavaParser.packageOrTypeName_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("packageOrTypeName");
                      	            	typeNameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeNameReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			typeNameReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeNameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 49, typeName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeName"

    public static class type_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "type"
    // Java.g:2896:1: type returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )* | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* );
    public final JavaParser.type_return type() throws RecognitionException {
        JavaParser.type_return retval = new JavaParser.type_return();
        retval.start = input.LT(1);
        int type_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;
        List list_typeArgumentsGen=null;
        List list_typeArgumentsGen_1=null;
        List list_primitiveTypeGen=null;
        RuleReturnScope typeArgumentsGen = null;
        RuleReturnScope typeArgumentsGen_1 = null;
        RuleReturnScope primitiveTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 50) ) { return retval; }
            // Java.g:2897:1: (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )* | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* )
            int alt72=2;
            alt72 = dfa72.predict(input);
            switch (alt72) {
                case 1 :
                    // Java.g:2897:3: IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )*
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_type2335); if (state.failed) return retval;
                    // Java.g:2897:28: (typeArgumentsGen+= typeArguments )?
                    int alt67=2;
                    alt67 = dfa67.predict(input);
                    switch (alt67) {
                        case 1 :
                            // Java.g:2897:29: typeArgumentsGen+= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_type2340);
                            typeArgumentsGen=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_typeArgumentsGen==null) list_typeArgumentsGen=new ArrayList();
                            list_typeArgumentsGen.add(typeArgumentsGen.getTemplate());


                            }
                            break;

                    }

                    // Java.g:2897:63: (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*
                    loop69:
                    do {
                        int alt69=2;
                        alt69 = dfa69.predict(input);
                        switch (alt69) {
                    	case 1 :
                    	    // Java.g:2897:64: TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )?
                    	    {
                    	    TK_0=(Token)match(input,28,FOLLOW_28_in_type2347); if (state.failed) return retval;
                    	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_type2351); if (state.failed) return retval;
                    	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
                    	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);

                    	    // Java.g:2897:106: (typeArgumentsGen_1+= typeArguments )?
                    	    int alt68=2;
                    	    alt68 = dfa68.predict(input);
                    	    switch (alt68) {
                    	        case 1 :
                    	            // Java.g:2897:107: typeArgumentsGen_1+= typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_type2356);
                    	            typeArgumentsGen_1=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if (list_typeArgumentsGen_1==null) list_typeArgumentsGen_1=new ArrayList();
                    	            list_typeArgumentsGen_1.add(typeArgumentsGen_1.getTemplate());


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop69;
                        }
                    } while (true);

                    // Java.g:2897:146: (TK_1= '[' TK_2= ']' )*
                    loop70:
                    do {
                        int alt70=2;
                        alt70 = dfa70.predict(input);
                        switch (alt70) {
                    	case 1 :
                    	    // Java.g:2897:147: TK_1= '[' TK_2= ']'
                    	    {
                    	    TK_1=(Token)match(input,41,FOLLOW_41_in_type2366); if (state.failed) return retval;
                    	    TK_2=(Token)match(input,42,FOLLOW_42_in_type2370); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop70;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			typeReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_typeArgumentsGen != null) {
                      	        for(Iterator it = list_typeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeArguments");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
                      		if(list_IdentifierGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_1_List != null) {
                      		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
                      		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_1_ListLeaf.setKind("Identifier");
                      			IdentifierGen_1_ListLeaf.setValue(t.getText());
                      			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_1_ListLeaf.setLine(t.getLine());
                      			typeReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_typeArgumentsGen_1 != null) {		
                      	    	JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) list_typeArgumentsGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("typeArguments");
                      	    		typeReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		typeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		typeReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:2976:4: primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )*
                    {
                    pushFollow(FOLLOW_primitiveType_in_type2383);
                    primitiveTypeGen=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen.getTemplate());

                    // Java.g:2976:36: (TK_0= '[' TK_1= ']' )*
                    loop71:
                    do {
                        int alt71=2;
                        alt71 = dfa71.predict(input);
                        switch (alt71) {
                    	case 1 :
                    	    // Java.g:2976:37: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)match(input,41,FOLLOW_41_in_type2388); if (state.failed) return retval;
                    	    TK_1=(Token)match(input,42,FOLLOW_42_in_type2392); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop71;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeReturnNode.setKind("type");
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	typeReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		typeReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 50, type_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "type"

    public static class primitiveType_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "primitiveType"
    // Java.g:3014:1: primitiveType returns [Node returnNode] : (TK_0= 'boolean' | TK_0= 'char' | TK_0= 'byte' | TK_0= 'short' | TK_0= 'int' | TK_0= 'long' | TK_0= 'float' | TK_0= 'double' );
    public final JavaParser.primitiveType_return primitiveType() throws RecognitionException {
        JavaParser.primitiveType_return retval = new JavaParser.primitiveType_return();
        retval.start = input.LT(1);
        int primitiveType_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 51) ) { return retval; }
            // Java.g:3015:1: (TK_0= 'boolean' | TK_0= 'char' | TK_0= 'byte' | TK_0= 'short' | TK_0= 'int' | TK_0= 'long' | TK_0= 'float' | TK_0= 'double' )
            int alt73=8;
            switch ( input.LA(1) ) {
            case 55:
                {
                alt73=1;
                }
                break;
            case 56:
                {
                alt73=2;
                }
                break;
            case 57:
                {
                alt73=3;
                }
                break;
            case 58:
                {
                alt73=4;
                }
                break;
            case 59:
                {
                alt73=5;
                }
                break;
            case 60:
                {
                alt73=6;
                }
                break;
            case 61:
                {
                alt73=7;
                }
                break;
            case 62:
                {
                alt73=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 73, 0, input);

                throw nvae;
            }

            switch (alt73) {
                case 1 :
                    // Java.g:3015:5: TK_0= 'boolean'
                    {
                    TK_0=(Token)match(input,55,FOLLOW_55_in_primitiveType2417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3032:7: TK_0= 'char'
                    {
                    TK_0=(Token)match(input,56,FOLLOW_56_in_primitiveType2431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:3049:7: TK_0= 'byte'
                    {
                    TK_0=(Token)match(input,57,FOLLOW_57_in_primitiveType2445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:3066:7: TK_0= 'short'
                    {
                    TK_0=(Token)match(input,58,FOLLOW_58_in_primitiveType2459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:3083:7: TK_0= 'int'
                    {
                    TK_0=(Token)match(input,59,FOLLOW_59_in_primitiveType2473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:3100:7: TK_0= 'long'
                    {
                    TK_0=(Token)match(input,60,FOLLOW_60_in_primitiveType2487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:3117:7: TK_0= 'float'
                    {
                    TK_0=(Token)match(input,61,FOLLOW_61_in_primitiveType2501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // Java.g:3134:7: TK_0= 'double'
                    {
                    TK_0=(Token)match(input,62,FOLLOW_62_in_primitiveType2515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primitiveTypeReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primitiveTypeReturnNode.setKind("primitiveType");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primitiveTypeReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primitiveTypeReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 51, primitiveType_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primitiveType"

    public static class variableModifier_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "variableModifier"
    // Java.g:3153:1: variableModifier returns [Node returnNode] : (TK_0= 'final' | annotationGen+= annotation );
    public final JavaParser.variableModifier_return variableModifier() throws RecognitionException {
        JavaParser.variableModifier_return retval = new JavaParser.variableModifier_return();
        retval.start = input.LT(1);
        int variableModifier_StartIndex = input.index();
        Token TK_0=null;
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 52) ) { return retval; }
            // Java.g:3154:1: (TK_0= 'final' | annotationGen+= annotation )
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==49) ) {
                alt74=1;
            }
            else if ( (LA74_0==71) ) {
                alt74=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 74, 0, input);

                throw nvae;
            }
            switch (alt74) {
                case 1 :
                    // Java.g:3154:3: TK_0= 'final'
                    {
                    TK_0=(Token)match(input,49,FOLLOW_49_in_variableModifier2539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variableModifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableModifierReturnNode.setKind("variableModifier");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		variableModifierReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableModifierReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3171:9: annotationGen+= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_variableModifier2555);
                    annotationGen=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationGen==null) list_annotationGen=new ArrayList();
                    list_annotationGen.add(annotationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node variableModifierReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		variableModifierReturnNode.setKind("variableModifier");
                      	    // Create a CST Node
                      		if(list_annotationGen != null) {
                      	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotation");
                      	            	variableModifierReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = variableModifierReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 52, variableModifier_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "variableModifier"

    public static class typeArguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeArguments"
    // Java.g:3191:1: typeArguments returns [Node returnNode] : TK_0= '<' typeArgumentGen+= typeArgument (TK_1= ',' typeArgumentGen_1+= typeArgument )* TK_2= '>' ;
    public final JavaParser.typeArguments_return typeArguments() throws RecognitionException {
        JavaParser.typeArguments_return retval = new JavaParser.typeArguments_return();
        retval.start = input.LT(1);
        int typeArguments_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeArgumentGen=null;
        List list_typeArgumentGen_1=null;
        RuleReturnScope typeArgumentGen = null;
        RuleReturnScope typeArgumentGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 53) ) { return retval; }
            // Java.g:3192:1: (TK_0= '<' typeArgumentGen+= typeArgument (TK_1= ',' typeArgumentGen_1+= typeArgument )* TK_2= '>' )
            // Java.g:3192:3: TK_0= '<' typeArgumentGen+= typeArgument (TK_1= ',' typeArgumentGen_1+= typeArgument )* TK_2= '>'
            {
            TK_0=(Token)match(input,33,FOLLOW_33_in_typeArguments2576); if (state.failed) return retval;
            pushFollow(FOLLOW_typeArgument_in_typeArguments2580);
            typeArgumentGen=typeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeArgumentGen==null) list_typeArgumentGen=new ArrayList();
            list_typeArgumentGen.add(typeArgumentGen.getTemplate());

            // Java.g:3192:42: (TK_1= ',' typeArgumentGen_1+= typeArgument )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==34) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // Java.g:3192:43: TK_1= ',' typeArgumentGen_1+= typeArgument
            	    {
            	    TK_1=(Token)match(input,34,FOLLOW_34_in_typeArguments2585); if (state.failed) return retval;
            	    pushFollow(FOLLOW_typeArgument_in_typeArguments2589);
            	    typeArgumentGen_1=typeArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_typeArgumentGen_1==null) list_typeArgumentGen_1=new ArrayList();
            	    list_typeArgumentGen_1.add(typeArgumentGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);

            TK_2=(Token)match(input,35,FOLLOW_35_in_typeArguments2595); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node typeArgumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		typeArgumentsReturnNode.setKind("typeArguments");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		typeArgumentsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeArgumentGen != null) {
              	        for(Iterator it = list_typeArgumentGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeArgument_return r = (JavaParser.typeArgument_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeArgument");
              	            	typeArgumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal typeArgumentGen_1 aggregation
              		if(list_typeArgumentGen_1 != null) {
              	    for(int pos = 0; pos < list_typeArgumentGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		typeArgumentsReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_typeArgumentGen_1 != null) {		
              	    	JavaParser.typeArgument_return r = (JavaParser.typeArgument_return) list_typeArgumentGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("typeArgument");
              	    		typeArgumentsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		typeArgumentsReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = typeArgumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 53, typeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArguments"

    public static class typeArgument_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "typeArgument"
    // Java.g:3254:1: typeArgument returns [Node returnNode] : (typeGen+= type | TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )? );
    public final JavaParser.typeArgument_return typeArgument() throws RecognitionException {
        JavaParser.typeArgument_return retval = new JavaParser.typeArgument_return();
        retval.start = input.LT(1);
        int typeArgument_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_typeGen=null;
        RuleReturnScope typeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 54) ) { return retval; }
            // Java.g:3255:1: (typeGen+= type | TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )? )
            int alt78=2;
            alt78 = dfa78.predict(input);
            switch (alt78) {
                case 1 :
                    // Java.g:3255:3: typeGen+= type
                    {
                    pushFollow(FOLLOW_type_in_typeArgument2617);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeArgumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeArgumentReturnNode.setKind("typeArgument");
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	typeArgumentReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeArgumentReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3273:4: TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )?
                    {
                    TK_0=(Token)match(input,63,FOLLOW_63_in_typeArgument2628); if (state.failed) return retval;
                    // Java.g:3273:13: ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )?
                    int alt77=2;
                    int LA77_0 = input.LA(1);

                    if ( (LA77_0==31||LA77_0==64) ) {
                        alt77=1;
                    }
                    switch (alt77) {
                        case 1 :
                            // Java.g:3273:14: (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type
                            {
                            // Java.g:3273:14: (TK_1= 'extends' | TK_2= 'super' )
                            int alt76=2;
                            int LA76_0 = input.LA(1);

                            if ( (LA76_0==31) ) {
                                alt76=1;
                            }
                            else if ( (LA76_0==64) ) {
                                alt76=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 76, 0, input);

                                throw nvae;
                            }
                            switch (alt76) {
                                case 1 :
                                    // Java.g:3273:15: TK_1= 'extends'
                                    {
                                    TK_1=(Token)match(input,31,FOLLOW_31_in_typeArgument2634); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // Java.g:3273:32: TK_2= 'super'
                                    {
                                    TK_2=(Token)match(input,64,FOLLOW_64_in_typeArgument2640); if (state.failed) return retval;

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_type_in_typeArgument2645);
                            typeGen=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_typeGen==null) list_typeGen=new ArrayList();
                            list_typeGen.add(typeGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node typeArgumentReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		typeArgumentReturnNode.setKind("typeArgument");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		typeArgumentReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		typeArgumentReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		typeArgumentReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	typeArgumentReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = typeArgumentReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 54, typeArgument_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "typeArgument"

    public static class qualifiedNameList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "qualifiedNameList"
    // Java.g:3320:1: qualifiedNameList returns [Node returnNode] : qualifiedNameGen+= qualifiedName (TK_0= ',' qualifiedNameGen_1+= qualifiedName )* ;
    public final JavaParser.qualifiedNameList_return qualifiedNameList() throws RecognitionException {
        JavaParser.qualifiedNameList_return retval = new JavaParser.qualifiedNameList_return();
        retval.start = input.LT(1);
        int qualifiedNameList_StartIndex = input.index();
        Token TK_0=null;
        List list_qualifiedNameGen=null;
        List list_qualifiedNameGen_1=null;
        RuleReturnScope qualifiedNameGen = null;
        RuleReturnScope qualifiedNameGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 55) ) { return retval; }
            // Java.g:3321:1: (qualifiedNameGen+= qualifiedName (TK_0= ',' qualifiedNameGen_1+= qualifiedName )* )
            // Java.g:3321:3: qualifiedNameGen+= qualifiedName (TK_0= ',' qualifiedNameGen_1+= qualifiedName )*
            {
            pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2669);
            qualifiedNameGen=qualifiedName();

            state._fsp--;
            if (state.failed) return retval;
            if (list_qualifiedNameGen==null) list_qualifiedNameGen=new ArrayList();
            list_qualifiedNameGen.add(qualifiedNameGen.getTemplate());

            // Java.g:3321:35: (TK_0= ',' qualifiedNameGen_1+= qualifiedName )*
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( (LA79_0==34) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    // Java.g:3321:36: TK_0= ',' qualifiedNameGen_1+= qualifiedName
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_qualifiedNameList2674); if (state.failed) return retval;
            	    pushFollow(FOLLOW_qualifiedName_in_qualifiedNameList2678);
            	    qualifiedNameGen_1=qualifiedName();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_qualifiedNameGen_1==null) list_qualifiedNameGen_1=new ArrayList();
            	    list_qualifiedNameGen_1.add(qualifiedNameGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node qualifiedNameListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		qualifiedNameListReturnNode.setKind("qualifiedNameList");
              	    // Create a CST Node
              		if(list_qualifiedNameGen != null) {
              	        for(Iterator it = list_qualifiedNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("qualifiedName");
              	            	qualifiedNameListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal qualifiedNameGen_1 aggregation
              		if(list_qualifiedNameGen_1 != null) {
              	    for(int pos = 0; pos < list_qualifiedNameGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		qualifiedNameListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_qualifiedNameGen_1 != null) {		
              	    	JavaParser.qualifiedName_return r = (JavaParser.qualifiedName_return) list_qualifiedNameGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("qualifiedName");
              	    		qualifiedNameListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = qualifiedNameListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 55, qualifiedNameList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedNameList"

    public static class formalParameters_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formalParameters"
    // Java.g:3365:1: formalParameters returns [Node returnNode] : TK_0= '(' (formalParameterDeclsGen+= formalParameterDecls )? TK_1= ')' ;
    public final JavaParser.formalParameters_return formalParameters() throws RecognitionException {
        JavaParser.formalParameters_return retval = new JavaParser.formalParameters_return();
        retval.start = input.LT(1);
        int formalParameters_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_formalParameterDeclsGen=null;
        RuleReturnScope formalParameterDeclsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 56) ) { return retval; }
            // Java.g:3366:1: (TK_0= '(' (formalParameterDeclsGen+= formalParameterDecls )? TK_1= ')' )
            // Java.g:3366:3: TK_0= '(' (formalParameterDeclsGen+= formalParameterDecls )? TK_1= ')'
            {
            TK_0=(Token)match(input,65,FOLLOW_65_in_formalParameters2702); if (state.failed) return retval;
            // Java.g:3366:35: (formalParameterDeclsGen+= formalParameterDecls )?
            int alt80=2;
            alt80 = dfa80.predict(input);
            switch (alt80) {
                case 1 :
                    // Java.g:0:0: formalParameterDeclsGen+= formalParameterDecls
                    {
                    pushFollow(FOLLOW_formalParameterDecls_in_formalParameters2706);
                    formalParameterDeclsGen=formalParameterDecls();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_formalParameterDeclsGen==null) list_formalParameterDeclsGen=new ArrayList();
                    list_formalParameterDeclsGen.add(formalParameterDeclsGen.getTemplate());


                    }
                    break;

            }

            TK_1=(Token)match(input,66,FOLLOW_66_in_formalParameters2711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node formalParametersReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParametersReturnNode.setKind("formalParameters");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_formalParameterDeclsGen != null) {
              	        for(Iterator it = list_formalParameterDeclsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameterDecls_return r = (JavaParser.formalParameterDecls_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameterDecls");
              	            	formalParametersReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		formalParametersReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParametersReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 56, formalParameters_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameters"

    public static class formalParameterDecls_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formalParameterDecls"
    // Java.g:3404:1: formalParameterDecls returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type (formalParameterDeclsRestGen+= formalParameterDeclsRest )? ;
    public final JavaParser.formalParameterDecls_return formalParameterDecls() throws RecognitionException {
        JavaParser.formalParameterDecls_return retval = new JavaParser.formalParameterDecls_return();
        retval.start = input.LT(1);
        int formalParameterDecls_StartIndex = input.index();
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_formalParameterDeclsRestGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope formalParameterDeclsRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 57) ) { return retval; }
            // Java.g:3405:1: ( (variableModifierGen+= variableModifier )* typeGen+= type (formalParameterDeclsRestGen+= formalParameterDeclsRest )? )
            // Java.g:3405:3: (variableModifierGen+= variableModifier )* typeGen+= type (formalParameterDeclsRestGen+= formalParameterDeclsRest )?
            {
            // Java.g:3405:22: (variableModifierGen+= variableModifier )*
            loop81:
            do {
                int alt81=2;
                alt81 = dfa81.predict(input);
                switch (alt81) {
            	case 1 :
            	    // Java.g:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameterDecls2733);
            	    variableModifierGen=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop81;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameterDecls2738);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            // Java.g:3405:83: (formalParameterDeclsRestGen+= formalParameterDeclsRest )?
            int alt82=2;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==Identifier||LA82_0==67) ) {
                alt82=1;
            }
            switch (alt82) {
                case 1 :
                    // Java.g:0:0: formalParameterDeclsRestGen+= formalParameterDeclsRest
                    {
                    pushFollow(FOLLOW_formalParameterDeclsRest_in_formalParameterDecls2742);
                    formalParameterDeclsRestGen=formalParameterDeclsRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_formalParameterDeclsRestGen==null) list_formalParameterDeclsRestGen=new ArrayList();
                    list_formalParameterDeclsRestGen.add(formalParameterDeclsRestGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node formalParameterDeclsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParameterDeclsReturnNode.setKind("formalParameterDecls");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_formalParameterDeclsRestGen != null) {
              	        for(Iterator it = list_formalParameterDeclsRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameterDeclsRest_return r = (JavaParser.formalParameterDeclsRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameterDeclsRest");
              	            	formalParameterDeclsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParameterDeclsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 57, formalParameterDecls_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDecls"

    public static class formalParameterDeclsRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formalParameterDeclsRest"
    // Java.g:3445:1: formalParameterDeclsRest returns [Node returnNode] : (variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )? | TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId );
    public final JavaParser.formalParameterDeclsRest_return formalParameterDeclsRest() throws RecognitionException {
        JavaParser.formalParameterDeclsRest_return retval = new JavaParser.formalParameterDeclsRest_return();
        retval.start = input.LT(1);
        int formalParameterDeclsRest_StartIndex = input.index();
        Token TK_0=null;
        List list_variableDeclaratorIdGen=null;
        List list_formalParameterDeclsGen=null;
        RuleReturnScope variableDeclaratorIdGen = null;
        RuleReturnScope formalParameterDeclsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 58) ) { return retval; }
            // Java.g:3446:1: (variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )? | TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==Identifier) ) {
                alt84=1;
            }
            else if ( (LA84_0==67) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    // Java.g:3446:3: variableDeclaratorIdGen+= variableDeclaratorId (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )?
                    {
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2765);
                    variableDeclaratorIdGen=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variableDeclaratorIdGen==null) list_variableDeclaratorIdGen=new ArrayList();
                    list_variableDeclaratorIdGen.add(variableDeclaratorIdGen.getTemplate());

                    // Java.g:3446:49: (TK_0= ',' formalParameterDeclsGen+= formalParameterDecls )?
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( (LA83_0==34) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            // Java.g:3446:50: TK_0= ',' formalParameterDeclsGen+= formalParameterDecls
                            {
                            TK_0=(Token)match(input,34,FOLLOW_34_in_formalParameterDeclsRest2770); if (state.failed) return retval;
                            pushFollow(FOLLOW_formalParameterDecls_in_formalParameterDeclsRest2774);
                            formalParameterDeclsGen=formalParameterDecls();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_formalParameterDeclsGen==null) list_formalParameterDeclsGen=new ArrayList();
                            list_formalParameterDeclsGen.add(formalParameterDeclsGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node formalParameterDeclsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		formalParameterDeclsRestReturnNode.setKind("formalParameterDeclsRest");
                      	    // Create a CST Node
                      		if(list_variableDeclaratorIdGen != null) {
                      	        for(Iterator it = list_variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableDeclaratorId");
                      	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		formalParameterDeclsRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_formalParameterDeclsGen != null) {
                      	        for(Iterator it = list_formalParameterDeclsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.formalParameterDecls_return r = (JavaParser.formalParameterDecls_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("formalParameterDecls");
                      	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = formalParameterDeclsRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3483:6: TK_0= '...' variableDeclaratorIdGen+= variableDeclaratorId
                    {
                    TK_0=(Token)match(input,67,FOLLOW_67_in_formalParameterDeclsRest2789); if (state.failed) return retval;
                    pushFollow(FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2793);
                    variableDeclaratorIdGen=variableDeclaratorId();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variableDeclaratorIdGen==null) list_variableDeclaratorIdGen=new ArrayList();
                    list_variableDeclaratorIdGen.add(variableDeclaratorIdGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node formalParameterDeclsRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		formalParameterDeclsRestReturnNode.setKind("formalParameterDeclsRest");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		formalParameterDeclsRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_variableDeclaratorIdGen != null) {
                      	        for(Iterator it = list_variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableDeclaratorId");
                      	            	formalParameterDeclsRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = formalParameterDeclsRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 58, formalParameterDeclsRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameterDeclsRest"

    public static class methodBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "methodBody"
    // Java.g:3512:1: methodBody returns [Node returnNode] : blockGen+= block ;
    public final JavaParser.methodBody_return methodBody() throws RecognitionException {
        JavaParser.methodBody_return retval = new JavaParser.methodBody_return();
        retval.start = input.LT(1);
        int methodBody_StartIndex = input.index();
        List list_blockGen=null;
        RuleReturnScope blockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 59) ) { return retval; }
            // Java.g:3513:1: (blockGen+= block )
            // Java.g:3513:3: blockGen+= block
            {
            pushFollow(FOLLOW_block_in_methodBody2815);
            blockGen=block();

            state._fsp--;
            if (state.failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node methodBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		methodBodyReturnNode.setKind("methodBody");
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	methodBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = methodBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 59, methodBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "methodBody"

    public static class qualifiedName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "qualifiedName"
    // Java.g:3533:1: qualifiedName returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* ;
    public final JavaParser.qualifiedName_return qualifiedName() throws RecognitionException {
        JavaParser.qualifiedName_return retval = new JavaParser.qualifiedName_return();
        retval.start = input.LT(1);
        int qualifiedName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 60) ) { return retval; }
            // Java.g:3534:1: (IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* )
            // Java.g:3534:3: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2836); if (state.failed) return retval;
            // Java.g:3534:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==28) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // Java.g:3534:29: TK_0= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_0=(Token)match(input,28,FOLLOW_28_in_qualifiedName2841); if (state.failed) return retval;
            	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_qualifiedName2845); if (state.failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node qualifiedNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		qualifiedNameReturnNode.setKind("qualifiedName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			qualifiedNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}

              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		qualifiedNameReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			qualifiedNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = qualifiedNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 60, qualifiedName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "qualifiedName"

    public static class literal_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "literal"
    // Java.g:3579:1: literal returns [Node returnNode] : (integerLiteralGen+= integerLiteral | FloatingPointLiteralGen= FloatingPointLiteral | CharacterLiteralGen= CharacterLiteral | StringLiteralGen= StringLiteral | booleanLiteralGen+= booleanLiteral | TK_0= 'null' );
    public final JavaParser.literal_return literal() throws RecognitionException {
        JavaParser.literal_return retval = new JavaParser.literal_return();
        retval.start = input.LT(1);
        int literal_StartIndex = input.index();
        Token FloatingPointLiteralGen=null;
        Token CharacterLiteralGen=null;
        Token StringLiteralGen=null;
        Token TK_0=null;
        List list_integerLiteralGen=null;
        List list_booleanLiteralGen=null;
        RuleReturnScope integerLiteralGen = null;
        RuleReturnScope booleanLiteralGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 61) ) { return retval; }
            // Java.g:3580:1: (integerLiteralGen+= integerLiteral | FloatingPointLiteralGen= FloatingPointLiteral | CharacterLiteralGen= CharacterLiteral | StringLiteralGen= StringLiteral | booleanLiteralGen+= booleanLiteral | TK_0= 'null' )
            int alt86=6;
            alt86 = dfa86.predict(input);
            switch (alt86) {
                case 1 :
                    // Java.g:3580:5: integerLiteralGen+= integerLiteral
                    {
                    pushFollow(FOLLOW_integerLiteral_in_literal2871);
                    integerLiteralGen=integerLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_integerLiteralGen==null) list_integerLiteralGen=new ArrayList();
                    list_integerLiteralGen.add(integerLiteralGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Node
                      		if(list_integerLiteralGen != null) {
                      	        for(Iterator it = list_integerLiteralGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.integerLiteral_return r = (JavaParser.integerLiteral_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("integerLiteral");
                      	            	literalReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3598:9: FloatingPointLiteralGen= FloatingPointLiteral
                    {
                    FloatingPointLiteralGen=(Token)match(input,FloatingPointLiteral,FOLLOW_FloatingPointLiteral_in_literal2887); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(FloatingPointLiteralGen != null) {
                      			Leaf FloatingPointLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			FloatingPointLiteralGenLeaf.setKind("FloatingPointLiteral");
                      			FloatingPointLiteralGenLeaf.setValue((FloatingPointLiteralGen!=null?FloatingPointLiteralGen.getText():null));
                      			FloatingPointLiteralGenLeaf.setPos(FloatingPointLiteralGen.getCharPositionInLine());
                      			FloatingPointLiteralGenLeaf.setLine(FloatingPointLiteralGen.getLine());
                      			literalReturnNode.getChildren().add(FloatingPointLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:3615:9: CharacterLiteralGen= CharacterLiteral
                    {
                    CharacterLiteralGen=(Token)match(input,CharacterLiteral,FOLLOW_CharacterLiteral_in_literal2903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(CharacterLiteralGen != null) {
                      			Leaf CharacterLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			CharacterLiteralGenLeaf.setKind("CharacterLiteral");
                      			CharacterLiteralGenLeaf.setValue((CharacterLiteralGen!=null?CharacterLiteralGen.getText():null));
                      			CharacterLiteralGenLeaf.setPos(CharacterLiteralGen.getCharPositionInLine());
                      			CharacterLiteralGenLeaf.setLine(CharacterLiteralGen.getLine());
                      			literalReturnNode.getChildren().add(CharacterLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:3632:9: StringLiteralGen= StringLiteral
                    {
                    StringLiteralGen=(Token)match(input,StringLiteral,FOLLOW_StringLiteral_in_literal2919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Leaf
                      		if(StringLiteralGen != null) {
                      			Leaf StringLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			StringLiteralGenLeaf.setKind("StringLiteral");
                      			StringLiteralGenLeaf.setValue((StringLiteralGen!=null?StringLiteralGen.getText():null));
                      			StringLiteralGenLeaf.setPos(StringLiteralGen.getCharPositionInLine());
                      			StringLiteralGenLeaf.setLine(StringLiteralGen.getLine());
                      			literalReturnNode.getChildren().add(StringLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:3649:9: booleanLiteralGen+= booleanLiteral
                    {
                    pushFollow(FOLLOW_booleanLiteral_in_literal2935);
                    booleanLiteralGen=booleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_booleanLiteralGen==null) list_booleanLiteralGen=new ArrayList();
                    list_booleanLiteralGen.add(booleanLiteralGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a CST Node
                      		if(list_booleanLiteralGen != null) {
                      	        for(Iterator it = list_booleanLiteralGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.booleanLiteral_return r = (JavaParser.booleanLiteral_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("booleanLiteral");
                      	            	literalReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:3667:9: TK_0= 'null'
                    {
                    TK_0=(Token)match(input,68,FOLLOW_68_in_literal2951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node literalReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		literalReturnNode.setKind("literal");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		literalReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = literalReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 61, literal_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "literal"

    public static class integerLiteral_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "integerLiteral"
    // Java.g:3686:1: integerLiteral returns [Node returnNode] : (HexLiteralGen= HexLiteral | OctalLiteralGen= OctalLiteral | DecimalLiteralGen= DecimalLiteral );
    public final JavaParser.integerLiteral_return integerLiteral() throws RecognitionException {
        JavaParser.integerLiteral_return retval = new JavaParser.integerLiteral_return();
        retval.start = input.LT(1);
        int integerLiteral_StartIndex = input.index();
        Token HexLiteralGen=null;
        Token OctalLiteralGen=null;
        Token DecimalLiteralGen=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 62) ) { return retval; }
            // Java.g:3687:1: (HexLiteralGen= HexLiteral | OctalLiteralGen= OctalLiteral | DecimalLiteralGen= DecimalLiteral )
            int alt87=3;
            switch ( input.LA(1) ) {
            case HexLiteral:
                {
                alt87=1;
                }
                break;
            case OctalLiteral:
                {
                alt87=2;
                }
                break;
            case DecimalLiteral:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // Java.g:3687:5: HexLiteralGen= HexLiteral
                    {
                    HexLiteralGen=(Token)match(input,HexLiteral,FOLLOW_HexLiteral_in_integerLiteral2974); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		integerLiteralReturnNode.setKind("integerLiteral");
                      	    // Create a CST Leaf
                      		if(HexLiteralGen != null) {
                      			Leaf HexLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			HexLiteralGenLeaf.setKind("HexLiteral");
                      			HexLiteralGenLeaf.setValue((HexLiteralGen!=null?HexLiteralGen.getText():null));
                      			HexLiteralGenLeaf.setPos(HexLiteralGen.getCharPositionInLine());
                      			HexLiteralGenLeaf.setLine(HexLiteralGen.getLine());
                      			integerLiteralReturnNode.getChildren().add(HexLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = integerLiteralReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3704:9: OctalLiteralGen= OctalLiteral
                    {
                    OctalLiteralGen=(Token)match(input,OctalLiteral,FOLLOW_OctalLiteral_in_integerLiteral2990); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		integerLiteralReturnNode.setKind("integerLiteral");
                      	    // Create a CST Leaf
                      		if(OctalLiteralGen != null) {
                      			Leaf OctalLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			OctalLiteralGenLeaf.setKind("OctalLiteral");
                      			OctalLiteralGenLeaf.setValue((OctalLiteralGen!=null?OctalLiteralGen.getText():null));
                      			OctalLiteralGenLeaf.setPos(OctalLiteralGen.getCharPositionInLine());
                      			OctalLiteralGenLeaf.setLine(OctalLiteralGen.getLine());
                      			integerLiteralReturnNode.getChildren().add(OctalLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = integerLiteralReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:3721:9: DecimalLiteralGen= DecimalLiteral
                    {
                    DecimalLiteralGen=(Token)match(input,DecimalLiteral,FOLLOW_DecimalLiteral_in_integerLiteral3006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node integerLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		integerLiteralReturnNode.setKind("integerLiteral");
                      	    // Create a CST Leaf
                      		if(DecimalLiteralGen != null) {
                      			Leaf DecimalLiteralGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			DecimalLiteralGenLeaf.setKind("DecimalLiteral");
                      			DecimalLiteralGenLeaf.setValue((DecimalLiteralGen!=null?DecimalLiteralGen.getText():null));
                      			DecimalLiteralGenLeaf.setPos(DecimalLiteralGen.getCharPositionInLine());
                      			DecimalLiteralGenLeaf.setLine(DecimalLiteralGen.getLine());
                      			integerLiteralReturnNode.getChildren().add(DecimalLiteralGenLeaf);
                      		}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = integerLiteralReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 62, integerLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "integerLiteral"

    public static class booleanLiteral_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "booleanLiteral"
    // Java.g:3740:1: booleanLiteral returns [Node returnNode] : (TK_0= 'true' | TK_0= 'false' );
    public final JavaParser.booleanLiteral_return booleanLiteral() throws RecognitionException {
        JavaParser.booleanLiteral_return retval = new JavaParser.booleanLiteral_return();
        retval.start = input.LT(1);
        int booleanLiteral_StartIndex = input.index();
        Token TK_0=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 63) ) { return retval; }
            // Java.g:3741:1: (TK_0= 'true' | TK_0= 'false' )
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==69) ) {
                alt88=1;
            }
            else if ( (LA88_0==70) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    // Java.g:3741:5: TK_0= 'true'
                    {
                    TK_0=(Token)match(input,69,FOLLOW_69_in_booleanLiteral3032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node booleanLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		booleanLiteralReturnNode.setKind("booleanLiteral");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		booleanLiteralReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = booleanLiteralReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:3758:9: TK_0= 'false'
                    {
                    TK_0=(Token)match(input,70,FOLLOW_70_in_booleanLiteral3048); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node booleanLiteralReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		booleanLiteralReturnNode.setKind("booleanLiteral");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		booleanLiteralReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = booleanLiteralReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 63, booleanLiteral_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "booleanLiteral"

    public static class annotations_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotations"
    // Java.g:3779:1: annotations returns [Node returnNode] : (annotationGen+= annotation )+ ;
    public final JavaParser.annotations_return annotations() throws RecognitionException {
        JavaParser.annotations_return retval = new JavaParser.annotations_return();
        retval.start = input.LT(1);
        int annotations_StartIndex = input.index();
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 64) ) { return retval; }
            // Java.g:3780:1: ( (annotationGen+= annotation )+ )
            // Java.g:3780:3: (annotationGen+= annotation )+
            {
            // Java.g:3780:16: (annotationGen+= annotation )+
            int cnt89=0;
            loop89:
            do {
                int alt89=2;
                alt89 = dfa89.predict(input);
                switch (alt89) {
            	case 1 :
            	    // Java.g:0:0: annotationGen+= annotation
            	    {
            	    pushFollow(FOLLOW_annotation_in_annotations3074);
            	    annotationGen=annotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_annotationGen==null) list_annotationGen=new ArrayList();
            	    list_annotationGen.add(annotationGen.getTemplate());


            	    }
            	    break;

            	default :
            	    if ( cnt89 >= 1 ) break loop89;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(89, input);
                        throw eee;
                }
                cnt89++;
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationsReturnNode.setKind("annotations");
              	    // Create a CST Node
              		if(list_annotationGen != null) {
              	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotation");
              	            	annotationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 64, annotations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotations"

    public static class annotation_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotation"
    // Java.g:3800:1: annotation returns [Node returnNode] : TK_0= '@' annotationNameGen+= annotationName (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )? ;
    public final JavaParser.annotation_return annotation() throws RecognitionException {
        JavaParser.annotation_return retval = new JavaParser.annotation_return();
        retval.start = input.LT(1);
        int annotation_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_annotationNameGen=null;
        List list_elementValuePairsGen=null;
        RuleReturnScope annotationNameGen = null;
        RuleReturnScope elementValuePairsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 65) ) { return retval; }
            // Java.g:3801:1: (TK_0= '@' annotationNameGen+= annotationName (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )? )
            // Java.g:3801:3: TK_0= '@' annotationNameGen+= annotationName (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )?
            {
            TK_0=(Token)match(input,71,FOLLOW_71_in_annotation3096); if (state.failed) return retval;
            pushFollow(FOLLOW_annotationName_in_annotation3100);
            annotationNameGen=annotationName();

            state._fsp--;
            if (state.failed) return retval;
            if (list_annotationNameGen==null) list_annotationNameGen=new ArrayList();
            list_annotationNameGen.add(annotationNameGen.getTemplate());

            // Java.g:3801:46: (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )?
            int alt91=2;
            alt91 = dfa91.predict(input);
            switch (alt91) {
                case 1 :
                    // Java.g:3801:47: TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')'
                    {
                    TK_1=(Token)match(input,65,FOLLOW_65_in_annotation3105); if (state.failed) return retval;
                    // Java.g:3801:76: (elementValuePairsGen+= elementValuePairs )?
                    int alt90=2;
                    alt90 = dfa90.predict(input);
                    switch (alt90) {
                        case 1 :
                            // Java.g:0:0: elementValuePairsGen+= elementValuePairs
                            {
                            pushFollow(FOLLOW_elementValuePairs_in_annotation3109);
                            elementValuePairsGen=elementValuePairs();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_elementValuePairsGen==null) list_elementValuePairsGen=new ArrayList();
                            list_elementValuePairsGen.add(elementValuePairsGen.getTemplate());


                            }
                            break;

                    }

                    TK_2=(Token)match(input,66,FOLLOW_66_in_annotation3114); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationReturnNode.setKind("annotation");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_annotationNameGen != null) {
              	        for(Iterator it = list_annotationNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationName_return r = (JavaParser.annotationName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationName");
              	            	annotationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValuePairsGen != null) {
              	        for(Iterator it = list_elementValuePairsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValuePairs_return r = (JavaParser.elementValuePairs_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValuePairs");
              	            	annotationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		annotationReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 65, annotation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotation"

    public static class annotationName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationName"
    // Java.g:3858:1: annotationName returns [Node returnNode] : IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* ;
    public final JavaParser.annotationName_return annotationName() throws RecognitionException {
        JavaParser.annotationName_return retval = new JavaParser.annotationName_return();
        retval.start = input.LT(1);
        int annotationName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 66) ) { return retval; }
            // Java.g:3859:1: (IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* )
            // Java.g:3859:3: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3138); if (state.failed) return retval;
            // Java.g:3859:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
            loop92:
            do {
                int alt92=2;
                alt92 = dfa92.predict(input);
                switch (alt92) {
            	case 1 :
            	    // Java.g:3859:29: TK_0= '.' IdentifierGen_1_List+= Identifier
            	    {
            	    TK_0=(Token)match(input,28,FOLLOW_28_in_annotationName3143); if (state.failed) return retval;
            	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationName3147); if (state.failed) return retval;
            	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
            	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


            	    }
            	    break;

            	default :
            	    break loop92;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationNameReturnNode.setKind("annotationName");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			annotationNameReturnNode.getChildren().add(IdentifierGenLeaf);
              		}

              		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
              		if(list_IdentifierGen_1_List != null) {
              	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationNameReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Terminal extractor
              	    if(list_IdentifierGen_1_List != null) {
              		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
              		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGen_1_ListLeaf.setKind("Identifier");
              			IdentifierGen_1_ListLeaf.setValue(t.getText());
              			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
              			IdentifierGen_1_ListLeaf.setLine(t.getLine());
              			annotationNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationNameReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 66, annotationName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationName"

    public static class elementValuePairs_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "elementValuePairs"
    // Java.g:3904:1: elementValuePairs returns [Node returnNode] : elementValuePairGen+= elementValuePair (TK_0= ',' elementValuePairGen_1+= elementValuePair )* ;
    public final JavaParser.elementValuePairs_return elementValuePairs() throws RecognitionException {
        JavaParser.elementValuePairs_return retval = new JavaParser.elementValuePairs_return();
        retval.start = input.LT(1);
        int elementValuePairs_StartIndex = input.index();
        Token TK_0=null;
        List list_elementValuePairGen=null;
        List list_elementValuePairGen_1=null;
        RuleReturnScope elementValuePairGen = null;
        RuleReturnScope elementValuePairGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 67) ) { return retval; }
            // Java.g:3905:1: (elementValuePairGen+= elementValuePair (TK_0= ',' elementValuePairGen_1+= elementValuePair )* )
            // Java.g:3905:3: elementValuePairGen+= elementValuePair (TK_0= ',' elementValuePairGen_1+= elementValuePair )*
            {
            pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3171);
            elementValuePairGen=elementValuePair();

            state._fsp--;
            if (state.failed) return retval;
            if (list_elementValuePairGen==null) list_elementValuePairGen=new ArrayList();
            list_elementValuePairGen.add(elementValuePairGen.getTemplate());

            // Java.g:3905:41: (TK_0= ',' elementValuePairGen_1+= elementValuePair )*
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);

                if ( (LA93_0==34) ) {
                    alt93=1;
                }


                switch (alt93) {
            	case 1 :
            	    // Java.g:3905:42: TK_0= ',' elementValuePairGen_1+= elementValuePair
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_elementValuePairs3176); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePair_in_elementValuePairs3180);
            	    elementValuePairGen_1=elementValuePair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_elementValuePairGen_1==null) list_elementValuePairGen_1=new ArrayList();
            	    list_elementValuePairGen_1.add(elementValuePairGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop93;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node elementValuePairsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		elementValuePairsReturnNode.setKind("elementValuePairs");
              	    // Create a CST Node
              		if(list_elementValuePairGen != null) {
              	        for(Iterator it = list_elementValuePairGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValuePair_return r = (JavaParser.elementValuePair_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValuePair");
              	            	elementValuePairsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal elementValuePairGen_1 aggregation
              		if(list_elementValuePairGen_1 != null) {
              	    for(int pos = 0; pos < list_elementValuePairGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		elementValuePairsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_elementValuePairGen_1 != null) {		
              	    	JavaParser.elementValuePair_return r = (JavaParser.elementValuePair_return) list_elementValuePairGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("elementValuePair");
              	    		elementValuePairsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = elementValuePairsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 67, elementValuePairs_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePairs"

    public static class elementValuePair_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "elementValuePair"
    // Java.g:3949:1: elementValuePair returns [Node returnNode] : (IdentifierGen= Identifier TK_0= '=' )? elementValueGen+= elementValue ;
    public final JavaParser.elementValuePair_return elementValuePair() throws RecognitionException {
        JavaParser.elementValuePair_return retval = new JavaParser.elementValuePair_return();
        retval.start = input.LT(1);
        int elementValuePair_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_elementValueGen=null;
        RuleReturnScope elementValueGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 68) ) { return retval; }
            // Java.g:3950:1: ( (IdentifierGen= Identifier TK_0= '=' )? elementValueGen+= elementValue )
            // Java.g:3950:3: (IdentifierGen= Identifier TK_0= '=' )? elementValueGen+= elementValue
            {
            // Java.g:3950:3: (IdentifierGen= Identifier TK_0= '=' )?
            int alt94=2;
            alt94 = dfa94.predict(input);
            switch (alt94) {
                case 1 :
                    // Java.g:3950:4: IdentifierGen= Identifier TK_0= '='
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_elementValuePair3205); if (state.failed) return retval;
                    TK_0=(Token)match(input,44,FOLLOW_44_in_elementValuePair3209); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_elementValue_in_elementValuePair3215);
            elementValueGen=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if (list_elementValueGen==null) list_elementValueGen=new ArrayList();
            list_elementValueGen.add(elementValueGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node elementValuePairReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		elementValuePairReturnNode.setKind("elementValuePair");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			elementValuePairReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		elementValuePairReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValueGen != null) {
              	        for(Iterator it = list_elementValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValue");
              	            	elementValuePairReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = elementValuePairReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 68, elementValuePair_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValuePair"

    public static class elementValue_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "elementValue"
    // Java.g:3988:1: elementValue returns [Node returnNode] : (conditionalExpressionGen+= conditionalExpression | annotationGen+= annotation | elementValueArrayInitializerGen+= elementValueArrayInitializer );
    public final JavaParser.elementValue_return elementValue() throws RecognitionException {
        JavaParser.elementValue_return retval = new JavaParser.elementValue_return();
        retval.start = input.LT(1);
        int elementValue_StartIndex = input.index();
        List list_conditionalExpressionGen=null;
        List list_annotationGen=null;
        List list_elementValueArrayInitializerGen=null;
        RuleReturnScope conditionalExpressionGen = null;
        RuleReturnScope annotationGen = null;
        RuleReturnScope elementValueArrayInitializerGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 69) ) { return retval; }
            // Java.g:3989:1: (conditionalExpressionGen+= conditionalExpression | annotationGen+= annotation | elementValueArrayInitializerGen+= elementValueArrayInitializer )
            int alt95=3;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    // Java.g:3989:3: conditionalExpressionGen+= conditionalExpression
                    {
                    pushFollow(FOLLOW_conditionalExpression_in_elementValue3237);
                    conditionalExpressionGen=conditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_conditionalExpressionGen==null) list_conditionalExpressionGen=new ArrayList();
                    list_conditionalExpressionGen.add(conditionalExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		elementValueReturnNode.setKind("elementValue");
                      	    // Create a CST Node
                      		if(list_conditionalExpressionGen != null) {
                      	        for(Iterator it = list_conditionalExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.conditionalExpression_return r = (JavaParser.conditionalExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("conditionalExpression");
                      	            	elementValueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = elementValueReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:4007:6: annotationGen+= annotation
                    {
                    pushFollow(FOLLOW_annotation_in_elementValue3250);
                    annotationGen=annotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationGen==null) list_annotationGen=new ArrayList();
                    list_annotationGen.add(annotationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		elementValueReturnNode.setKind("elementValue");
                      	    // Create a CST Node
                      		if(list_annotationGen != null) {
                      	        for(Iterator it = list_annotationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotation_return r = (JavaParser.annotation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotation");
                      	            	elementValueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = elementValueReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:4025:6: elementValueArrayInitializerGen+= elementValueArrayInitializer
                    {
                    pushFollow(FOLLOW_elementValueArrayInitializer_in_elementValue3263);
                    elementValueArrayInitializerGen=elementValueArrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_elementValueArrayInitializerGen==null) list_elementValueArrayInitializerGen=new ArrayList();
                    list_elementValueArrayInitializerGen.add(elementValueArrayInitializerGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node elementValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		elementValueReturnNode.setKind("elementValue");
                      	    // Create a CST Node
                      		if(list_elementValueArrayInitializerGen != null) {
                      	        for(Iterator it = list_elementValueArrayInitializerGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.elementValueArrayInitializer_return r = (JavaParser.elementValueArrayInitializer_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("elementValueArrayInitializer");
                      	            	elementValueReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = elementValueReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 69, elementValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValue"

    public static class elementValueArrayInitializer_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "elementValueArrayInitializer"
    // Java.g:4045:1: elementValueArrayInitializer returns [Node returnNode] : TK_0= '{' (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )? TK_2= '}' ;
    public final JavaParser.elementValueArrayInitializer_return elementValueArrayInitializer() throws RecognitionException {
        JavaParser.elementValueArrayInitializer_return retval = new JavaParser.elementValueArrayInitializer_return();
        retval.start = input.LT(1);
        int elementValueArrayInitializer_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_elementValueGen=null;
        List list_elementValueGen_1=null;
        RuleReturnScope elementValueGen = null;
        RuleReturnScope elementValueGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 70) ) { return retval; }
            // Java.g:4046:1: (TK_0= '{' (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )? TK_2= '}' )
            // Java.g:4046:3: TK_0= '{' (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )? TK_2= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_elementValueArrayInitializer3285); if (state.failed) return retval;
            // Java.g:4046:12: (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )?
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    // Java.g:4046:13: elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )*
                    {
                    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3290);
                    elementValueGen=elementValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_elementValueGen==null) list_elementValueGen=new ArrayList();
                    list_elementValueGen.add(elementValueGen.getTemplate());

                    // Java.g:4046:43: (TK_1= ',' elementValueGen_1+= elementValue )*
                    loop96:
                    do {
                        int alt96=2;
                        int LA96_0 = input.LA(1);

                        if ( (LA96_0==34) ) {
                            alt96=1;
                        }


                        switch (alt96) {
                    	case 1 :
                    	    // Java.g:4046:44: TK_1= ',' elementValueGen_1+= elementValue
                    	    {
                    	    TK_1=(Token)match(input,34,FOLLOW_34_in_elementValueArrayInitializer3295); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_elementValue_in_elementValueArrayInitializer3299);
                    	    elementValueGen_1=elementValue();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_elementValueGen_1==null) list_elementValueGen_1=new ArrayList();
                    	    list_elementValueGen_1.add(elementValueGen_1.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop96;
                        }
                    } while (true);


                    }
                    break;

            }

            TK_2=(Token)match(input,38,FOLLOW_38_in_elementValueArrayInitializer3308); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node elementValueArrayInitializerReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		elementValueArrayInitializerReturnNode.setKind("elementValueArrayInitializer");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValueGen != null) {
              	        for(Iterator it = list_elementValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValue");
              	            	elementValueArrayInitializerReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal elementValueGen_1 aggregation
              		if(list_elementValueGen_1 != null) {
              	    for(int pos = 0; pos < list_elementValueGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_elementValueGen_1 != null) {		
              	    	JavaParser.elementValue_return r = (JavaParser.elementValue_return) list_elementValueGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("elementValue");
              	    		elementValueArrayInitializerReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		elementValueArrayInitializerReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = elementValueArrayInitializerReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 70, elementValueArrayInitializer_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayInitializer"

    public static class annotationTypeDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationTypeDeclaration"
    // Java.g:4108:1: annotationTypeDeclaration returns [Node returnNode] : TK_0= '@' TK_1= 'interface' IdentifierGen= Identifier annotationTypeBodyGen+= annotationTypeBody ;
    public final JavaParser.annotationTypeDeclaration_return annotationTypeDeclaration() throws RecognitionException {
        JavaParser.annotationTypeDeclaration_return retval = new JavaParser.annotationTypeDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeDeclaration_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token IdentifierGen=null;
        List list_annotationTypeBodyGen=null;
        RuleReturnScope annotationTypeBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 71) ) { return retval; }
            // Java.g:4109:1: (TK_0= '@' TK_1= 'interface' IdentifierGen= Identifier annotationTypeBodyGen+= annotationTypeBody )
            // Java.g:4109:3: TK_0= '@' TK_1= 'interface' IdentifierGen= Identifier annotationTypeBodyGen+= annotationTypeBody
            {
            TK_0=(Token)match(input,71,FOLLOW_71_in_annotationTypeDeclaration3330); if (state.failed) return retval;
            TK_1=(Token)match(input,39,FOLLOW_39_in_annotationTypeDeclaration3334); if (state.failed) return retval;
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationTypeDeclaration3338); if (state.failed) return retval;
            pushFollow(FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3342);
            annotationTypeBodyGen=annotationTypeBody();

            state._fsp--;
            if (state.failed) return retval;
            if (list_annotationTypeBodyGen==null) list_annotationTypeBodyGen=new ArrayList();
            list_annotationTypeBodyGen.add(annotationTypeBodyGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationTypeDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeDeclarationReturnNode.setKind("annotationTypeDeclaration");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationTypeDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationTypeDeclarationReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			annotationTypeDeclarationReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_annotationTypeBodyGen != null) {
              	        for(Iterator it = list_annotationTypeBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeBody_return r = (JavaParser.annotationTypeBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeBody");
              	            	annotationTypeDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 71, annotationTypeDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeDeclaration"

    public static class annotationTypeBody_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationTypeBody"
    // Java.g:4156:1: annotationTypeBody returns [Node returnNode] : TK_0= '{' (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )? TK_1= '}' ;
    public final JavaParser.annotationTypeBody_return annotationTypeBody() throws RecognitionException {
        JavaParser.annotationTypeBody_return retval = new JavaParser.annotationTypeBody_return();
        retval.start = input.LT(1);
        int annotationTypeBody_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_annotationTypeElementDeclarationsGen=null;
        RuleReturnScope annotationTypeElementDeclarationsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 72) ) { return retval; }
            // Java.g:4157:1: (TK_0= '{' (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )? TK_1= '}' )
            // Java.g:4157:3: TK_0= '{' (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )? TK_1= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_annotationTypeBody3364); if (state.failed) return retval;
            // Java.g:4157:12: (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )?
            int alt98=2;
            alt98 = dfa98.predict(input);
            switch (alt98) {
                case 1 :
                    // Java.g:4157:13: annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations
                    {
                    pushFollow(FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3369);
                    annotationTypeElementDeclarationsGen=annotationTypeElementDeclarations();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationTypeElementDeclarationsGen==null) list_annotationTypeElementDeclarationsGen=new ArrayList();
                    list_annotationTypeElementDeclarationsGen.add(annotationTypeElementDeclarationsGen.getTemplate());


                    }
                    break;

            }

            TK_1=(Token)match(input,38,FOLLOW_38_in_annotationTypeBody3375); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationTypeBodyReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeBodyReturnNode.setKind("annotationTypeBody");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationTypeBodyReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_annotationTypeElementDeclarationsGen != null) {
              	        for(Iterator it = list_annotationTypeElementDeclarationsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementDeclarations_return r = (JavaParser.annotationTypeElementDeclarations_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementDeclarations");
              	            	annotationTypeBodyReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationTypeBodyReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeBodyReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 72, annotationTypeBody_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeBody"

    public static class annotationTypeElementDeclarations_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationTypeElementDeclarations"
    // Java.g:4195:1: annotationTypeElementDeclarations returns [Node returnNode] : (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration ) (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )* ;
    public final JavaParser.annotationTypeElementDeclarations_return annotationTypeElementDeclarations() throws RecognitionException {
        JavaParser.annotationTypeElementDeclarations_return retval = new JavaParser.annotationTypeElementDeclarations_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclarations_StartIndex = input.index();
        List list_annotationTypeElementDeclarationGen=null;
        List list_annotationTypeElementDeclarationGen_1=null;
        RuleReturnScope annotationTypeElementDeclarationGen = null;
        RuleReturnScope annotationTypeElementDeclarationGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 73) ) { return retval; }
            // Java.g:4196:1: ( (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration ) (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )* )
            // Java.g:4196:3: (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration ) (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )*
            {
            // Java.g:4196:3: (annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration )
            // Java.g:4196:4: annotationTypeElementDeclarationGen+= annotationTypeElementDeclaration
            {
            pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3398);
            annotationTypeElementDeclarationGen=annotationTypeElementDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if (list_annotationTypeElementDeclarationGen==null) list_annotationTypeElementDeclarationGen=new ArrayList();
            list_annotationTypeElementDeclarationGen.add(annotationTypeElementDeclarationGen.getTemplate());


            }

            // Java.g:4196:75: (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )*
            loop99:
            do {
                int alt99=2;
                alt99 = dfa99.predict(input);
                switch (alt99) {
            	case 1 :
            	    // Java.g:4196:76: annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration
            	    {
            	    pushFollow(FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3404);
            	    annotationTypeElementDeclarationGen_1=annotationTypeElementDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_annotationTypeElementDeclarationGen_1==null) list_annotationTypeElementDeclarationGen_1=new ArrayList();
            	    list_annotationTypeElementDeclarationGen_1.add(annotationTypeElementDeclarationGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop99;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationTypeElementDeclarationsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeElementDeclarationsReturnNode.setKind("annotationTypeElementDeclarations");
              	    // Create a CST Node
              		if(list_annotationTypeElementDeclarationGen != null) {
              	        for(Iterator it = list_annotationTypeElementDeclarationGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementDeclaration_return r = (JavaParser.annotationTypeElementDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementDeclaration");
              	            	annotationTypeElementDeclarationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_annotationTypeElementDeclarationGen_1 != null) {
              	        for(Iterator it = list_annotationTypeElementDeclarationGen_1.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementDeclaration_return r = (JavaParser.annotationTypeElementDeclaration_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementDeclaration");
              	            	annotationTypeElementDeclarationsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeElementDeclarationsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 73, annotationTypeElementDeclarations_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclarations"

    public static class annotationTypeElementDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationTypeElementDeclaration"
    // Java.g:4226:1: annotationTypeElementDeclaration returns [Node returnNode] : (modifierGen+= modifier )* annotationTypeElementRestGen+= annotationTypeElementRest ;
    public final JavaParser.annotationTypeElementDeclaration_return annotationTypeElementDeclaration() throws RecognitionException {
        JavaParser.annotationTypeElementDeclaration_return retval = new JavaParser.annotationTypeElementDeclaration_return();
        retval.start = input.LT(1);
        int annotationTypeElementDeclaration_StartIndex = input.index();
        List list_modifierGen=null;
        List list_annotationTypeElementRestGen=null;
        RuleReturnScope modifierGen = null;
        RuleReturnScope annotationTypeElementRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 74) ) { return retval; }
            // Java.g:4227:1: ( (modifierGen+= modifier )* annotationTypeElementRestGen+= annotationTypeElementRest )
            // Java.g:4227:3: (modifierGen+= modifier )* annotationTypeElementRestGen+= annotationTypeElementRest
            {
            // Java.g:4227:3: (modifierGen+= modifier )*
            loop100:
            do {
                int alt100=2;
                alt100 = dfa100.predict(input);
                switch (alt100) {
            	case 1 :
            	    // Java.g:4227:4: modifierGen+= modifier
            	    {
            	    pushFollow(FOLLOW_modifier_in_annotationTypeElementDeclaration3429);
            	    modifierGen=modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_modifierGen==null) list_modifierGen=new ArrayList();
            	    list_modifierGen.add(modifierGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop100;
                }
            } while (true);

            pushFollow(FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3435);
            annotationTypeElementRestGen=annotationTypeElementRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_annotationTypeElementRestGen==null) list_annotationTypeElementRestGen=new ArrayList();
            list_annotationTypeElementRestGen.add(annotationTypeElementRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationTypeElementDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationTypeElementDeclarationReturnNode.setKind("annotationTypeElementDeclaration");
              	    // Create a CST Node
              		if(list_modifierGen != null) {
              	        for(Iterator it = list_modifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.modifier_return r = (JavaParser.modifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("modifier");
              	            	annotationTypeElementDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_annotationTypeElementRestGen != null) {
              	        for(Iterator it = list_annotationTypeElementRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.annotationTypeElementRest_return r = (JavaParser.annotationTypeElementRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("annotationTypeElementRest");
              	            	annotationTypeElementDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationTypeElementDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 74, annotationTypeElementDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementDeclaration"

    public static class annotationTypeElementRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationTypeElementRest"
    // Java.g:4257:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );
    public final JavaParser.annotationTypeElementRest_return annotationTypeElementRest() throws RecognitionException {
        JavaParser.annotationTypeElementRest_return retval = new JavaParser.annotationTypeElementRest_return();
        retval.start = input.LT(1);
        int annotationTypeElementRest_StartIndex = input.index();
        Token TK_0=null;
        List list_typeGen=null;
        List list_annotationMethodOrConstantRestGen=null;
        List list_classDeclarationGen=null;
        List list_interfaceDeclarationGen=null;
        List list_enumDeclarationGen=null;
        List list_annotationTypeDeclarationGen=null;
        RuleReturnScope typeGen = null;
        RuleReturnScope annotationMethodOrConstantRestGen = null;
        RuleReturnScope classDeclarationGen = null;
        RuleReturnScope interfaceDeclarationGen = null;
        RuleReturnScope enumDeclarationGen = null;
        RuleReturnScope annotationTypeDeclarationGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 75) ) { return retval; }
            // Java.g:4258:1: (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? )
            int alt105=5;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    // Java.g:4258:3: typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';'
                    {
                    pushFollow(FOLLOW_type_in_annotationTypeElementRest3457);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen.getTemplate());

                    pushFollow(FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3461);
                    annotationMethodOrConstantRestGen=annotationMethodOrConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationMethodOrConstantRestGen==null) list_annotationMethodOrConstantRestGen=new ArrayList();
                    list_annotationMethodOrConstantRestGen.add(annotationMethodOrConstantRestGen.getTemplate());

                    TK_0=(Token)match(input,25,FOLLOW_25_in_annotationTypeElementRest3465); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_annotationMethodOrConstantRestGen != null) {
                      	        for(Iterator it = list_annotationMethodOrConstantRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationMethodOrConstantRest_return r = (JavaParser.annotationMethodOrConstantRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationMethodOrConstantRest");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:4295:6: classDeclarationGen+= classDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_classDeclaration_in_annotationTypeElementRest3478);
                    classDeclarationGen=classDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
                    list_classDeclarationGen.add(classDeclarationGen.getTemplate());

                    // Java.g:4295:48: (TK_0= ';' )?
                    int alt101=2;
                    alt101 = dfa101.predict(input);
                    switch (alt101) {
                        case 1 :
                            // Java.g:0:0: TK_0= ';'
                            {
                            TK_0=(Token)match(input,25,FOLLOW_25_in_annotationTypeElementRest3482); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_classDeclarationGen != null) {
                      	        for(Iterator it = list_classDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classDeclaration_return r = (JavaParser.classDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:4322:6: interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3496);
                    interfaceDeclarationGen=interfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
                    list_interfaceDeclarationGen.add(interfaceDeclarationGen.getTemplate());

                    // Java.g:4322:56: (TK_0= ';' )?
                    int alt102=2;
                    alt102 = dfa102.predict(input);
                    switch (alt102) {
                        case 1 :
                            // Java.g:0:0: TK_0= ';'
                            {
                            TK_0=(Token)match(input,25,FOLLOW_25_in_annotationTypeElementRest3500); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_interfaceDeclarationGen != null) {
                      	        for(Iterator it = list_interfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.interfaceDeclaration_return r = (JavaParser.interfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("interfaceDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:4349:6: enumDeclarationGen+= enumDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_enumDeclaration_in_annotationTypeElementRest3514);
                    enumDeclarationGen=enumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_enumDeclarationGen==null) list_enumDeclarationGen=new ArrayList();
                    list_enumDeclarationGen.add(enumDeclarationGen.getTemplate());

                    // Java.g:4349:46: (TK_0= ';' )?
                    int alt103=2;
                    alt103 = dfa103.predict(input);
                    switch (alt103) {
                        case 1 :
                            // Java.g:0:0: TK_0= ';'
                            {
                            TK_0=(Token)match(input,25,FOLLOW_25_in_annotationTypeElementRest3518); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_enumDeclarationGen != null) {
                      	        for(Iterator it = list_enumDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.enumDeclaration_return r = (JavaParser.enumDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:4376:6: annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )?
                    {
                    pushFollow(FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3532);
                    annotationTypeDeclarationGen=annotationTypeDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationTypeDeclarationGen==null) list_annotationTypeDeclarationGen=new ArrayList();
                    list_annotationTypeDeclarationGen.add(annotationTypeDeclarationGen.getTemplate());

                    // Java.g:4376:66: (TK_0= ';' )?
                    int alt104=2;
                    alt104 = dfa104.predict(input);
                    switch (alt104) {
                        case 1 :
                            // Java.g:0:0: TK_0= ';'
                            {
                            TK_0=(Token)match(input,25,FOLLOW_25_in_annotationTypeElementRest3536); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationTypeElementRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationTypeElementRestReturnNode.setKind("annotationTypeElementRest");
                      	    // Create a CST Node
                      		if(list_annotationTypeDeclarationGen != null) {
                      	        for(Iterator it = list_annotationTypeDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationTypeDeclaration_return r = (JavaParser.annotationTypeDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationTypeDeclaration");
                      	            	annotationTypeElementRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		annotationTypeElementRestReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationTypeElementRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 75, annotationTypeElementRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationTypeElementRest"

    public static class annotationMethodOrConstantRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationMethodOrConstantRest"
    // Java.g:4405:1: annotationMethodOrConstantRest returns [Node returnNode] : (annotationMethodRestGen+= annotationMethodRest | annotationConstantRestGen+= annotationConstantRest );
    public final JavaParser.annotationMethodOrConstantRest_return annotationMethodOrConstantRest() throws RecognitionException {
        JavaParser.annotationMethodOrConstantRest_return retval = new JavaParser.annotationMethodOrConstantRest_return();
        retval.start = input.LT(1);
        int annotationMethodOrConstantRest_StartIndex = input.index();
        List list_annotationMethodRestGen=null;
        List list_annotationConstantRestGen=null;
        RuleReturnScope annotationMethodRestGen = null;
        RuleReturnScope annotationConstantRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 76) ) { return retval; }
            // Java.g:4406:1: (annotationMethodRestGen+= annotationMethodRest | annotationConstantRestGen+= annotationConstantRest )
            int alt106=2;
            int LA106_0 = input.LA(1);

            if ( (LA106_0==Identifier) ) {
                int LA106_1 = input.LA(2);

                if ( (LA106_1==65) ) {
                    alt106=1;
                }
                else if ( (LA106_1==25||LA106_1==34||LA106_1==41||LA106_1==44) ) {
                    alt106=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 106, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 106, 0, input);

                throw nvae;
            }
            switch (alt106) {
                case 1 :
                    // Java.g:4406:3: annotationMethodRestGen+= annotationMethodRest
                    {
                    pushFollow(FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3559);
                    annotationMethodRestGen=annotationMethodRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationMethodRestGen==null) list_annotationMethodRestGen=new ArrayList();
                    list_annotationMethodRestGen.add(annotationMethodRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationMethodOrConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationMethodOrConstantRestReturnNode.setKind("annotationMethodOrConstantRest");
                      	    // Create a CST Node
                      		if(list_annotationMethodRestGen != null) {
                      	        for(Iterator it = list_annotationMethodRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationMethodRest_return r = (JavaParser.annotationMethodRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationMethodRest");
                      	            	annotationMethodOrConstantRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationMethodOrConstantRestReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:4424:6: annotationConstantRestGen+= annotationConstantRest
                    {
                    pushFollow(FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3572);
                    annotationConstantRestGen=annotationConstantRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_annotationConstantRestGen==null) list_annotationConstantRestGen=new ArrayList();
                    list_annotationConstantRestGen.add(annotationConstantRestGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node annotationMethodOrConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		annotationMethodOrConstantRestReturnNode.setKind("annotationMethodOrConstantRest");
                      	    // Create a CST Node
                      		if(list_annotationConstantRestGen != null) {
                      	        for(Iterator it = list_annotationConstantRestGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.annotationConstantRest_return r = (JavaParser.annotationConstantRest_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("annotationConstantRest");
                      	            	annotationMethodOrConstantRestReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = annotationMethodOrConstantRestReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 76, annotationMethodOrConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodOrConstantRest"

    public static class annotationMethodRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationMethodRest"
    // Java.g:4444:1: annotationMethodRest returns [Node returnNode] : IdentifierGen= Identifier TK_0= '(' TK_1= ')' (defaultValueGen+= defaultValue )? ;
    public final JavaParser.annotationMethodRest_return annotationMethodRest() throws RecognitionException {
        JavaParser.annotationMethodRest_return retval = new JavaParser.annotationMethodRest_return();
        retval.start = input.LT(1);
        int annotationMethodRest_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token TK_1=null;
        List list_defaultValueGen=null;
        RuleReturnScope defaultValueGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 77) ) { return retval; }
            // Java.g:4445:1: (IdentifierGen= Identifier TK_0= '(' TK_1= ')' (defaultValueGen+= defaultValue )? )
            // Java.g:4445:3: IdentifierGen= Identifier TK_0= '(' TK_1= ')' (defaultValueGen+= defaultValue )?
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_annotationMethodRest3594); if (state.failed) return retval;
            TK_0=(Token)match(input,65,FOLLOW_65_in_annotationMethodRest3598); if (state.failed) return retval;
            TK_1=(Token)match(input,66,FOLLOW_66_in_annotationMethodRest3602); if (state.failed) return retval;
            // Java.g:4445:46: (defaultValueGen+= defaultValue )?
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==72) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    // Java.g:4445:47: defaultValueGen+= defaultValue
                    {
                    pushFollow(FOLLOW_defaultValue_in_annotationMethodRest3607);
                    defaultValueGen=defaultValue();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_defaultValueGen==null) list_defaultValueGen=new ArrayList();
                    list_defaultValueGen.add(defaultValueGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationMethodRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationMethodRestReturnNode.setKind("annotationMethodRest");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			annotationMethodRestReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		annotationMethodRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		annotationMethodRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_defaultValueGen != null) {
              	        for(Iterator it = list_defaultValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.defaultValue_return r = (JavaParser.defaultValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("defaultValue");
              	            	annotationMethodRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationMethodRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 77, annotationMethodRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationMethodRest"

    public static class annotationConstantRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "annotationConstantRest"
    // Java.g:4492:1: annotationConstantRest returns [Node returnNode] : variableDeclaratorsGen+= variableDeclarators ;
    public final JavaParser.annotationConstantRest_return annotationConstantRest() throws RecognitionException {
        JavaParser.annotationConstantRest_return retval = new JavaParser.annotationConstantRest_return();
        retval.start = input.LT(1);
        int annotationConstantRest_StartIndex = input.index();
        List list_variableDeclaratorsGen=null;
        RuleReturnScope variableDeclaratorsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 78) ) { return retval; }
            // Java.g:4493:1: (variableDeclaratorsGen+= variableDeclarators )
            // Java.g:4493:3: variableDeclaratorsGen+= variableDeclarators
            {
            pushFollow(FOLLOW_variableDeclarators_in_annotationConstantRest3633);
            variableDeclaratorsGen=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
            list_variableDeclaratorsGen.add(variableDeclaratorsGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node annotationConstantRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		annotationConstantRestReturnNode.setKind("annotationConstantRest");
              	    // Create a CST Node
              		if(list_variableDeclaratorsGen != null) {
              	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarators");
              	            	annotationConstantRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = annotationConstantRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 78, annotationConstantRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "annotationConstantRest"

    public static class defaultValue_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "defaultValue"
    // Java.g:4513:1: defaultValue returns [Node returnNode] : TK_0= 'default' elementValueGen+= elementValue ;
    public final JavaParser.defaultValue_return defaultValue() throws RecognitionException {
        JavaParser.defaultValue_return retval = new JavaParser.defaultValue_return();
        retval.start = input.LT(1);
        int defaultValue_StartIndex = input.index();
        Token TK_0=null;
        List list_elementValueGen=null;
        RuleReturnScope elementValueGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 79) ) { return retval; }
            // Java.g:4514:1: (TK_0= 'default' elementValueGen+= elementValue )
            // Java.g:4514:3: TK_0= 'default' elementValueGen+= elementValue
            {
            TK_0=(Token)match(input,72,FOLLOW_72_in_defaultValue3657); if (state.failed) return retval;
            pushFollow(FOLLOW_elementValue_in_defaultValue3661);
            elementValueGen=elementValue();

            state._fsp--;
            if (state.failed) return retval;
            if (list_elementValueGen==null) list_elementValueGen=new ArrayList();
            list_elementValueGen.add(elementValueGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node defaultValueReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		defaultValueReturnNode.setKind("defaultValue");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		defaultValueReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_elementValueGen != null) {
              	        for(Iterator it = list_elementValueGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.elementValue_return r = (JavaParser.elementValue_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("elementValue");
              	            	defaultValueReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = defaultValueReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 79, defaultValue_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "defaultValue"

    public static class block_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "block"
    // Java.g:4545:1: block returns [Node returnNode] : TK_0= '{' (blockStatementGen+= blockStatement )* TK_1= '}' ;
    public final JavaParser.block_return block() throws RecognitionException {
        JavaParser.block_return retval = new JavaParser.block_return();
        retval.start = input.LT(1);
        int block_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_blockStatementGen=null;
        RuleReturnScope blockStatementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 80) ) { return retval; }
            // Java.g:4546:1: (TK_0= '{' (blockStatementGen+= blockStatement )* TK_1= '}' )
            // Java.g:4546:3: TK_0= '{' (blockStatementGen+= blockStatement )* TK_1= '}'
            {
            TK_0=(Token)match(input,37,FOLLOW_37_in_block3685); if (state.failed) return retval;
            // Java.g:4546:29: (blockStatementGen+= blockStatement )*
            loop108:
            do {
                int alt108=2;
                alt108 = dfa108.predict(input);
                switch (alt108) {
            	case 1 :
            	    // Java.g:0:0: blockStatementGen+= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_block3689);
            	    blockStatementGen=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_blockStatementGen==null) list_blockStatementGen=new ArrayList();
            	    list_blockStatementGen.add(blockStatementGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop108;
                }
            } while (true);

            TK_1=(Token)match(input,38,FOLLOW_38_in_block3694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node blockReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		blockReturnNode.setKind("block");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		blockReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_blockStatementGen != null) {
              	        for(Iterator it = list_blockStatementGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.blockStatement_return r = (JavaParser.blockStatement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("blockStatement");
              	            	blockReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		blockReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = blockReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 80, block_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "block"

    public static class blockStatement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "blockStatement"
    // Java.g:4584:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );
    public final JavaParser.blockStatement_return blockStatement() throws RecognitionException {
        JavaParser.blockStatement_return retval = new JavaParser.blockStatement_return();
        retval.start = input.LT(1);
        int blockStatement_StartIndex = input.index();
        List list_localVariableDeclarationGen=null;
        List list_classOrInterfaceDeclarationGen=null;
        List list_statementGen=null;
        RuleReturnScope localVariableDeclarationGen = null;
        RuleReturnScope classOrInterfaceDeclarationGen = null;
        RuleReturnScope statementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 81) ) { return retval; }
            // Java.g:4585:1: (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement )
            int alt109=3;
            alt109 = dfa109.predict(input);
            switch (alt109) {
                case 1 :
                    // Java.g:4585:3: localVariableDeclarationGen+= localVariableDeclaration
                    {
                    pushFollow(FOLLOW_localVariableDeclaration_in_blockStatement3716);
                    localVariableDeclarationGen=localVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_localVariableDeclarationGen==null) list_localVariableDeclarationGen=new ArrayList();
                    list_localVariableDeclarationGen.add(localVariableDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		blockStatementReturnNode.setKind("blockStatement");
                      	    // Create a CST Node
                      		if(list_localVariableDeclarationGen != null) {
                      	        for(Iterator it = list_localVariableDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.localVariableDeclaration_return r = (JavaParser.localVariableDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("localVariableDeclaration");
                      	            	blockStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = blockStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:4603:4: classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration
                    {
                    pushFollow(FOLLOW_classOrInterfaceDeclaration_in_blockStatement3727);
                    classOrInterfaceDeclarationGen=classOrInterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classOrInterfaceDeclarationGen==null) list_classOrInterfaceDeclarationGen=new ArrayList();
                    list_classOrInterfaceDeclarationGen.add(classOrInterfaceDeclarationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		blockStatementReturnNode.setKind("blockStatement");
                      	    // Create a CST Node
                      		if(list_classOrInterfaceDeclarationGen != null) {
                      	        for(Iterator it = list_classOrInterfaceDeclarationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.classOrInterfaceDeclaration_return r = (JavaParser.classOrInterfaceDeclaration_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("classOrInterfaceDeclaration");
                      	            	blockStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = blockStatementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:4621:8: statementGen+= statement
                    {
                    pushFollow(FOLLOW_statement_in_blockStatement3742);
                    statementGen=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node blockStatementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		blockStatementReturnNode.setKind("blockStatement");
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	blockStatementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = blockStatementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 81, blockStatement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "blockStatement"

    public static class localVariableDeclaration_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "localVariableDeclaration"
    // Java.g:4641:1: localVariableDeclaration returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' ;
    public final JavaParser.localVariableDeclaration_return localVariableDeclaration() throws RecognitionException {
        JavaParser.localVariableDeclaration_return retval = new JavaParser.localVariableDeclaration_return();
        retval.start = input.LT(1);
        int localVariableDeclaration_StartIndex = input.index();
        Token TK_0=null;
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 82) ) { return retval; }
            // Java.g:4642:1: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';' )
            // Java.g:4642:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators TK_0= ';'
            {
            // Java.g:4642:22: (variableModifierGen+= variableModifier )*
            loop110:
            do {
                int alt110=2;
                alt110 = dfa110.predict(input);
                switch (alt110) {
            	case 1 :
            	    // Java.g:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_localVariableDeclaration3764);
            	    variableModifierGen=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_localVariableDeclaration3769);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            pushFollow(FOLLOW_variableDeclarators_in_localVariableDeclaration3773);
            variableDeclaratorsGen=variableDeclarators();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
            list_variableDeclaratorsGen.add(variableDeclaratorsGen.getTemplate());

            TK_0=(Token)match(input,25,FOLLOW_25_in_localVariableDeclaration3777); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node localVariableDeclarationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		localVariableDeclarationReturnNode.setKind("localVariableDeclaration");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_variableDeclaratorsGen != null) {
              	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclarators");
              	            	localVariableDeclarationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		localVariableDeclarationReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = localVariableDeclarationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 82, localVariableDeclaration_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "localVariableDeclaration"

    public static class statement_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statement"
    // Java.g:4691:1: statement returns [Node returnNode] : (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement );
    public final JavaParser.statement_return statement() throws RecognitionException {
        JavaParser.statement_return retval = new JavaParser.statement_return();
        retval.start = input.LT(1);
        int statement_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token IdentifierGen=null;
        List list_blockGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        List list_parExpressionGen=null;
        List list_statementGen=null;
        List list_statementGen_1=null;
        List list_forControlGen=null;
        List list_catchesGen=null;
        List list_blockGen_1=null;
        List list_catchesGen_1=null;
        List list_blockGen_2=null;
        List list_switchBlockStatementGroupsGen=null;
        List list_statementExpressionGen=null;
        RuleReturnScope blockGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        RuleReturnScope parExpressionGen = null;
        RuleReturnScope statementGen = null;
        RuleReturnScope statementGen_1 = null;
        RuleReturnScope forControlGen = null;
        RuleReturnScope catchesGen = null;
        RuleReturnScope blockGen_1 = null;
        RuleReturnScope catchesGen_1 = null;
        RuleReturnScope blockGen_2 = null;
        RuleReturnScope switchBlockStatementGroupsGen = null;
        RuleReturnScope statementExpressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 83) ) { return retval; }
            // Java.g:4692:1: (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement )
            int alt117=16;
            alt117 = dfa117.predict(input);
            switch (alt117) {
                case 1 :
                    // Java.g:4692:3: blockGen+= block
                    {
                    pushFollow(FOLLOW_block_in_statement3799);
                    blockGen=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:4710:7: TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';'
                    {
                    TK_0=(Token)match(input,73,FOLLOW_73_in_statement3813); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_statement3817);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());

                    // Java.g:4710:47: (TK_1= ':' expressionGen_1+= expression )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==74) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // Java.g:4710:48: TK_1= ':' expressionGen_1+= expression
                            {
                            TK_1=(Token)match(input,74,FOLLOW_74_in_statement3822); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_statement3826);
                            expressionGen_1=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                            list_expressionGen_1.add(expressionGen_1.getTemplate());


                            }
                            break;

                    }

                    TK_2=(Token)match(input,25,FOLLOW_25_in_statement3832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen_1 != null) {
                      	        for(Iterator it = list_expressionGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:4765:7: TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )?
                    {
                    TK_0=(Token)match(input,75,FOLLOW_75_in_statement3846); if (state.failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement3850);
                    parExpressionGen=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen.getTemplate());

                    pushFollow(FOLLOW_statement_in_statement3854);
                    statementGen=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen.getTemplate());

                    // Java.g:4765:73: ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==76) ) {
                        int LA112_2 = input.LA(2);

                        if ( (synpred150_Java()) ) {
                            alt112=1;
                        }
                    }
                    switch (alt112) {
                        case 1 :
                            // Java.g:4765:89: TK_1= 'else' statementGen_1+= statement
                            {
                            TK_1=(Token)match(input,76,FOLLOW_76_in_statement3866); if (state.failed) return retval;
                            pushFollow(FOLLOW_statement_in_statement3870);
                            statementGen_1=statement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_statementGen_1==null) list_statementGen_1=new ArrayList();
                            list_statementGen_1.add(statementGen_1.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen_1 != null) {
                      	        for(Iterator it = list_statementGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:4821:7: TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement
                    {
                    TK_0=(Token)match(input,77,FOLLOW_77_in_statement3886); if (state.failed) return retval;
                    TK_1=(Token)match(input,65,FOLLOW_65_in_statement3890); if (state.failed) return retval;
                    pushFollow(FOLLOW_forControl_in_statement3894);
                    forControlGen=forControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_forControlGen==null) list_forControlGen=new ArrayList();
                    list_forControlGen.add(forControlGen.getTemplate());

                    TK_2=(Token)match(input,66,FOLLOW_66_in_statement3898); if (state.failed) return retval;
                    pushFollow(FOLLOW_statement_in_statement3902);
                    statementGen=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_forControlGen != null) {
                      	        for(Iterator it = list_forControlGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forControl_return r = (JavaParser.forControl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forControl");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:4876:7: TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement
                    {
                    TK_0=(Token)match(input,78,FOLLOW_78_in_statement3916); if (state.failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement3920);
                    parExpressionGen=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen.getTemplate());

                    pushFollow(FOLLOW_statement_in_statement3924);
                    statementGen=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:4913:7: TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';'
                    {
                    TK_0=(Token)match(input,79,FOLLOW_79_in_statement3938); if (state.failed) return retval;
                    pushFollow(FOLLOW_statement_in_statement3942);
                    statementGen=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen.getTemplate());

                    TK_1=(Token)match(input,78,FOLLOW_78_in_statement3946); if (state.failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement3950);
                    parExpressionGen=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen.getTemplate());

                    TK_2=(Token)match(input,25,FOLLOW_25_in_statement3954); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:4968:7: TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )
                    {
                    TK_0=(Token)match(input,80,FOLLOW_80_in_statement3968); if (state.failed) return retval;
                    pushFollow(FOLLOW_block_in_statement3972);
                    blockGen=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen.getTemplate());

                    // Java.g:4969:7: (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block )
                    int alt113=3;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==87) ) {
                        int LA113_1 = input.LA(2);

                        if ( (LA113_1==65) ) {
                            int LA113_3 = input.LA(3);

                            if ( (synpred155_Java()) ) {
                                alt113=1;
                            }
                            else if ( (synpred156_Java()) ) {
                                alt113=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 113, 3, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 113, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA113_0==81) ) {
                        alt113=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 113, 0, input);

                        throw nvae;
                    }
                    switch (alt113) {
                        case 1 :
                            // Java.g:4969:9: catchesGen+= catches TK_1= 'finally' blockGen_1+= block
                            {
                            pushFollow(FOLLOW_catches_in_statement3984);
                            catchesGen=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_catchesGen==null) list_catchesGen=new ArrayList();
                            list_catchesGen.add(catchesGen.getTemplate());

                            TK_1=(Token)match(input,81,FOLLOW_81_in_statement3988); if (state.failed) return retval;
                            pushFollow(FOLLOW_block_in_statement3992);
                            blockGen_1=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_blockGen_1==null) list_blockGen_1=new ArrayList();
                            list_blockGen_1.add(blockGen_1.getTemplate());


                            }
                            break;
                        case 2 :
                            // Java.g:4970:9: catchesGen_1+= catches
                            {
                            pushFollow(FOLLOW_catches_in_statement4004);
                            catchesGen_1=catches();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_catchesGen_1==null) list_catchesGen_1=new ArrayList();
                            list_catchesGen_1.add(catchesGen_1.getTemplate());


                            }
                            break;
                        case 3 :
                            // Java.g:4971:9: TK_2= 'finally' blockGen_2+= block
                            {
                            TK_2=(Token)match(input,81,FOLLOW_81_in_statement4016); if (state.failed) return retval;
                            pushFollow(FOLLOW_block_in_statement4020);
                            blockGen_2=block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_blockGen_2==null) list_blockGen_2=new ArrayList();
                            list_blockGen_2.add(blockGen_2.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_catchesGen != null) {
                      	        for(Iterator it = list_catchesGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.catches_return r = (JavaParser.catches_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("catches");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen_1 != null) {
                      	        for(Iterator it = list_blockGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_catchesGen_1 != null) {
                      	        for(Iterator it = list_catchesGen_1.iterator(); it.hasNext(); )  { 
                      	            JavaParser.catches_return r = (JavaParser.catches_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("catches");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_blockGen_2 != null) {
                      	        for(Iterator it = list_blockGen_2.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // Java.g:5057:7: TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}'
                    {
                    TK_0=(Token)match(input,82,FOLLOW_82_in_statement4042); if (state.failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement4046);
                    parExpressionGen=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen.getTemplate());

                    TK_1=(Token)match(input,37,FOLLOW_37_in_statement4050); if (state.failed) return retval;
                    pushFollow(FOLLOW_switchBlockStatementGroups_in_statement4054);
                    switchBlockStatementGroupsGen=switchBlockStatementGroups();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_switchBlockStatementGroupsGen==null) list_switchBlockStatementGroupsGen=new ArrayList();
                    list_switchBlockStatementGroupsGen.add(switchBlockStatementGroupsGen.getTemplate());

                    TK_2=(Token)match(input,38,FOLLOW_38_in_statement4058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_switchBlockStatementGroupsGen != null) {
                      	        for(Iterator it = list_switchBlockStatementGroupsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.switchBlockStatementGroups_return r = (JavaParser.switchBlockStatementGroups_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("switchBlockStatementGroups");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		statementReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // Java.g:5112:7: TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block
                    {
                    TK_0=(Token)match(input,51,FOLLOW_51_in_statement4072); if (state.failed) return retval;
                    pushFollow(FOLLOW_parExpression_in_statement4076);
                    parExpressionGen=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen.getTemplate());

                    pushFollow(FOLLOW_block_in_statement4080);
                    blockGen=block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_blockGen==null) list_blockGen=new ArrayList();
                    list_blockGen.add(blockGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_blockGen != null) {
                      	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("block");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // Java.g:5149:7: TK_0= 'return' (expressionGen+= expression )? TK_1= ';'
                    {
                    TK_0=(Token)match(input,83,FOLLOW_83_in_statement4094); if (state.failed) return retval;
                    // Java.g:5149:34: (expressionGen+= expression )?
                    int alt114=2;
                    alt114 = dfa114.predict(input);
                    switch (alt114) {
                        case 1 :
                            // Java.g:0:0: expressionGen+= expression
                            {
                            pushFollow(FOLLOW_expression_in_statement4098);
                            expressionGen=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_expressionGen==null) list_expressionGen=new ArrayList();
                            list_expressionGen.add(expressionGen.getTemplate());


                            }
                            break;

                    }

                    TK_1=(Token)match(input,25,FOLLOW_25_in_statement4103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // Java.g:5185:7: TK_0= 'throw' expressionGen+= expression TK_1= ';'
                    {
                    TK_0=(Token)match(input,84,FOLLOW_84_in_statement4117); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_statement4121);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());

                    TK_1=(Token)match(input,25,FOLLOW_25_in_statement4125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // Java.g:5221:7: TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';'
                    {
                    TK_0=(Token)match(input,85,FOLLOW_85_in_statement4139); if (state.failed) return retval;
                    // Java.g:5221:33: (IdentifierGen= Identifier )?
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( (LA115_0==Identifier) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            // Java.g:0:0: IdentifierGen= Identifier
                            {
                            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4143); if (state.failed) return retval;

                            }
                            break;

                    }

                    TK_1=(Token)match(input,25,FOLLOW_25_in_statement4148); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			statementReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 13 :
                    // Java.g:5256:7: TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';'
                    {
                    TK_0=(Token)match(input,86,FOLLOW_86_in_statement4162); if (state.failed) return retval;
                    // Java.g:5256:36: (IdentifierGen= Identifier )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==Identifier) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // Java.g:0:0: IdentifierGen= Identifier
                            {
                            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4166); if (state.failed) return retval;

                            }
                            break;

                    }

                    TK_1=(Token)match(input,25,FOLLOW_25_in_statement4171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			statementReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		statementReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 14 :
                    // Java.g:5291:7: TK_0= ';'
                    {
                    TK_0=(Token)match(input,25,FOLLOW_25_in_statement4185); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 15 :
                    // Java.g:5308:7: statementExpressionGen+= statementExpression TK_0= ';'
                    {
                    pushFollow(FOLLOW_statementExpression_in_statement4199);
                    statementExpressionGen=statementExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementExpressionGen==null) list_statementExpressionGen=new ArrayList();
                    list_statementExpressionGen.add(statementExpressionGen.getTemplate());

                    TK_0=(Token)match(input,25,FOLLOW_25_in_statement4203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Node
                      		if(list_statementExpressionGen != null) {
                      	        for(Iterator it = list_statementExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statementExpression_return r = (JavaParser.statementExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statementExpression");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;
                case 16 :
                    // Java.g:5335:7: IdentifierGen= Identifier TK_0= ':' statementGen+= statement
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_statement4217); if (state.failed) return retval;
                    TK_0=(Token)match(input,74,FOLLOW_74_in_statement4221); if (state.failed) return retval;
                    pushFollow(FOLLOW_statement_in_statement4225);
                    statementGen=statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_statementGen==null) list_statementGen=new ArrayList();
                    list_statementGen.add(statementGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node statementReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		statementReturnNode.setKind("statement");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			statementReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		statementReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_statementGen != null) {
                      	        for(Iterator it = list_statementGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.statement_return r = (JavaParser.statement_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("statement");
                      	            	statementReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = statementReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 83, statement_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statement"

    public static class catches_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "catches"
    // Java.g:5373:1: catches returns [Node returnNode] : catchClauseGen+= catchClause (catchClauseGen_1+= catchClause )* ;
    public final JavaParser.catches_return catches() throws RecognitionException {
        JavaParser.catches_return retval = new JavaParser.catches_return();
        retval.start = input.LT(1);
        int catches_StartIndex = input.index();
        List list_catchClauseGen=null;
        List list_catchClauseGen_1=null;
        RuleReturnScope catchClauseGen = null;
        RuleReturnScope catchClauseGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 84) ) { return retval; }
            // Java.g:5374:1: (catchClauseGen+= catchClause (catchClauseGen_1+= catchClause )* )
            // Java.g:5374:3: catchClauseGen+= catchClause (catchClauseGen_1+= catchClause )*
            {
            pushFollow(FOLLOW_catchClause_in_catches4247);
            catchClauseGen=catchClause();

            state._fsp--;
            if (state.failed) return retval;
            if (list_catchClauseGen==null) list_catchClauseGen=new ArrayList();
            list_catchClauseGen.add(catchClauseGen.getTemplate());

            // Java.g:5374:31: (catchClauseGen_1+= catchClause )*
            loop118:
            do {
                int alt118=2;
                alt118 = dfa118.predict(input);
                switch (alt118) {
            	case 1 :
            	    // Java.g:5374:32: catchClauseGen_1+= catchClause
            	    {
            	    pushFollow(FOLLOW_catchClause_in_catches4252);
            	    catchClauseGen_1=catchClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_catchClauseGen_1==null) list_catchClauseGen_1=new ArrayList();
            	    list_catchClauseGen_1.add(catchClauseGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop118;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node catchesReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		catchesReturnNode.setKind("catches");
              	    // Create a CST Node
              		if(list_catchClauseGen != null) {
              	        for(Iterator it = list_catchClauseGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.catchClause_return r = (JavaParser.catchClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("catchClause");
              	            	catchesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_catchClauseGen_1 != null) {
              	        for(Iterator it = list_catchClauseGen_1.iterator(); it.hasNext(); )  { 
              	            JavaParser.catchClause_return r = (JavaParser.catchClause_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("catchClause");
              	            	catchesReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = catchesReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 84, catches_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catches"

    public static class catchClause_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "catchClause"
    // Java.g:5404:1: catchClause returns [Node returnNode] : TK_0= 'catch' TK_1= '(' formalParameterGen+= formalParameter TK_2= ')' blockGen+= block ;
    public final JavaParser.catchClause_return catchClause() throws RecognitionException {
        JavaParser.catchClause_return retval = new JavaParser.catchClause_return();
        retval.start = input.LT(1);
        int catchClause_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_formalParameterGen=null;
        List list_blockGen=null;
        RuleReturnScope formalParameterGen = null;
        RuleReturnScope blockGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 85) ) { return retval; }
            // Java.g:5405:1: (TK_0= 'catch' TK_1= '(' formalParameterGen+= formalParameter TK_2= ')' blockGen+= block )
            // Java.g:5405:3: TK_0= 'catch' TK_1= '(' formalParameterGen+= formalParameter TK_2= ')' blockGen+= block
            {
            TK_0=(Token)match(input,87,FOLLOW_87_in_catchClause4276); if (state.failed) return retval;
            TK_1=(Token)match(input,65,FOLLOW_65_in_catchClause4280); if (state.failed) return retval;
            pushFollow(FOLLOW_formalParameter_in_catchClause4284);
            formalParameterGen=formalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if (list_formalParameterGen==null) list_formalParameterGen=new ArrayList();
            list_formalParameterGen.add(formalParameterGen.getTemplate());

            TK_2=(Token)match(input,66,FOLLOW_66_in_catchClause4288); if (state.failed) return retval;
            pushFollow(FOLLOW_block_in_catchClause4292);
            blockGen=block();

            state._fsp--;
            if (state.failed) return retval;
            if (list_blockGen==null) list_blockGen=new ArrayList();
            list_blockGen.add(blockGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node catchClauseReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		catchClauseReturnNode.setKind("catchClause");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		catchClauseReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		catchClauseReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_formalParameterGen != null) {
              	        for(Iterator it = list_formalParameterGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.formalParameter_return r = (JavaParser.formalParameter_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("formalParameter");
              	            	catchClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		catchClauseReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_blockGen != null) {
              	        for(Iterator it = list_blockGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.block_return r = (JavaParser.block_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("block");
              	            	catchClauseReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = catchClauseReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 85, catchClause_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "catchClause"

    public static class formalParameter_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "formalParameter"
    // Java.g:5462:1: formalParameter returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorIdGen+= variableDeclaratorId ;
    public final JavaParser.formalParameter_return formalParameter() throws RecognitionException {
        JavaParser.formalParameter_return retval = new JavaParser.formalParameter_return();
        retval.start = input.LT(1);
        int formalParameter_StartIndex = input.index();
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorIdGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorIdGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 86) ) { return retval; }
            // Java.g:5463:1: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorIdGen+= variableDeclaratorId )
            // Java.g:5463:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorIdGen+= variableDeclaratorId
            {
            // Java.g:5463:22: (variableModifierGen+= variableModifier )*
            loop119:
            do {
                int alt119=2;
                alt119 = dfa119.predict(input);
                switch (alt119) {
            	case 1 :
            	    // Java.g:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_formalParameter4313);
            	    variableModifierGen=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_formalParameter4318);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            pushFollow(FOLLOW_variableDeclaratorId_in_formalParameter4322);
            variableDeclaratorIdGen=variableDeclaratorId();

            state._fsp--;
            if (state.failed) return retval;
            if (list_variableDeclaratorIdGen==null) list_variableDeclaratorIdGen=new ArrayList();
            list_variableDeclaratorIdGen.add(variableDeclaratorIdGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node formalParameterReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		formalParameterReturnNode.setKind("formalParameter");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	formalParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	formalParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_variableDeclaratorIdGen != null) {
              	        for(Iterator it = list_variableDeclaratorIdGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableDeclaratorId_return r = (JavaParser.variableDeclaratorId_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableDeclaratorId");
              	            	formalParameterReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = formalParameterReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 86, formalParameter_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "formalParameter"

    public static class switchBlockStatementGroups_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "switchBlockStatementGroups"
    // Java.g:5503:1: switchBlockStatementGroups returns [Node returnNode] : (switchBlockStatementGroupGen+= switchBlockStatementGroup )* ;
    public final JavaParser.switchBlockStatementGroups_return switchBlockStatementGroups() throws RecognitionException {
        JavaParser.switchBlockStatementGroups_return retval = new JavaParser.switchBlockStatementGroups_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroups_StartIndex = input.index();
        List list_switchBlockStatementGroupGen=null;
        RuleReturnScope switchBlockStatementGroupGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 87) ) { return retval; }
            // Java.g:5504:1: ( (switchBlockStatementGroupGen+= switchBlockStatementGroup )* )
            // Java.g:5504:3: (switchBlockStatementGroupGen+= switchBlockStatementGroup )*
            {
            // Java.g:5504:3: (switchBlockStatementGroupGen+= switchBlockStatementGroup )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==72||LA120_0==88) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // Java.g:5504:4: switchBlockStatementGroupGen+= switchBlockStatementGroup
            	    {
            	    pushFollow(FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4346);
            	    switchBlockStatementGroupGen=switchBlockStatementGroup();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_switchBlockStatementGroupGen==null) list_switchBlockStatementGroupGen=new ArrayList();
            	    list_switchBlockStatementGroupGen.add(switchBlockStatementGroupGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node switchBlockStatementGroupsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		switchBlockStatementGroupsReturnNode.setKind("switchBlockStatementGroups");
              	    // Create a CST Node
              		if(list_switchBlockStatementGroupGen != null) {
              	        for(Iterator it = list_switchBlockStatementGroupGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.switchBlockStatementGroup_return r = (JavaParser.switchBlockStatementGroup_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("switchBlockStatementGroup");
              	            	switchBlockStatementGroupsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = switchBlockStatementGroupsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 87, switchBlockStatementGroups_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroups"

    public static class switchBlockStatementGroup_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "switchBlockStatementGroup"
    // Java.g:5524:1: switchBlockStatementGroup returns [Node returnNode] : switchLabelGen+= switchLabel (blockStatementGen+= blockStatement )* ;
    public final JavaParser.switchBlockStatementGroup_return switchBlockStatementGroup() throws RecognitionException {
        JavaParser.switchBlockStatementGroup_return retval = new JavaParser.switchBlockStatementGroup_return();
        retval.start = input.LT(1);
        int switchBlockStatementGroup_StartIndex = input.index();
        List list_switchLabelGen=null;
        List list_blockStatementGen=null;
        RuleReturnScope switchLabelGen = null;
        RuleReturnScope blockStatementGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 88) ) { return retval; }
            // Java.g:5525:1: (switchLabelGen+= switchLabel (blockStatementGen+= blockStatement )* )
            // Java.g:5525:3: switchLabelGen+= switchLabel (blockStatementGen+= blockStatement )*
            {
            pushFollow(FOLLOW_switchLabel_in_switchBlockStatementGroup4370);
            switchLabelGen=switchLabel();

            state._fsp--;
            if (state.failed) return retval;
            if (list_switchLabelGen==null) list_switchLabelGen=new ArrayList();
            list_switchLabelGen.add(switchLabelGen.getTemplate());

            // Java.g:5525:48: (blockStatementGen+= blockStatement )*
            loop121:
            do {
                int alt121=2;
                alt121 = dfa121.predict(input);
                switch (alt121) {
            	case 1 :
            	    // Java.g:0:0: blockStatementGen+= blockStatement
            	    {
            	    pushFollow(FOLLOW_blockStatement_in_switchBlockStatementGroup4374);
            	    blockStatementGen=blockStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_blockStatementGen==null) list_blockStatementGen=new ArrayList();
            	    list_blockStatementGen.add(blockStatementGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop121;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node switchBlockStatementGroupReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		switchBlockStatementGroupReturnNode.setKind("switchBlockStatementGroup");
              	    // Create a CST Node
              		if(list_switchLabelGen != null) {
              	        for(Iterator it = list_switchLabelGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.switchLabel_return r = (JavaParser.switchLabel_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("switchLabel");
              	            	switchBlockStatementGroupReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_blockStatementGen != null) {
              	        for(Iterator it = list_blockStatementGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.blockStatement_return r = (JavaParser.blockStatement_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("blockStatement");
              	            	switchBlockStatementGroupReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = switchBlockStatementGroupReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 88, switchBlockStatementGroup_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchBlockStatementGroup"

    public static class switchLabel_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "switchLabel"
    // Java.g:5555:1: switchLabel returns [Node returnNode] : (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' );
    public final JavaParser.switchLabel_return switchLabel() throws RecognitionException {
        JavaParser.switchLabel_return retval = new JavaParser.switchLabel_return();
        retval.start = input.LT(1);
        int switchLabel_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_constantExpressionGen=null;
        List list_enumConstantNameGen=null;
        RuleReturnScope constantExpressionGen = null;
        RuleReturnScope enumConstantNameGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 89) ) { return retval; }
            // Java.g:5556:1: (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' )
            int alt122=3;
            alt122 = dfa122.predict(input);
            switch (alt122) {
                case 1 :
                    // Java.g:5556:3: TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':'
                    {
                    TK_0=(Token)match(input,88,FOLLOW_88_in_switchLabel4397); if (state.failed) return retval;
                    pushFollow(FOLLOW_constantExpression_in_switchLabel4401);
                    constantExpressionGen=constantExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_constantExpressionGen==null) list_constantExpressionGen=new ArrayList();
                    list_constantExpressionGen.add(constantExpressionGen.getTemplate());

                    TK_1=(Token)match(input,74,FOLLOW_74_in_switchLabel4405); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		switchLabelReturnNode.setKind("switchLabel");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_constantExpressionGen != null) {
                      	        for(Iterator it = list_constantExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.constantExpression_return r = (JavaParser.constantExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("constantExpression");
                      	            	switchLabelReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = switchLabelReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:5592:6: TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':'
                    {
                    TK_0=(Token)match(input,88,FOLLOW_88_in_switchLabel4418); if (state.failed) return retval;
                    pushFollow(FOLLOW_enumConstantName_in_switchLabel4422);
                    enumConstantNameGen=enumConstantName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_enumConstantNameGen==null) list_enumConstantNameGen=new ArrayList();
                    list_enumConstantNameGen.add(enumConstantNameGen.getTemplate());

                    TK_1=(Token)match(input,74,FOLLOW_74_in_switchLabel4426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		switchLabelReturnNode.setKind("switchLabel");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_enumConstantNameGen != null) {
                      	        for(Iterator it = list_enumConstantNameGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.enumConstantName_return r = (JavaParser.enumConstantName_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("enumConstantName");
                      	            	switchLabelReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = switchLabelReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:5628:6: TK_0= 'default' TK_1= ':'
                    {
                    TK_0=(Token)match(input,72,FOLLOW_72_in_switchLabel4439); if (state.failed) return retval;
                    TK_1=(Token)match(input,74,FOLLOW_74_in_switchLabel4443); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node switchLabelReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		switchLabelReturnNode.setKind("switchLabel");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		switchLabelReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = switchLabelReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 89, switchLabel_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "switchLabel"

    public static class moreStatementExpressions_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "moreStatementExpressions"
    // Java.g:5656:1: moreStatementExpressions returns [Node returnNode] : (TK_0= ',' statementExpressionGen+= statementExpression )* ;
    public final JavaParser.moreStatementExpressions_return moreStatementExpressions() throws RecognitionException {
        JavaParser.moreStatementExpressions_return retval = new JavaParser.moreStatementExpressions_return();
        retval.start = input.LT(1);
        int moreStatementExpressions_StartIndex = input.index();
        Token TK_0=null;
        List list_statementExpressionGen=null;
        RuleReturnScope statementExpressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 90) ) { return retval; }
            // Java.g:5657:1: ( (TK_0= ',' statementExpressionGen+= statementExpression )* )
            // Java.g:5657:3: (TK_0= ',' statementExpressionGen+= statementExpression )*
            {
            // Java.g:5657:3: (TK_0= ',' statementExpressionGen+= statementExpression )*
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);

                if ( (LA123_0==34) ) {
                    alt123=1;
                }


                switch (alt123) {
            	case 1 :
            	    // Java.g:5657:4: TK_0= ',' statementExpressionGen+= statementExpression
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_moreStatementExpressions4466); if (state.failed) return retval;
            	    pushFollow(FOLLOW_statementExpression_in_moreStatementExpressions4470);
            	    statementExpressionGen=statementExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_statementExpressionGen==null) list_statementExpressionGen=new ArrayList();
            	    list_statementExpressionGen.add(statementExpressionGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop123;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node moreStatementExpressionsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		moreStatementExpressionsReturnNode.setKind("moreStatementExpressions");

              		// Create a special CST Node for terminal statementExpressionGen aggregation
              		if(list_statementExpressionGen != null) {
              	    for(int pos = 0; pos < list_statementExpressionGen.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		moreStatementExpressionsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_statementExpressionGen != null) {		
              	    	JavaParser.statementExpression_return r = (JavaParser.statementExpression_return) list_statementExpressionGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("statementExpression");
              	    		moreStatementExpressionsReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = moreStatementExpressionsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 90, moreStatementExpressions_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "moreStatementExpressions"

    public static class forControl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "forControl"
    // Java.g:5691:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );
    public final JavaParser.forControl_return forControl() throws RecognitionException {
        JavaParser.forControl_return retval = new JavaParser.forControl_return();
        retval.start = input.LT(1);
        int forControl_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_forVarControlGen=null;
        List list_forInitGen=null;
        List list_expressionGen=null;
        List list_forUpdateGen=null;
        RuleReturnScope forVarControlGen = null;
        RuleReturnScope forInitGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope forUpdateGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 91) ) { return retval; }
            // Java.g:5693:2: (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? )
            int alt127=2;
            alt127 = dfa127.predict(input);
            switch (alt127) {
                case 1 :
                    // Java.g:5693:4: forVarControlGen+= forVarControl
                    {
                    pushFollow(FOLLOW_forVarControl_in_forControl4502);
                    forVarControlGen=forVarControl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_forVarControlGen==null) list_forVarControlGen=new ArrayList();
                    list_forVarControlGen.add(forVarControlGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node forControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forControlReturnNode.setKind("forControl");
                      	    // Create a CST Node
                      		if(list_forVarControlGen != null) {
                      	        for(Iterator it = list_forVarControlGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forVarControl_return r = (JavaParser.forVarControl_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forVarControl");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forControlReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:5711:4: (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )?
                    {
                    // Java.g:5711:14: (forInitGen+= forInit )?
                    int alt124=2;
                    alt124 = dfa124.predict(input);
                    switch (alt124) {
                        case 1 :
                            // Java.g:0:0: forInitGen+= forInit
                            {
                            pushFollow(FOLLOW_forInit_in_forControl4513);
                            forInitGen=forInit();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_forInitGen==null) list_forInitGen=new ArrayList();
                            list_forInitGen.add(forInitGen.getTemplate());


                            }
                            break;

                    }

                    TK_0=(Token)match(input,25,FOLLOW_25_in_forControl4518); if (state.failed) return retval;
                    // Java.g:5711:47: (expressionGen+= expression )?
                    int alt125=2;
                    alt125 = dfa125.predict(input);
                    switch (alt125) {
                        case 1 :
                            // Java.g:0:0: expressionGen+= expression
                            {
                            pushFollow(FOLLOW_expression_in_forControl4522);
                            expressionGen=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_expressionGen==null) list_expressionGen=new ArrayList();
                            list_expressionGen.add(expressionGen.getTemplate());


                            }
                            break;

                    }

                    TK_1=(Token)match(input,25,FOLLOW_25_in_forControl4527); if (state.failed) return retval;
                    // Java.g:5711:82: (forUpdateGen+= forUpdate )?
                    int alt126=2;
                    alt126 = dfa126.predict(input);
                    switch (alt126) {
                        case 1 :
                            // Java.g:0:0: forUpdateGen+= forUpdate
                            {
                            pushFollow(FOLLOW_forUpdate_in_forControl4531);
                            forUpdateGen=forUpdate();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_forUpdateGen==null) list_forUpdateGen=new ArrayList();
                            list_forUpdateGen.add(forUpdateGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node forControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forControlReturnNode.setKind("forControl");
                      	    // Create a CST Node
                      		if(list_forInitGen != null) {
                      	        for(Iterator it = list_forInitGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forInit_return r = (JavaParser.forInit_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forInit");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		forControlReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		forControlReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_forUpdateGen != null) {
                      	        for(Iterator it = list_forUpdateGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.forUpdate_return r = (JavaParser.forUpdate_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("forUpdate");
                      	            	forControlReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forControlReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 91, forControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forControl"

    public static class forInit_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "forInit"
    // Java.g:5769:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );
    public final JavaParser.forInit_return forInit() throws RecognitionException {
        JavaParser.forInit_return retval = new JavaParser.forInit_return();
        retval.start = input.LT(1);
        int forInit_StartIndex = input.index();
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        List list_expressionListGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        RuleReturnScope expressionListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 92) ) { return retval; }
            // Java.g:5770:1: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList )
            int alt129=2;
            alt129 = dfa129.predict(input);
            switch (alt129) {
                case 1 :
                    // Java.g:5770:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators
                    {
                    // Java.g:5770:22: (variableModifierGen+= variableModifier )*
                    loop128:
                    do {
                        int alt128=2;
                        alt128 = dfa128.predict(input);
                        switch (alt128) {
                    	case 1 :
                    	    // Java.g:0:0: variableModifierGen+= variableModifier
                    	    {
                    	    pushFollow(FOLLOW_variableModifier_in_forInit4553);
                    	    variableModifierGen=variableModifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
                    	    list_variableModifierGen.add(variableModifierGen.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop128;
                        }
                    } while (true);

                    pushFollow(FOLLOW_type_in_forInit4558);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen.getTemplate());

                    pushFollow(FOLLOW_variableDeclarators_in_forInit4562);
                    variableDeclaratorsGen=variableDeclarators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
                    list_variableDeclaratorsGen.add(variableDeclaratorsGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node forInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forInitReturnNode.setKind("forInit");
                      	    // Create a CST Node
                      		if(list_variableModifierGen != null) {
                      	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableModifier");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_variableDeclaratorsGen != null) {
                      	        for(Iterator it = list_variableDeclaratorsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.variableDeclarators_return r = (JavaParser.variableDeclarators_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("variableDeclarators");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forInitReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:5808:4: expressionListGen+= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_forInit4573);
                    expressionListGen=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionListGen==null) list_expressionListGen=new ArrayList();
                    list_expressionListGen.add(expressionListGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node forInitReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		forInitReturnNode.setKind("forInit");
                      	    // Create a CST Node
                      		if(list_expressionListGen != null) {
                      	        for(Iterator it = list_expressionListGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expressionList");
                      	            	forInitReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = forInitReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 92, forInit_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forInit"

    public static class forVarControl_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "forVarControl"
    // Java.g:5828:1: forVarControl returns [Node returnNode] : (variableModifierGen+= variableModifier )* typeGen+= type IdentifierGen= Identifier TK_0= ':' expressionGen+= expression ;
    public final JavaParser.forVarControl_return forVarControl() throws RecognitionException {
        JavaParser.forVarControl_return retval = new JavaParser.forVarControl_return();
        retval.start = input.LT(1);
        int forVarControl_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_expressionGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 93) ) { return retval; }
            // Java.g:5829:1: ( (variableModifierGen+= variableModifier )* typeGen+= type IdentifierGen= Identifier TK_0= ':' expressionGen+= expression )
            // Java.g:5829:3: (variableModifierGen+= variableModifier )* typeGen+= type IdentifierGen= Identifier TK_0= ':' expressionGen+= expression
            {
            // Java.g:5829:22: (variableModifierGen+= variableModifier )*
            loop130:
            do {
                int alt130=2;
                alt130 = dfa130.predict(input);
                switch (alt130) {
            	case 1 :
            	    // Java.g:0:0: variableModifierGen+= variableModifier
            	    {
            	    pushFollow(FOLLOW_variableModifier_in_forVarControl4595);
            	    variableModifierGen=variableModifier();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
            	    list_variableModifierGen.add(variableModifierGen.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop130;
                }
            } while (true);

            pushFollow(FOLLOW_type_in_forVarControl4600);
            typeGen=type();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeGen==null) list_typeGen=new ArrayList();
            list_typeGen.add(typeGen.getTemplate());

            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_forVarControl4604); if (state.failed) return retval;
            TK_0=(Token)match(input,74,FOLLOW_74_in_forVarControl4608); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_forVarControl4612);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node forVarControlReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		forVarControlReturnNode.setKind("forVarControl");
              	    // Create a CST Node
              		if(list_variableModifierGen != null) {
              	        for(Iterator it = list_variableModifierGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.variableModifier_return r = (JavaParser.variableModifier_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("variableModifier");
              	            	forVarControlReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	forVarControlReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			forVarControlReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		forVarControlReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	forVarControlReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = forVarControlReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 93, forVarControl_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forVarControl"

    public static class forUpdate_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "forUpdate"
    // Java.g:5887:1: forUpdate returns [Node returnNode] : expressionListGen+= expressionList ;
    public final JavaParser.forUpdate_return forUpdate() throws RecognitionException {
        JavaParser.forUpdate_return retval = new JavaParser.forUpdate_return();
        retval.start = input.LT(1);
        int forUpdate_StartIndex = input.index();
        List list_expressionListGen=null;
        RuleReturnScope expressionListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 94) ) { return retval; }
            // Java.g:5888:1: (expressionListGen+= expressionList )
            // Java.g:5888:3: expressionListGen+= expressionList
            {
            pushFollow(FOLLOW_expressionList_in_forUpdate4633);
            expressionListGen=expressionList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionListGen==null) list_expressionListGen=new ArrayList();
            list_expressionListGen.add(expressionListGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node forUpdateReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		forUpdateReturnNode.setKind("forUpdate");
              	    // Create a CST Node
              		if(list_expressionListGen != null) {
              	        for(Iterator it = list_expressionListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expressionList");
              	            	forUpdateReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = forUpdateReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 94, forUpdate_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "forUpdate"

    public static class parExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "parExpression"
    // Java.g:5910:1: parExpression returns [Node returnNode] : TK_0= '(' expressionGen+= expression TK_1= ')' ;
    public final JavaParser.parExpression_return parExpression() throws RecognitionException {
        JavaParser.parExpression_return retval = new JavaParser.parExpression_return();
        retval.start = input.LT(1);
        int parExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 95) ) { return retval; }
            // Java.g:5911:1: (TK_0= '(' expressionGen+= expression TK_1= ')' )
            // Java.g:5911:3: TK_0= '(' expressionGen+= expression TK_1= ')'
            {
            TK_0=(Token)match(input,65,FOLLOW_65_in_parExpression4656); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_parExpression4660);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen.getTemplate());

            TK_1=(Token)match(input,66,FOLLOW_66_in_parExpression4664); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node parExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		parExpressionReturnNode.setKind("parExpression");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		parExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	parExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		parExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = parExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 95, parExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "parExpression"

    public static class expressionList_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "expressionList"
    // Java.g:5949:1: expressionList returns [Node returnNode] : expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )* ;
    public final JavaParser.expressionList_return expressionList() throws RecognitionException {
        JavaParser.expressionList_return retval = new JavaParser.expressionList_return();
        retval.start = input.LT(1);
        int expressionList_StartIndex = input.index();
        Token TK_0=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 96) ) { return retval; }
            // Java.g:5950:1: (expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )* )
            // Java.g:5950:5: expressionGen+= expression (TK_0= ',' expressionGen_1+= expression )*
            {
            pushFollow(FOLLOW_expression_in_expressionList4688);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen.getTemplate());

            // Java.g:5950:31: (TK_0= ',' expressionGen_1+= expression )*
            loop131:
            do {
                int alt131=2;
                int LA131_0 = input.LA(1);

                if ( (LA131_0==34) ) {
                    alt131=1;
                }


                switch (alt131) {
            	case 1 :
            	    // Java.g:5950:32: TK_0= ',' expressionGen_1+= expression
            	    {
            	    TK_0=(Token)match(input,34,FOLLOW_34_in_expressionList4693); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList4697);
            	    expressionGen_1=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
            	    list_expressionGen_1.add(expressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop131;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node expressionListReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expressionListReturnNode.setKind("expressionList");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	expressionListReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal expressionGen_1 aggregation
              		if(list_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		expressionListReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expressionGen_1 != null) {		
              	    	JavaParser.expression_return r = (JavaParser.expression_return) list_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expression");
              	    		expressionListReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expressionListReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 96, expressionList_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class statementExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "statementExpression"
    // Java.g:5994:1: statementExpression returns [Node returnNode] : expressionGen+= expression ;
    public final JavaParser.statementExpression_return statementExpression() throws RecognitionException {
        JavaParser.statementExpression_return retval = new JavaParser.statementExpression_return();
        retval.start = input.LT(1);
        int statementExpression_StartIndex = input.index();
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 97) ) { return retval; }
            // Java.g:5995:1: (expressionGen+= expression )
            // Java.g:5995:3: expressionGen+= expression
            {
            pushFollow(FOLLOW_expression_in_statementExpression4723);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node statementExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		statementExpressionReturnNode.setKind("statementExpression");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	statementExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = statementExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 97, statementExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "statementExpression"

    public static class constantExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "constantExpression"
    // Java.g:6015:1: constantExpression returns [Node returnNode] : expressionGen+= expression ;
    public final JavaParser.constantExpression_return constantExpression() throws RecognitionException {
        JavaParser.constantExpression_return retval = new JavaParser.constantExpression_return();
        retval.start = input.LT(1);
        int constantExpression_StartIndex = input.index();
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 98) ) { return retval; }
            // Java.g:6016:1: (expressionGen+= expression )
            // Java.g:6016:3: expressionGen+= expression
            {
            pushFollow(FOLLOW_expression_in_constantExpression4745);
            expressionGen=expression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_expressionGen==null) list_expressionGen=new ArrayList();
            list_expressionGen.add(expressionGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node constantExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		constantExpressionReturnNode.setKind("constantExpression");
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	constantExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = constantExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 98, constantExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "constantExpression"

    public static class expression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "expression"
    // Java.g:6036:1: expression returns [Node returnNode] : conditionalExpressionGen+= conditionalExpression (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )? ;
    public final JavaParser.expression_return expression() throws RecognitionException {
        JavaParser.expression_return retval = new JavaParser.expression_return();
        retval.start = input.LT(1);
        int expression_StartIndex = input.index();
        List list_conditionalExpressionGen=null;
        List list_assignmentOperatorGen=null;
        List list_expressionGen=null;
        RuleReturnScope conditionalExpressionGen = null;
        RuleReturnScope assignmentOperatorGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 99) ) { return retval; }
            // Java.g:6037:1: (conditionalExpressionGen+= conditionalExpression (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )? )
            // Java.g:6037:3: conditionalExpressionGen+= conditionalExpression (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )?
            {
            pushFollow(FOLLOW_conditionalExpression_in_expression4767);
            conditionalExpressionGen=conditionalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionalExpressionGen==null) list_conditionalExpressionGen=new ArrayList();
            list_conditionalExpressionGen.add(conditionalExpressionGen.getTemplate());

            // Java.g:6037:51: (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )?
            int alt132=2;
            alt132 = dfa132.predict(input);
            switch (alt132) {
                case 1 :
                    // Java.g:6037:52: assignmentOperatorGen+= assignmentOperator expressionGen+= expression
                    {
                    pushFollow(FOLLOW_assignmentOperator_in_expression4772);
                    assignmentOperatorGen=assignmentOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_assignmentOperatorGen==null) list_assignmentOperatorGen=new ArrayList();
                    list_assignmentOperatorGen.add(assignmentOperatorGen.getTemplate());

                    pushFollow(FOLLOW_expression_in_expression4776);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node expressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		expressionReturnNode.setKind("expression");
              	    // Create a CST Node
              		if(list_conditionalExpressionGen != null) {
              	        for(Iterator it = list_conditionalExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.conditionalExpression_return r = (JavaParser.conditionalExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditionalExpression");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_assignmentOperatorGen != null) {
              	        for(Iterator it = list_assignmentOperatorGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.assignmentOperator_return r = (JavaParser.assignmentOperator_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("assignmentOperator");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	expressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = expressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 99, expression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class assignmentOperator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "assignmentOperator"
    // Java.g:6077:1: assignmentOperator returns [Node returnNode] : (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' );
    public final JavaParser.assignmentOperator_return assignmentOperator() throws RecognitionException {
        JavaParser.assignmentOperator_return retval = new JavaParser.assignmentOperator_return();
        retval.start = input.LT(1);
        int assignmentOperator_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 100) ) { return retval; }
            // Java.g:6078:1: (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' )
            int alt133=12;
            alt133 = dfa133.predict(input);
            switch (alt133) {
                case 1 :
                    // Java.g:6078:3: TK_0= '='
                    {
                    TK_0=(Token)match(input,44,FOLLOW_44_in_assignmentOperator4800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:6095:9: TK_0= '+='
                    {
                    TK_0=(Token)match(input,89,FOLLOW_89_in_assignmentOperator4816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:6112:9: TK_0= '-='
                    {
                    TK_0=(Token)match(input,90,FOLLOW_90_in_assignmentOperator4832); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:6129:9: TK_0= '*='
                    {
                    TK_0=(Token)match(input,91,FOLLOW_91_in_assignmentOperator4848); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:6146:9: TK_0= '/='
                    {
                    TK_0=(Token)match(input,92,FOLLOW_92_in_assignmentOperator4864); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:6163:9: TK_0= '&='
                    {
                    TK_0=(Token)match(input,93,FOLLOW_93_in_assignmentOperator4880); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:6180:9: TK_0= '|='
                    {
                    TK_0=(Token)match(input,94,FOLLOW_94_in_assignmentOperator4896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // Java.g:6197:9: TK_0= '^='
                    {
                    TK_0=(Token)match(input,95,FOLLOW_95_in_assignmentOperator4912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // Java.g:6214:9: TK_0= '%='
                    {
                    TK_0=(Token)match(input,96,FOLLOW_96_in_assignmentOperator4928); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 10 :
                    // Java.g:6231:9: TK_0= '<' TK_1= '<' TK_2= '='
                    {
                    TK_0=(Token)match(input,33,FOLLOW_33_in_assignmentOperator4944); if (state.failed) return retval;
                    TK_1=(Token)match(input,33,FOLLOW_33_in_assignmentOperator4948); if (state.failed) return retval;
                    TK_2=(Token)match(input,44,FOLLOW_44_in_assignmentOperator4952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 11 :
                    // Java.g:6266:9: TK_0= '>' TK_1= '>' TK_2= '='
                    {
                    TK_0=(Token)match(input,35,FOLLOW_35_in_assignmentOperator4968); if (state.failed) return retval;
                    TK_1=(Token)match(input,35,FOLLOW_35_in_assignmentOperator4972); if (state.failed) return retval;
                    TK_2=(Token)match(input,44,FOLLOW_44_in_assignmentOperator4976); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;
                case 12 :
                    // Java.g:6301:9: TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '='
                    {
                    TK_0=(Token)match(input,35,FOLLOW_35_in_assignmentOperator4992); if (state.failed) return retval;
                    TK_1=(Token)match(input,35,FOLLOW_35_in_assignmentOperator4996); if (state.failed) return retval;
                    TK_2=(Token)match(input,35,FOLLOW_35_in_assignmentOperator5000); if (state.failed) return retval;
                    TK_3=(Token)match(input,44,FOLLOW_44_in_assignmentOperator5004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node assignmentOperatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		assignmentOperatorReturnNode.setKind("assignmentOperator");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		assignmentOperatorReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = assignmentOperatorReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 100, assignmentOperator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "assignmentOperator"

    public static class conditionalExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conditionalExpression"
    // Java.g:6347:1: conditionalExpression returns [Node returnNode] : conditionalOrExpressionGen+= conditionalOrExpression (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )? ;
    public final JavaParser.conditionalExpression_return conditionalExpression() throws RecognitionException {
        JavaParser.conditionalExpression_return retval = new JavaParser.conditionalExpression_return();
        retval.start = input.LT(1);
        int conditionalExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_conditionalOrExpressionGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope conditionalOrExpressionGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 101) ) { return retval; }
            // Java.g:6348:1: (conditionalOrExpressionGen+= conditionalOrExpression (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )? )
            // Java.g:6348:5: conditionalOrExpressionGen+= conditionalOrExpression (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )?
            {
            pushFollow(FOLLOW_conditionalOrExpression_in_conditionalExpression5027);
            conditionalOrExpressionGen=conditionalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionalOrExpressionGen==null) list_conditionalOrExpressionGen=new ArrayList();
            list_conditionalOrExpressionGen.add(conditionalOrExpressionGen.getTemplate());

            // Java.g:6348:57: (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )?
            int alt134=2;
            alt134 = dfa134.predict(input);
            switch (alt134) {
                case 1 :
                    // Java.g:6348:59: TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression
                    {
                    TK_0=(Token)match(input,63,FOLLOW_63_in_conditionalExpression5033); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_conditionalExpression5037);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());

                    TK_1=(Token)match(input,74,FOLLOW_74_in_conditionalExpression5041); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_conditionalExpression5045);
                    expressionGen_1=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                    list_expressionGen_1.add(expressionGen_1.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node conditionalExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditionalExpressionReturnNode.setKind("conditionalExpression");
              	    // Create a CST Node
              		if(list_conditionalOrExpressionGen != null) {
              	        for(Iterator it = list_conditionalOrExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.conditionalOrExpression_return r = (JavaParser.conditionalOrExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditionalOrExpression");
              	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		conditionalExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		conditionalExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionGen_1 != null) {
              	        for(Iterator it = list_expressionGen_1.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	conditionalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditionalExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 101, conditionalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalExpression"

    public static class conditionalOrExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conditionalOrExpression"
    // Java.g:6406:1: conditionalOrExpression returns [Node returnNode] : conditionalAndExpressionGen+= conditionalAndExpression (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )* ;
    public final JavaParser.conditionalOrExpression_return conditionalOrExpression() throws RecognitionException {
        JavaParser.conditionalOrExpression_return retval = new JavaParser.conditionalOrExpression_return();
        retval.start = input.LT(1);
        int conditionalOrExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_conditionalAndExpressionGen=null;
        List list_conditionalAndExpressionGen_1=null;
        RuleReturnScope conditionalAndExpressionGen = null;
        RuleReturnScope conditionalAndExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 102) ) { return retval; }
            // Java.g:6407:1: (conditionalAndExpressionGen+= conditionalAndExpression (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )* )
            // Java.g:6407:5: conditionalAndExpressionGen+= conditionalAndExpression (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )*
            {
            pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5071);
            conditionalAndExpressionGen=conditionalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_conditionalAndExpressionGen==null) list_conditionalAndExpressionGen=new ArrayList();
            list_conditionalAndExpressionGen.add(conditionalAndExpressionGen.getTemplate());

            // Java.g:6407:59: (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )*
            loop135:
            do {
                int alt135=2;
                alt135 = dfa135.predict(input);
                switch (alt135) {
            	case 1 :
            	    // Java.g:6407:61: TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression
            	    {
            	    TK_0=(Token)match(input,97,FOLLOW_97_in_conditionalOrExpression5077); if (state.failed) return retval;
            	    pushFollow(FOLLOW_conditionalAndExpression_in_conditionalOrExpression5081);
            	    conditionalAndExpressionGen_1=conditionalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_conditionalAndExpressionGen_1==null) list_conditionalAndExpressionGen_1=new ArrayList();
            	    list_conditionalAndExpressionGen_1.add(conditionalAndExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node conditionalOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditionalOrExpressionReturnNode.setKind("conditionalOrExpression");
              	    // Create a CST Node
              		if(list_conditionalAndExpressionGen != null) {
              	        for(Iterator it = list_conditionalAndExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.conditionalAndExpression_return r = (JavaParser.conditionalAndExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("conditionalAndExpression");
              	            	conditionalOrExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal conditionalAndExpressionGen_1 aggregation
              		if(list_conditionalAndExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_conditionalAndExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		conditionalOrExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_conditionalAndExpressionGen_1 != null) {		
              	    	JavaParser.conditionalAndExpression_return r = (JavaParser.conditionalAndExpression_return) list_conditionalAndExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("conditionalAndExpression");
              	    		conditionalOrExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditionalOrExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 102, conditionalOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalOrExpression"

    public static class conditionalAndExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "conditionalAndExpression"
    // Java.g:6451:1: conditionalAndExpression returns [Node returnNode] : inclusiveOrExpressionGen+= inclusiveOrExpression (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )* ;
    public final JavaParser.conditionalAndExpression_return conditionalAndExpression() throws RecognitionException {
        JavaParser.conditionalAndExpression_return retval = new JavaParser.conditionalAndExpression_return();
        retval.start = input.LT(1);
        int conditionalAndExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_inclusiveOrExpressionGen=null;
        List list_inclusiveOrExpressionGen_1=null;
        RuleReturnScope inclusiveOrExpressionGen = null;
        RuleReturnScope inclusiveOrExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 103) ) { return retval; }
            // Java.g:6452:1: (inclusiveOrExpressionGen+= inclusiveOrExpression (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )* )
            // Java.g:6452:5: inclusiveOrExpressionGen+= inclusiveOrExpression (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )*
            {
            pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5107);
            inclusiveOrExpressionGen=inclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_inclusiveOrExpressionGen==null) list_inclusiveOrExpressionGen=new ArrayList();
            list_inclusiveOrExpressionGen.add(inclusiveOrExpressionGen.getTemplate());

            // Java.g:6452:53: (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )*
            loop136:
            do {
                int alt136=2;
                alt136 = dfa136.predict(input);
                switch (alt136) {
            	case 1 :
            	    // Java.g:6452:55: TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression
            	    {
            	    TK_0=(Token)match(input,98,FOLLOW_98_in_conditionalAndExpression5113); if (state.failed) return retval;
            	    pushFollow(FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5117);
            	    inclusiveOrExpressionGen_1=inclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_inclusiveOrExpressionGen_1==null) list_inclusiveOrExpressionGen_1=new ArrayList();
            	    list_inclusiveOrExpressionGen_1.add(inclusiveOrExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node conditionalAndExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		conditionalAndExpressionReturnNode.setKind("conditionalAndExpression");
              	    // Create a CST Node
              		if(list_inclusiveOrExpressionGen != null) {
              	        for(Iterator it = list_inclusiveOrExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.inclusiveOrExpression_return r = (JavaParser.inclusiveOrExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("inclusiveOrExpression");
              	            	conditionalAndExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal inclusiveOrExpressionGen_1 aggregation
              		if(list_inclusiveOrExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_inclusiveOrExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		conditionalAndExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_inclusiveOrExpressionGen_1 != null) {		
              	    	JavaParser.inclusiveOrExpression_return r = (JavaParser.inclusiveOrExpression_return) list_inclusiveOrExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("inclusiveOrExpression");
              	    		conditionalAndExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = conditionalAndExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 103, conditionalAndExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "conditionalAndExpression"

    public static class inclusiveOrExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "inclusiveOrExpression"
    // Java.g:6496:1: inclusiveOrExpression returns [Node returnNode] : exclusiveOrExpressionGen+= exclusiveOrExpression (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )* ;
    public final JavaParser.inclusiveOrExpression_return inclusiveOrExpression() throws RecognitionException {
        JavaParser.inclusiveOrExpression_return retval = new JavaParser.inclusiveOrExpression_return();
        retval.start = input.LT(1);
        int inclusiveOrExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_exclusiveOrExpressionGen=null;
        List list_exclusiveOrExpressionGen_1=null;
        RuleReturnScope exclusiveOrExpressionGen = null;
        RuleReturnScope exclusiveOrExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 104) ) { return retval; }
            // Java.g:6497:1: (exclusiveOrExpressionGen+= exclusiveOrExpression (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )* )
            // Java.g:6497:5: exclusiveOrExpressionGen+= exclusiveOrExpression (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )*
            {
            pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5143);
            exclusiveOrExpressionGen=exclusiveOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_exclusiveOrExpressionGen==null) list_exclusiveOrExpressionGen=new ArrayList();
            list_exclusiveOrExpressionGen.add(exclusiveOrExpressionGen.getTemplate());

            // Java.g:6497:53: (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )*
            loop137:
            do {
                int alt137=2;
                alt137 = dfa137.predict(input);
                switch (alt137) {
            	case 1 :
            	    // Java.g:6497:55: TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression
            	    {
            	    TK_0=(Token)match(input,99,FOLLOW_99_in_inclusiveOrExpression5149); if (state.failed) return retval;
            	    pushFollow(FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5153);
            	    exclusiveOrExpressionGen_1=exclusiveOrExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_exclusiveOrExpressionGen_1==null) list_exclusiveOrExpressionGen_1=new ArrayList();
            	    list_exclusiveOrExpressionGen_1.add(exclusiveOrExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node inclusiveOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		inclusiveOrExpressionReturnNode.setKind("inclusiveOrExpression");
              	    // Create a CST Node
              		if(list_exclusiveOrExpressionGen != null) {
              	        for(Iterator it = list_exclusiveOrExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.exclusiveOrExpression_return r = (JavaParser.exclusiveOrExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("exclusiveOrExpression");
              	            	inclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal exclusiveOrExpressionGen_1 aggregation
              		if(list_exclusiveOrExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_exclusiveOrExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		inclusiveOrExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_exclusiveOrExpressionGen_1 != null) {		
              	    	JavaParser.exclusiveOrExpression_return r = (JavaParser.exclusiveOrExpression_return) list_exclusiveOrExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("exclusiveOrExpression");
              	    		inclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = inclusiveOrExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 104, inclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "inclusiveOrExpression"

    public static class exclusiveOrExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "exclusiveOrExpression"
    // Java.g:6541:1: exclusiveOrExpression returns [Node returnNode] : andExpressionGen+= andExpression (TK_0= '^' andExpressionGen_1+= andExpression )* ;
    public final JavaParser.exclusiveOrExpression_return exclusiveOrExpression() throws RecognitionException {
        JavaParser.exclusiveOrExpression_return retval = new JavaParser.exclusiveOrExpression_return();
        retval.start = input.LT(1);
        int exclusiveOrExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_andExpressionGen=null;
        List list_andExpressionGen_1=null;
        RuleReturnScope andExpressionGen = null;
        RuleReturnScope andExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 105) ) { return retval; }
            // Java.g:6542:1: (andExpressionGen+= andExpression (TK_0= '^' andExpressionGen_1+= andExpression )* )
            // Java.g:6542:5: andExpressionGen+= andExpression (TK_0= '^' andExpressionGen_1+= andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5179);
            andExpressionGen=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_andExpressionGen==null) list_andExpressionGen=new ArrayList();
            list_andExpressionGen.add(andExpressionGen.getTemplate());

            // Java.g:6542:37: (TK_0= '^' andExpressionGen_1+= andExpression )*
            loop138:
            do {
                int alt138=2;
                alt138 = dfa138.predict(input);
                switch (alt138) {
            	case 1 :
            	    // Java.g:6542:39: TK_0= '^' andExpressionGen_1+= andExpression
            	    {
            	    TK_0=(Token)match(input,100,FOLLOW_100_in_exclusiveOrExpression5185); if (state.failed) return retval;
            	    pushFollow(FOLLOW_andExpression_in_exclusiveOrExpression5189);
            	    andExpressionGen_1=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_andExpressionGen_1==null) list_andExpressionGen_1=new ArrayList();
            	    list_andExpressionGen_1.add(andExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop138;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node exclusiveOrExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		exclusiveOrExpressionReturnNode.setKind("exclusiveOrExpression");
              	    // Create a CST Node
              		if(list_andExpressionGen != null) {
              	        for(Iterator it = list_andExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.andExpression_return r = (JavaParser.andExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("andExpression");
              	            	exclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal andExpressionGen_1 aggregation
              		if(list_andExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_andExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		exclusiveOrExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_andExpressionGen_1 != null) {		
              	    	JavaParser.andExpression_return r = (JavaParser.andExpression_return) list_andExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("andExpression");
              	    		exclusiveOrExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = exclusiveOrExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 105, exclusiveOrExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "exclusiveOrExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "andExpression"
    // Java.g:6586:1: andExpression returns [Node returnNode] : equalityExpressionGen+= equalityExpression (TK_0= '&' equalityExpressionGen_1+= equalityExpression )* ;
    public final JavaParser.andExpression_return andExpression() throws RecognitionException {
        JavaParser.andExpression_return retval = new JavaParser.andExpression_return();
        retval.start = input.LT(1);
        int andExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_equalityExpressionGen=null;
        List list_equalityExpressionGen_1=null;
        RuleReturnScope equalityExpressionGen = null;
        RuleReturnScope equalityExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 106) ) { return retval; }
            // Java.g:6587:1: (equalityExpressionGen+= equalityExpression (TK_0= '&' equalityExpressionGen_1+= equalityExpression )* )
            // Java.g:6587:5: equalityExpressionGen+= equalityExpression (TK_0= '&' equalityExpressionGen_1+= equalityExpression )*
            {
            pushFollow(FOLLOW_equalityExpression_in_andExpression5215);
            equalityExpressionGen=equalityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_equalityExpressionGen==null) list_equalityExpressionGen=new ArrayList();
            list_equalityExpressionGen.add(equalityExpressionGen.getTemplate());

            // Java.g:6587:47: (TK_0= '&' equalityExpressionGen_1+= equalityExpression )*
            loop139:
            do {
                int alt139=2;
                alt139 = dfa139.predict(input);
                switch (alt139) {
            	case 1 :
            	    // Java.g:6587:49: TK_0= '&' equalityExpressionGen_1+= equalityExpression
            	    {
            	    TK_0=(Token)match(input,36,FOLLOW_36_in_andExpression5221); if (state.failed) return retval;
            	    pushFollow(FOLLOW_equalityExpression_in_andExpression5225);
            	    equalityExpressionGen_1=equalityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_equalityExpressionGen_1==null) list_equalityExpressionGen_1=new ArrayList();
            	    list_equalityExpressionGen_1.add(equalityExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node andExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		andExpressionReturnNode.setKind("andExpression");
              	    // Create a CST Node
              		if(list_equalityExpressionGen != null) {
              	        for(Iterator it = list_equalityExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.equalityExpression_return r = (JavaParser.equalityExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("equalityExpression");
              	            	andExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal equalityExpressionGen_1 aggregation
              		if(list_equalityExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_equalityExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		andExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_equalityExpressionGen_1 != null) {		
              	    	JavaParser.equalityExpression_return r = (JavaParser.equalityExpression_return) list_equalityExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("equalityExpression");
              	    		andExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = andExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 106, andExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class equalityExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "equalityExpression"
    // Java.g:6631:1: equalityExpression returns [Node returnNode] : instanceOfExpressionGen+= instanceOfExpression ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )* ;
    public final JavaParser.equalityExpression_return equalityExpression() throws RecognitionException {
        JavaParser.equalityExpression_return retval = new JavaParser.equalityExpression_return();
        retval.start = input.LT(1);
        int equalityExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_instanceOfExpressionGen=null;
        List list_instanceOfExpressionGen_1=null;
        RuleReturnScope instanceOfExpressionGen = null;
        RuleReturnScope instanceOfExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 107) ) { return retval; }
            // Java.g:6632:1: (instanceOfExpressionGen+= instanceOfExpression ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )* )
            // Java.g:6632:5: instanceOfExpressionGen+= instanceOfExpression ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )*
            {
            pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5251);
            instanceOfExpressionGen=instanceOfExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_instanceOfExpressionGen==null) list_instanceOfExpressionGen=new ArrayList();
            list_instanceOfExpressionGen.add(instanceOfExpressionGen.getTemplate());

            // Java.g:6632:51: ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )*
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    // Java.g:6632:53: (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression
            	    {
            	    // Java.g:6632:53: (TK_0= '==' | TK_1= '!=' )
            	    int alt140=2;
            	    int LA140_0 = input.LA(1);

            	    if ( (LA140_0==101) ) {
            	        alt140=1;
            	    }
            	    else if ( (LA140_0==102) ) {
            	        alt140=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 140, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt140) {
            	        case 1 :
            	            // Java.g:6632:54: TK_0= '=='
            	            {
            	            TK_0=(Token)match(input,101,FOLLOW_101_in_equalityExpression5258); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:6632:66: TK_1= '!='
            	            {
            	            TK_1=(Token)match(input,102,FOLLOW_102_in_equalityExpression5264); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_instanceOfExpression_in_equalityExpression5269);
            	    instanceOfExpressionGen_1=instanceOfExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_instanceOfExpressionGen_1==null) list_instanceOfExpressionGen_1=new ArrayList();
            	    list_instanceOfExpressionGen_1.add(instanceOfExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node equalityExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		equalityExpressionReturnNode.setKind("equalityExpression");
              	    // Create a CST Node
              		if(list_instanceOfExpressionGen != null) {
              	        for(Iterator it = list_instanceOfExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.instanceOfExpression_return r = (JavaParser.instanceOfExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("instanceOfExpression");
              	            	equalityExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal instanceOfExpressionGen_1 aggregation
              		if(list_instanceOfExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_instanceOfExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		equalityExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		equalityExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_instanceOfExpressionGen_1 != null) {		
              	    	JavaParser.instanceOfExpression_return r = (JavaParser.instanceOfExpression_return) list_instanceOfExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("instanceOfExpression");
              	    		equalityExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = equalityExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 107, equalityExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "equalityExpression"

    public static class instanceOfExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "instanceOfExpression"
    // Java.g:6685:1: instanceOfExpression returns [Node returnNode] : relationalExpressionGen+= relationalExpression (TK_0= 'instanceof' typeGen+= type )? ;
    public final JavaParser.instanceOfExpression_return instanceOfExpression() throws RecognitionException {
        JavaParser.instanceOfExpression_return retval = new JavaParser.instanceOfExpression_return();
        retval.start = input.LT(1);
        int instanceOfExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_relationalExpressionGen=null;
        List list_typeGen=null;
        RuleReturnScope relationalExpressionGen = null;
        RuleReturnScope typeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 108) ) { return retval; }
            // Java.g:6686:1: (relationalExpressionGen+= relationalExpression (TK_0= 'instanceof' typeGen+= type )? )
            // Java.g:6686:5: relationalExpressionGen+= relationalExpression (TK_0= 'instanceof' typeGen+= type )?
            {
            pushFollow(FOLLOW_relationalExpression_in_instanceOfExpression5295);
            relationalExpressionGen=relationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_relationalExpressionGen==null) list_relationalExpressionGen=new ArrayList();
            list_relationalExpressionGen.add(relationalExpressionGen.getTemplate());

            // Java.g:6686:51: (TK_0= 'instanceof' typeGen+= type )?
            int alt142=2;
            alt142 = dfa142.predict(input);
            switch (alt142) {
                case 1 :
                    // Java.g:6686:52: TK_0= 'instanceof' typeGen+= type
                    {
                    TK_0=(Token)match(input,103,FOLLOW_103_in_instanceOfExpression5300); if (state.failed) return retval;
                    pushFollow(FOLLOW_type_in_instanceOfExpression5304);
                    typeGen=type();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_typeGen==null) list_typeGen=new ArrayList();
                    list_typeGen.add(typeGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node instanceOfExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		instanceOfExpressionReturnNode.setKind("instanceOfExpression");
              	    // Create a CST Node
              		if(list_relationalExpressionGen != null) {
              	        for(Iterator it = list_relationalExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.relationalExpression_return r = (JavaParser.relationalExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("relationalExpression");
              	            	instanceOfExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		instanceOfExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeGen != null) {
              	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("type");
              	            	instanceOfExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = instanceOfExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 108, instanceOfExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "instanceOfExpression"

    public static class relationalExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "relationalExpression"
    // Java.g:6725:1: relationalExpression returns [Node returnNode] : shiftExpressionGen+= shiftExpression (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )* ;
    public final JavaParser.relationalExpression_return relationalExpression() throws RecognitionException {
        JavaParser.relationalExpression_return retval = new JavaParser.relationalExpression_return();
        retval.start = input.LT(1);
        int relationalExpression_StartIndex = input.index();
        List list_shiftExpressionGen=null;
        List list_relationalOpGen=null;
        List list_shiftExpressionGen_1=null;
        RuleReturnScope shiftExpressionGen = null;
        RuleReturnScope relationalOpGen = null;
        RuleReturnScope shiftExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 109) ) { return retval; }
            // Java.g:6726:1: (shiftExpressionGen+= shiftExpression (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )* )
            // Java.g:6726:5: shiftExpressionGen+= shiftExpression (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )*
            {
            pushFollow(FOLLOW_shiftExpression_in_relationalExpression5329);
            shiftExpressionGen=shiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_shiftExpressionGen==null) list_shiftExpressionGen=new ArrayList();
            list_shiftExpressionGen.add(shiftExpressionGen.getTemplate());

            // Java.g:6726:41: (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )*
            loop143:
            do {
                int alt143=2;
                alt143 = dfa143.predict(input);
                switch (alt143) {
            	case 1 :
            	    // Java.g:6726:43: relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression
            	    {
            	    pushFollow(FOLLOW_relationalOp_in_relationalExpression5335);
            	    relationalOpGen=relationalOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_relationalOpGen==null) list_relationalOpGen=new ArrayList();
            	    list_relationalOpGen.add(relationalOpGen.getTemplate());

            	    pushFollow(FOLLOW_shiftExpression_in_relationalExpression5339);
            	    shiftExpressionGen_1=shiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_shiftExpressionGen_1==null) list_shiftExpressionGen_1=new ArrayList();
            	    list_shiftExpressionGen_1.add(shiftExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node relationalExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		relationalExpressionReturnNode.setKind("relationalExpression");
              	    // Create a CST Node
              		if(list_shiftExpressionGen != null) {
              	        for(Iterator it = list_shiftExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.shiftExpression_return r = (JavaParser.shiftExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("shiftExpression");
              	            	relationalExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal relationalOpGen aggregation
              		if(list_relationalOpGen != null) {
              	    for(int pos = 0; pos < list_relationalOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_relationalOpGen != null) {		
              	    	JavaParser.relationalOp_return r = (JavaParser.relationalOp_return) list_relationalOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("relationalOp");
              	    		relationalExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_shiftExpressionGen_1 != null) {		
              	    	JavaParser.shiftExpression_return r = (JavaParser.shiftExpression_return) list_shiftExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("shiftExpression");
              	    		relationalExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = relationalExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 109, relationalExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalExpression"

    public static class relationalOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "relationalOp"
    // Java.g:6769:1: relationalOp returns [Node returnNode] : (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' ) ;
    public final JavaParser.relationalOp_return relationalOp() throws RecognitionException {
        JavaParser.relationalOp_return retval = new JavaParser.relationalOp_return();
        retval.start = input.LT(1);
        int relationalOp_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 110) ) { return retval; }
            // Java.g:6770:1: ( (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' ) )
            // Java.g:6770:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )
            {
            // Java.g:6770:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )
            int alt144=4;
            alt144 = dfa144.predict(input);
            switch (alt144) {
                case 1 :
                    // Java.g:6770:4: TK_0= '<' TK_1= '='
                    {
                    TK_0=(Token)match(input,33,FOLLOW_33_in_relationalOp5365); if (state.failed) return retval;
                    TK_1=(Token)match(input,44,FOLLOW_44_in_relationalOp5369); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // Java.g:6770:24: TK_2= '>' TK_3= '='
                    {
                    TK_2=(Token)match(input,35,FOLLOW_35_in_relationalOp5375); if (state.failed) return retval;
                    TK_3=(Token)match(input,44,FOLLOW_44_in_relationalOp5379); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // Java.g:6770:44: TK_4= '<'
                    {
                    TK_4=(Token)match(input,33,FOLLOW_33_in_relationalOp5385); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // Java.g:6770:55: TK_5= '>'
                    {
                    TK_5=(Token)match(input,35,FOLLOW_35_in_relationalOp5391); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node relationalOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		relationalOpReturnNode.setKind("relationalOp");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue((TK_4!=null?TK_4.getText():null));
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue((TK_5!=null?TK_5.getText():null));
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		relationalOpReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = relationalOpReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 110, relationalOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "relationalOp"

    public static class shiftExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "shiftExpression"
    // Java.g:6834:1: shiftExpression returns [Node returnNode] : additiveExpressionGen+= additiveExpression (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )* ;
    public final JavaParser.shiftExpression_return shiftExpression() throws RecognitionException {
        JavaParser.shiftExpression_return retval = new JavaParser.shiftExpression_return();
        retval.start = input.LT(1);
        int shiftExpression_StartIndex = input.index();
        List list_additiveExpressionGen=null;
        List list_shiftOpGen=null;
        List list_additiveExpressionGen_1=null;
        RuleReturnScope additiveExpressionGen = null;
        RuleReturnScope shiftOpGen = null;
        RuleReturnScope additiveExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 111) ) { return retval; }
            // Java.g:6835:1: (additiveExpressionGen+= additiveExpression (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )* )
            // Java.g:6835:5: additiveExpressionGen+= additiveExpression (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )*
            {
            pushFollow(FOLLOW_additiveExpression_in_shiftExpression5415);
            additiveExpressionGen=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_additiveExpressionGen==null) list_additiveExpressionGen=new ArrayList();
            list_additiveExpressionGen.add(additiveExpressionGen.getTemplate());

            // Java.g:6835:47: (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )*
            loop145:
            do {
                int alt145=2;
                alt145 = dfa145.predict(input);
                switch (alt145) {
            	case 1 :
            	    // Java.g:6835:49: shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression
            	    {
            	    pushFollow(FOLLOW_shiftOp_in_shiftExpression5421);
            	    shiftOpGen=shiftOp();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_shiftOpGen==null) list_shiftOpGen=new ArrayList();
            	    list_shiftOpGen.add(shiftOpGen.getTemplate());

            	    pushFollow(FOLLOW_additiveExpression_in_shiftExpression5425);
            	    additiveExpressionGen_1=additiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_additiveExpressionGen_1==null) list_additiveExpressionGen_1=new ArrayList();
            	    list_additiveExpressionGen_1.add(additiveExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node shiftExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		shiftExpressionReturnNode.setKind("shiftExpression");
              	    // Create a CST Node
              		if(list_additiveExpressionGen != null) {
              	        for(Iterator it = list_additiveExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.additiveExpression_return r = (JavaParser.additiveExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("additiveExpression");
              	            	shiftExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal shiftOpGen aggregation
              		if(list_shiftOpGen != null) {
              	    for(int pos = 0; pos < list_shiftOpGen.size(); pos++ )  { 
              		// No Terminal extractor
              	    if(list_shiftOpGen != null) {		
              	    	JavaParser.shiftOp_return r = (JavaParser.shiftOp_return) list_shiftOpGen.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("shiftOp");
              	    		shiftExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		// No Terminal extractor
              	    if(list_additiveExpressionGen_1 != null) {		
              	    	JavaParser.additiveExpression_return r = (JavaParser.additiveExpression_return) list_additiveExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("additiveExpression");
              	    		shiftExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = shiftExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 111, shiftExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftExpression"

    public static class shiftOp_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "shiftOp"
    // Java.g:6879:1: shiftOp returns [Node returnNode] : (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' ) ;
    public final JavaParser.shiftOp_return shiftOp() throws RecognitionException {
        JavaParser.shiftOp_return retval = new JavaParser.shiftOp_return();
        retval.start = input.LT(1);
        int shiftOp_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;

        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 112) ) { return retval; }
            // Java.g:6880:1: ( (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' ) )
            // Java.g:6880:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )
            {
            // Java.g:6880:3: (TK_0= '<' TK_1= '<' | TK_2= '>' TK_3= '>' TK_4= '>' | TK_5= '>' TK_6= '>' )
            int alt146=3;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==33) ) {
                alt146=1;
            }
            else if ( (LA146_0==35) ) {
                int LA146_2 = input.LA(2);

                if ( (LA146_2==35) ) {
                    int LA146_3 = input.LA(3);

                    if ( (synpred211_Java()) ) {
                        alt146=2;
                    }
                    else if ( (true) ) {
                        alt146=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 146, 3, input);

                        throw nvae;
                    }
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 146, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    // Java.g:6880:4: TK_0= '<' TK_1= '<'
                    {
                    TK_0=(Token)match(input,33,FOLLOW_33_in_shiftOp5459); if (state.failed) return retval;
                    TK_1=(Token)match(input,33,FOLLOW_33_in_shiftOp5463); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // Java.g:6880:24: TK_2= '>' TK_3= '>' TK_4= '>'
                    {
                    TK_2=(Token)match(input,35,FOLLOW_35_in_shiftOp5469); if (state.failed) return retval;
                    TK_3=(Token)match(input,35,FOLLOW_35_in_shiftOp5473); if (state.failed) return retval;
                    TK_4=(Token)match(input,35,FOLLOW_35_in_shiftOp5477); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // Java.g:6880:53: TK_5= '>' TK_6= '>'
                    {
                    TK_5=(Token)match(input,35,FOLLOW_35_in_shiftOp5483); if (state.failed) return retval;
                    TK_6=(Token)match(input,35,FOLLOW_35_in_shiftOp5487); if (state.failed) return retval;

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node shiftOpReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		shiftOpReturnNode.setKind("shiftOp");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue((TK_4!=null?TK_4.getText():null));
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_4Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue((TK_5!=null?TK_5.getText():null));
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue((TK_6!=null?TK_6.getText():null));
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		shiftOpReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = shiftOpReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 112, shiftOp_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "shiftOp"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "additiveExpression"
    // Java.g:6954:1: additiveExpression returns [Node returnNode] : multiplicativeExpressionGen+= multiplicativeExpression ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )* ;
    public final JavaParser.additiveExpression_return additiveExpression() throws RecognitionException {
        JavaParser.additiveExpression_return retval = new JavaParser.additiveExpression_return();
        retval.start = input.LT(1);
        int additiveExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_multiplicativeExpressionGen=null;
        List list_multiplicativeExpressionGen_1=null;
        RuleReturnScope multiplicativeExpressionGen = null;
        RuleReturnScope multiplicativeExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 113) ) { return retval; }
            // Java.g:6955:1: (multiplicativeExpressionGen+= multiplicativeExpression ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )* )
            // Java.g:6955:5: multiplicativeExpressionGen+= multiplicativeExpression ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )*
            {
            pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5512);
            multiplicativeExpressionGen=multiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_multiplicativeExpressionGen==null) list_multiplicativeExpressionGen=new ArrayList();
            list_multiplicativeExpressionGen.add(multiplicativeExpressionGen.getTemplate());

            // Java.g:6955:59: ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )*
            loop148:
            do {
                int alt148=2;
                alt148 = dfa148.predict(input);
                switch (alt148) {
            	case 1 :
            	    // Java.g:6955:61: (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression
            	    {
            	    // Java.g:6955:61: (TK_0= '+' | TK_1= '-' )
            	    int alt147=2;
            	    int LA147_0 = input.LA(1);

            	    if ( (LA147_0==104) ) {
            	        alt147=1;
            	    }
            	    else if ( (LA147_0==105) ) {
            	        alt147=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 147, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt147) {
            	        case 1 :
            	            // Java.g:6955:62: TK_0= '+'
            	            {
            	            TK_0=(Token)match(input,104,FOLLOW_104_in_additiveExpression5519); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:6955:73: TK_1= '-'
            	            {
            	            TK_1=(Token)match(input,105,FOLLOW_105_in_additiveExpression5525); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplicativeExpression_in_additiveExpression5530);
            	    multiplicativeExpressionGen_1=multiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_multiplicativeExpressionGen_1==null) list_multiplicativeExpressionGen_1=new ArrayList();
            	    list_multiplicativeExpressionGen_1.add(multiplicativeExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop148;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node additiveExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		additiveExpressionReturnNode.setKind("additiveExpression");
              	    // Create a CST Node
              		if(list_multiplicativeExpressionGen != null) {
              	        for(Iterator it = list_multiplicativeExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.multiplicativeExpression_return r = (JavaParser.multiplicativeExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("multiplicativeExpression");
              	            	additiveExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal multiplicativeExpressionGen_1 aggregation
              		if(list_multiplicativeExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_multiplicativeExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		additiveExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		additiveExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_multiplicativeExpressionGen_1 != null) {		
              	    	JavaParser.multiplicativeExpression_return r = (JavaParser.multiplicativeExpression_return) list_multiplicativeExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("multiplicativeExpression");
              	    		additiveExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = additiveExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 113, additiveExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplicativeExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "multiplicativeExpression"
    // Java.g:7008:1: multiplicativeExpression returns [Node returnNode] : unaryExpressionGen+= unaryExpression ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )* ;
    public final JavaParser.multiplicativeExpression_return multiplicativeExpression() throws RecognitionException {
        JavaParser.multiplicativeExpression_return retval = new JavaParser.multiplicativeExpression_return();
        retval.start = input.LT(1);
        int multiplicativeExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        List list_unaryExpressionGen=null;
        List list_unaryExpressionGen_1=null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope unaryExpressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 114) ) { return retval; }
            // Java.g:7009:1: (unaryExpressionGen+= unaryExpression ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )* )
            // Java.g:7009:5: unaryExpressionGen+= unaryExpression ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )*
            {
            pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5556);
            unaryExpressionGen=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
            list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

            // Java.g:7009:41: ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )*
            loop150:
            do {
                int alt150=2;
                alt150 = dfa150.predict(input);
                switch (alt150) {
            	case 1 :
            	    // Java.g:7009:43: (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression
            	    {
            	    // Java.g:7009:43: (TK_0= '*' | TK_1= '/' | TK_2= '%' )
            	    int alt149=3;
            	    switch ( input.LA(1) ) {
            	    case 29:
            	        {
            	        alt149=1;
            	        }
            	        break;
            	    case 106:
            	        {
            	        alt149=2;
            	        }
            	        break;
            	    case 107:
            	        {
            	        alt149=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 149, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt149) {
            	        case 1 :
            	            // Java.g:7009:45: TK_0= '*'
            	            {
            	            TK_0=(Token)match(input,29,FOLLOW_29_in_multiplicativeExpression5564); if (state.failed) return retval;

            	            }
            	            break;
            	        case 2 :
            	            // Java.g:7009:56: TK_1= '/'
            	            {
            	            TK_1=(Token)match(input,106,FOLLOW_106_in_multiplicativeExpression5570); if (state.failed) return retval;

            	            }
            	            break;
            	        case 3 :
            	            // Java.g:7009:67: TK_2= '%'
            	            {
            	            TK_2=(Token)match(input,107,FOLLOW_107_in_multiplicativeExpression5576); if (state.failed) return retval;

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplicativeExpression5582);
            	    unaryExpressionGen_1=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if (list_unaryExpressionGen_1==null) list_unaryExpressionGen_1=new ArrayList();
            	    list_unaryExpressionGen_1.add(unaryExpressionGen_1.getTemplate());


            	    }
            	    break;

            	default :
            	    break loop150;
                }
            } while (true);

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node multiplicativeExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		multiplicativeExpressionReturnNode.setKind("multiplicativeExpression");
              	    // Create a CST Node
              		if(list_unaryExpressionGen != null) {
              	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("unaryExpression");
              	            	multiplicativeExpressionReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }

              		// Create a special CST Node for terminal unaryExpressionGen_1 aggregation
              		if(list_unaryExpressionGen_1 != null) {
              	    for(int pos = 0; pos < list_unaryExpressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		multiplicativeExpressionReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		multiplicativeExpressionReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		multiplicativeExpressionReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_unaryExpressionGen_1 != null) {		
              	    	JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) list_unaryExpressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("unaryExpression");
              	    		multiplicativeExpressionReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              		}
              		}

              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = multiplicativeExpressionReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 114, multiplicativeExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "multiplicativeExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "unaryExpression"
    // Java.g:7071:1: unaryExpression returns [Node returnNode] : (TK_0= '+' unaryExpressionGen+= unaryExpression | TK_0= '-' unaryExpressionGen+= unaryExpression | TK_0= '++' unaryExpressionGen+= unaryExpression | TK_0= '--' unaryExpressionGen+= unaryExpression | unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );
    public final JavaParser.unaryExpression_return unaryExpression() throws RecognitionException {
        JavaParser.unaryExpression_return retval = new JavaParser.unaryExpression_return();
        retval.start = input.LT(1);
        int unaryExpression_StartIndex = input.index();
        Token TK_0=null;
        List list_unaryExpressionGen=null;
        List list_unaryExpressionNotPlusMinusGen=null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope unaryExpressionNotPlusMinusGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 115) ) { return retval; }
            // Java.g:7072:1: (TK_0= '+' unaryExpressionGen+= unaryExpression | TK_0= '-' unaryExpressionGen+= unaryExpression | TK_0= '++' unaryExpressionGen+= unaryExpression | TK_0= '--' unaryExpressionGen+= unaryExpression | unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus )
            int alt151=5;
            alt151 = dfa151.predict(input);
            switch (alt151) {
                case 1 :
                    // Java.g:7072:5: TK_0= '+' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,104,FOLLOW_104_in_unaryExpression5609); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5613);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:7099:7: TK_0= '-' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,105,FOLLOW_105_in_unaryExpression5627); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5631);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:7126:9: TK_0= '++' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,108,FOLLOW_108_in_unaryExpression5647); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5651);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:7153:9: TK_0= '--' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,109,FOLLOW_109_in_unaryExpression5667); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpression5671);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:7180:9: unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus
                    {
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5687);
                    unaryExpressionNotPlusMinusGen=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionNotPlusMinusGen==null) list_unaryExpressionNotPlusMinusGen=new ArrayList();
                    list_unaryExpressionNotPlusMinusGen.add(unaryExpressionNotPlusMinusGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionReturnNode.setKind("unaryExpression");
                      	    // Create a CST Node
                      		if(list_unaryExpressionNotPlusMinusGen != null) {
                      	        for(Iterator it = list_unaryExpressionNotPlusMinusGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpressionNotPlusMinus_return r = (JavaParser.unaryExpressionNotPlusMinus_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpressionNotPlusMinus");
                      	            	unaryExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 115, unaryExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class unaryExpressionNotPlusMinus_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "unaryExpressionNotPlusMinus"
    // Java.g:7200:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );
    public final JavaParser.unaryExpressionNotPlusMinus_return unaryExpressionNotPlusMinus() throws RecognitionException {
        JavaParser.unaryExpressionNotPlusMinus_return retval = new JavaParser.unaryExpressionNotPlusMinus_return();
        retval.start = input.LT(1);
        int unaryExpressionNotPlusMinus_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_unaryExpressionGen=null;
        List list_castExpressionGen=null;
        List list_primaryGen=null;
        List list_selectorGen=null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope castExpressionGen = null;
        RuleReturnScope primaryGen = null;
        RuleReturnScope selectorGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 116) ) { return retval; }
            // Java.g:7201:1: (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? )
            int alt154=4;
            alt154 = dfa154.predict(input);
            switch (alt154) {
                case 1 :
                    // Java.g:7201:5: TK_0= '~' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,110,FOLLOW_110_in_unaryExpressionNotPlusMinus5713); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5717);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:7228:8: TK_0= '!' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,111,FOLLOW_111_in_unaryExpressionNotPlusMinus5732); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5736);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:7255:9: castExpressionGen+= castExpression
                    {
                    pushFollow(FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5752);
                    castExpressionGen=castExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_castExpressionGen==null) list_castExpressionGen=new ArrayList();
                    list_castExpressionGen.add(castExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a CST Node
                      		if(list_castExpressionGen != null) {
                      	        for(Iterator it = list_castExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.castExpression_return r = (JavaParser.castExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("castExpression");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:7273:9: primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )?
                    {
                    pushFollow(FOLLOW_primary_in_unaryExpressionNotPlusMinus5768);
                    primaryGen=primary();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_primaryGen==null) list_primaryGen=new ArrayList();
                    list_primaryGen.add(primaryGen.getTemplate());

                    // Java.g:7273:40: (selectorGen+= selector )*
                    loop152:
                    do {
                        int alt152=2;
                        alt152 = dfa152.predict(input);
                        switch (alt152) {
                    	case 1 :
                    	    // Java.g:0:0: selectorGen+= selector
                    	    {
                    	    pushFollow(FOLLOW_selector_in_unaryExpressionNotPlusMinus5772);
                    	    selectorGen=selector();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_selectorGen==null) list_selectorGen=new ArrayList();
                    	    list_selectorGen.add(selectorGen.getTemplate());


                    	    }
                    	    break;

                    	default :
                    	    break loop152;
                        }
                    } while (true);

                    // Java.g:7273:52: (TK_0= '++' | TK_1= '--' )?
                    int alt153=3;
                    alt153 = dfa153.predict(input);
                    switch (alt153) {
                        case 1 :
                            // Java.g:7273:53: TK_0= '++'
                            {
                            TK_0=(Token)match(input,108,FOLLOW_108_in_unaryExpressionNotPlusMinus5778); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // Java.g:7273:63: TK_1= '--'
                            {
                            TK_1=(Token)match(input,109,FOLLOW_109_in_unaryExpressionNotPlusMinus5782); if (state.failed) return retval;

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node unaryExpressionNotPlusMinusReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		unaryExpressionNotPlusMinusReturnNode.setKind("unaryExpressionNotPlusMinus");
                      	    // Create a CST Node
                      		if(list_primaryGen != null) {
                      	        for(Iterator it = list_primaryGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primary_return r = (JavaParser.primary_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primary");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_selectorGen != null) {
                      	        for(Iterator it = list_selectorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.selector_return r = (JavaParser.selector_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("selector");
                      	            	unaryExpressionNotPlusMinusReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		unaryExpressionNotPlusMinusReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = unaryExpressionNotPlusMinusReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 116, unaryExpressionNotPlusMinus_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "unaryExpressionNotPlusMinus"

    public static class castExpression_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "castExpression"
    // Java.g:7321:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );
    public final JavaParser.castExpression_return castExpression() throws RecognitionException {
        JavaParser.castExpression_return retval = new JavaParser.castExpression_return();
        retval.start = input.LT(1);
        int castExpression_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_primitiveTypeGen=null;
        List list_unaryExpressionGen=null;
        List list_typeGen=null;
        List list_expressionGen=null;
        List list_unaryExpressionNotPlusMinusGen=null;
        RuleReturnScope primitiveTypeGen = null;
        RuleReturnScope unaryExpressionGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope unaryExpressionNotPlusMinusGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 117) ) { return retval; }
            // Java.g:7322:1: (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus )
            int alt156=2;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // Java.g:7322:4: TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression
                    {
                    TK_0=(Token)match(input,65,FOLLOW_65_in_castExpression5809); if (state.failed) return retval;
                    pushFollow(FOLLOW_primitiveType_in_castExpression5813);
                    primitiveTypeGen=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen.getTemplate());

                    TK_1=(Token)match(input,66,FOLLOW_66_in_castExpression5817); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpression_in_castExpression5821);
                    unaryExpressionGen=unaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
                    list_unaryExpressionGen.add(unaryExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node castExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		castExpressionReturnNode.setKind("castExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionGen != null) {
                      	        for(Iterator it = list_unaryExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpression_return r = (JavaParser.unaryExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpression");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = castExpressionReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:7368:8: TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus
                    {
                    TK_0=(Token)match(input,65,FOLLOW_65_in_castExpression5836); if (state.failed) return retval;
                    // Java.g:7368:17: (typeGen+= type | expressionGen+= expression )
                    int alt155=2;
                    alt155 = dfa155.predict(input);
                    switch (alt155) {
                        case 1 :
                            // Java.g:7368:18: typeGen+= type
                            {
                            pushFollow(FOLLOW_type_in_castExpression5841);
                            typeGen=type();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_typeGen==null) list_typeGen=new ArrayList();
                            list_typeGen.add(typeGen.getTemplate());


                            }
                            break;
                        case 2 :
                            // Java.g:7368:34: expressionGen+= expression
                            {
                            pushFollow(FOLLOW_expression_in_castExpression5847);
                            expressionGen=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_expressionGen==null) list_expressionGen=new ArrayList();
                            list_expressionGen.add(expressionGen.getTemplate());


                            }
                            break;

                    }

                    TK_1=(Token)match(input,66,FOLLOW_66_in_castExpression5852); if (state.failed) return retval;
                    pushFollow(FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5856);
                    unaryExpressionNotPlusMinusGen=unaryExpressionNotPlusMinus();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_unaryExpressionNotPlusMinusGen==null) list_unaryExpressionNotPlusMinusGen=new ArrayList();
                    list_unaryExpressionNotPlusMinusGen.add(unaryExpressionNotPlusMinusGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node castExpressionReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		castExpressionReturnNode.setKind("castExpression");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_typeGen != null) {
                      	        for(Iterator it = list_typeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.type_return r = (JavaParser.type_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("type");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		castExpressionReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_unaryExpressionNotPlusMinusGen != null) {
                      	        for(Iterator it = list_unaryExpressionNotPlusMinusGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.unaryExpressionNotPlusMinus_return r = (JavaParser.unaryExpressionNotPlusMinus_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("unaryExpressionNotPlusMinus");
                      	            	castExpressionReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = castExpressionReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 117, castExpression_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "castExpression"

    public static class primary_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "primary"
    // Java.g:7426:1: primary returns [Node returnNode] : (parExpressionGen+= parExpression | nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments ) | TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | TK_0= 'super' superSuffixGen+= superSuffix | literalGen+= literal | TK_0= 'new' creatorGen+= creator | IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class' | TK_0= 'void' TK_1= '.' TK_2= 'class' );
    public final JavaParser.primary_return primary() throws RecognitionException {
        JavaParser.primary_return retval = new JavaParser.primary_return();
        retval.start = input.LT(1);
        int primary_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token IdentifierGen=null;
        Token TK_2=null;
        Token TK_3=null;
        Token IdentifierGen_List=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_List=null;
        List list_IdentifierGen_1_List=null;
        List list_parExpressionGen=null;
        List list_nonWildcardTypeArgumentsGen=null;
        List list_explicitGenericInvocationSuffixGen=null;
        List list_argumentsGen=null;
        List list_identifierSuffixGen=null;
        List list_superSuffixGen=null;
        List list_literalGen=null;
        List list_creatorGen=null;
        List list_primitiveTypeGen=null;
        RuleReturnScope parExpressionGen = null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope explicitGenericInvocationSuffixGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope identifierSuffixGen = null;
        RuleReturnScope superSuffixGen = null;
        RuleReturnScope literalGen = null;
        RuleReturnScope creatorGen = null;
        RuleReturnScope primitiveTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 118) ) { return retval; }
            // Java.g:7427:1: (parExpressionGen+= parExpression | nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments ) | TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | TK_0= 'super' superSuffixGen+= superSuffix | literalGen+= literal | TK_0= 'new' creatorGen+= creator | IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class' | TK_0= 'void' TK_1= '.' TK_2= 'class' )
            int alt163=9;
            alt163 = dfa163.predict(input);
            switch (alt163) {
                case 1 :
                    // Java.g:7427:3: parExpressionGen+= parExpression
                    {
                    pushFollow(FOLLOW_parExpression_in_primary5880);
                    parExpressionGen=parExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_parExpressionGen==null) list_parExpressionGen=new ArrayList();
                    list_parExpressionGen.add(parExpressionGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_parExpressionGen != null) {
                      	        for(Iterator it = list_parExpressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.parExpression_return r = (JavaParser.parExpression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("parExpression");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:7445:9: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments )
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_primary5896);
                    nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                    list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen.getTemplate());

                    // Java.g:7446:9: (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments )
                    int alt157=2;
                    int LA157_0 = input.LA(1);

                    if ( (LA157_0==Identifier||LA157_0==64) ) {
                        alt157=1;
                    }
                    else if ( (LA157_0==112) ) {
                        alt157=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 157, 0, input);

                        throw nvae;
                    }
                    switch (alt157) {
                        case 1 :
                            // Java.g:7446:10: explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix
                            {
                            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_primary5909);
                            explicitGenericInvocationSuffixGen=explicitGenericInvocationSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_explicitGenericInvocationSuffixGen==null) list_explicitGenericInvocationSuffixGen=new ArrayList();
                            list_explicitGenericInvocationSuffixGen.add(explicitGenericInvocationSuffixGen.getTemplate());


                            }
                            break;
                        case 2 :
                            // Java.g:7446:80: TK_0= 'this' argumentsGen+= arguments
                            {
                            TK_0=(Token)match(input,112,FOLLOW_112_in_primary5915); if (state.failed) return retval;
                            pushFollow(FOLLOW_arguments_in_primary5919);
                            argumentsGen=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                            list_argumentsGen.add(argumentsGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_nonWildcardTypeArgumentsGen != null) {
                      	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nonWildcardTypeArguments");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_explicitGenericInvocationSuffixGen != null) {
                      	        for(Iterator it = list_explicitGenericInvocationSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.explicitGenericInvocationSuffix_return r = (JavaParser.explicitGenericInvocationSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("explicitGenericInvocationSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:7493:9: TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )?
                    {
                    TK_0=(Token)match(input,112,FOLLOW_112_in_primary5936); if (state.failed) return retval;
                    // Java.g:7493:21: (TK_1= '.' IdentifierGen_List+= Identifier )*
                    loop158:
                    do {
                        int alt158=2;
                        alt158 = dfa158.predict(input);
                        switch (alt158) {
                    	case 1 :
                    	    // Java.g:7493:22: TK_1= '.' IdentifierGen_List+= Identifier
                    	    {
                    	    TK_1=(Token)match(input,28,FOLLOW_28_in_primary5941); if (state.failed) return retval;
                    	    IdentifierGen_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary5945); if (state.failed) return retval;
                    	    if (list_IdentifierGen_List==null) list_IdentifierGen_List=new ArrayList();
                    	    list_IdentifierGen_List.add(IdentifierGen_List);


                    	    }
                    	    break;

                    	default :
                    	    break loop158;
                        }
                    } while (true);

                    // Java.g:7493:64: (identifierSuffixGen+= identifierSuffix )?
                    int alt159=2;
                    alt159 = dfa159.predict(input);
                    switch (alt159) {
                        case 1 :
                            // Java.g:7493:65: identifierSuffixGen+= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary5952);
                            identifierSuffixGen=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_identifierSuffixGen==null) list_identifierSuffixGen=new ArrayList();
                            list_identifierSuffixGen.add(identifierSuffixGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}

                      		// Create a special CST Node for terminal IdentifierGen_List aggregation
                      		if(list_IdentifierGen_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_List != null) {
                      		    Token t = (Token) list_IdentifierGen_List.get(pos); 
                      		    Leaf IdentifierGen_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_ListLeaf.setKind("Identifier");
                      			IdentifierGen_ListLeaf.setValue(t.getText());
                      			IdentifierGen_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_ListLeaf.setLine(t.getLine());
                      			primaryReturnNode.getChildren().add(IdentifierGen_ListLeaf);
                      		}
                      		}
                      		}

                      	    // Create a CST Node
                      		if(list_identifierSuffixGen != null) {
                      	        for(Iterator it = list_identifierSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.identifierSuffix_return r = (JavaParser.identifierSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifierSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:7546:9: TK_0= 'super' superSuffixGen+= superSuffix
                    {
                    TK_0=(Token)match(input,64,FOLLOW_64_in_primary5970); if (state.failed) return retval;
                    pushFollow(FOLLOW_superSuffix_in_primary5974);
                    superSuffixGen=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_superSuffixGen==null) list_superSuffixGen=new ArrayList();
                    list_superSuffixGen.add(superSuffixGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_superSuffixGen != null) {
                      	        for(Iterator it = list_superSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("superSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:7573:9: literalGen+= literal
                    {
                    pushFollow(FOLLOW_literal_in_primary5990);
                    literalGen=literal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_literalGen==null) list_literalGen=new ArrayList();
                    list_literalGen.add(literalGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_literalGen != null) {
                      	        for(Iterator it = list_literalGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.literal_return r = (JavaParser.literal_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("literal");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:7591:9: TK_0= 'new' creatorGen+= creator
                    {
                    TK_0=(Token)match(input,113,FOLLOW_113_in_primary6006); if (state.failed) return retval;
                    pushFollow(FOLLOW_creator_in_primary6010);
                    creatorGen=creator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_creatorGen==null) list_creatorGen=new ArrayList();
                    list_creatorGen.add(creatorGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_creatorGen != null) {
                      	        for(Iterator it = list_creatorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.creator_return r = (JavaParser.creator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("creator");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:7618:9: IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )?
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary6026); if (state.failed) return retval;
                    // Java.g:7618:34: (TK_0= '.' IdentifierGen_1_List+= Identifier )*
                    loop160:
                    do {
                        int alt160=2;
                        alt160 = dfa160.predict(input);
                        switch (alt160) {
                    	case 1 :
                    	    // Java.g:7618:35: TK_0= '.' IdentifierGen_1_List+= Identifier
                    	    {
                    	    TK_0=(Token)match(input,28,FOLLOW_28_in_primary6031); if (state.failed) return retval;
                    	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_primary6035); if (state.failed) return retval;
                    	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
                    	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);


                    	    }
                    	    break;

                    	default :
                    	    break loop160;
                        }
                    } while (true);

                    // Java.g:7618:79: (identifierSuffixGen+= identifierSuffix )?
                    int alt161=2;
                    alt161 = dfa161.predict(input);
                    switch (alt161) {
                        case 1 :
                            // Java.g:7618:80: identifierSuffixGen+= identifierSuffix
                            {
                            pushFollow(FOLLOW_identifierSuffix_in_primary6042);
                            identifierSuffixGen=identifierSuffix();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_identifierSuffixGen==null) list_identifierSuffixGen=new ArrayList();
                            list_identifierSuffixGen.add(identifierSuffixGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			primaryReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}

                      		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
                      		if(list_IdentifierGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_1_List != null) {
                      		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
                      		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_1_ListLeaf.setKind("Identifier");
                      			IdentifierGen_1_ListLeaf.setValue(t.getText());
                      			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_1_ListLeaf.setLine(t.getLine());
                      			primaryReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
                      		}
                      		}
                      		}

                      	    // Create a CST Node
                      		if(list_identifierSuffixGen != null) {
                      	        for(Iterator it = list_identifierSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.identifierSuffix_return r = (JavaParser.identifierSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("identifierSuffix");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // Java.g:7671:9: primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class'
                    {
                    pushFollow(FOLLOW_primitiveType_in_primary6060);
                    primitiveTypeGen=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen.getTemplate());

                    // Java.g:7671:41: (TK_0= '[' TK_1= ']' )*
                    loop162:
                    do {
                        int alt162=2;
                        int LA162_0 = input.LA(1);

                        if ( (LA162_0==41) ) {
                            alt162=1;
                        }


                        switch (alt162) {
                    	case 1 :
                    	    // Java.g:7671:42: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)match(input,41,FOLLOW_41_in_primary6065); if (state.failed) return retval;
                    	    TK_1=(Token)match(input,42,FOLLOW_42_in_primary6069); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop162;
                        }
                    } while (true);

                    TK_2=(Token)match(input,28,FOLLOW_28_in_primary6075); if (state.failed) return retval;
                    TK_3=(Token)match(input,30,FOLLOW_30_in_primary6079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	primaryReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;
                case 9 :
                    // Java.g:7725:9: TK_0= 'void' TK_1= '.' TK_2= 'class'
                    {
                    TK_0=(Token)match(input,40,FOLLOW_40_in_primary6095); if (state.failed) return retval;
                    TK_1=(Token)match(input,28,FOLLOW_28_in_primary6099); if (state.failed) return retval;
                    TK_2=(Token)match(input,30,FOLLOW_30_in_primary6103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node primaryReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		primaryReturnNode.setKind("primary");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		primaryReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = primaryReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 118, primary_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "primary"

    public static class identifierSuffix_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "identifierSuffix"
    // Java.g:7762:1: identifierSuffix returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator );
    public final JavaParser.identifierSuffix_return identifierSuffix() throws RecognitionException {
        JavaParser.identifierSuffix_return retval = new JavaParser.identifierSuffix_return();
        retval.start = input.LT(1);
        int identifierSuffix_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        List list_expressionGen=null;
        List list_argumentsGen=null;
        List list_explicitGenericInvocationGen=null;
        List list_nonWildcardTypeArgumentsGen=null;
        List list_innerCreatorGen=null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope explicitGenericInvocationGen = null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope innerCreatorGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 119) ) { return retval; }
            // Java.g:7763:1: ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator )
            int alt167=8;
            alt167 = dfa167.predict(input);
            switch (alt167) {
                case 1 :
                    // Java.g:7763:3: (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class'
                    {
                    // Java.g:7763:3: (TK_0= '[' TK_1= ']' )+
                    int cnt164=0;
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==41) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // Java.g:7763:4: TK_0= '[' TK_1= ']'
                    	    {
                    	    TK_0=(Token)match(input,41,FOLLOW_41_in_identifierSuffix6125); if (state.failed) return retval;
                    	    TK_1=(Token)match(input,42,FOLLOW_42_in_identifierSuffix6129); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt164 >= 1 ) break loop164;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(164, input);
                                throw eee;
                        }
                        cnt164++;
                    } while (true);

                    TK_2=(Token)match(input,28,FOLLOW_28_in_identifierSuffix6135); if (state.failed) return retval;
                    TK_3=(Token)match(input,30,FOLLOW_30_in_identifierSuffix6139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_2 != null) {
                      			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_2Leaf.setKind("TOKEN");
                      	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
                      			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
                      			TK_2Leaf.setLine(TK_2.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_2Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_3 != null) {
                      			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_3Leaf.setKind("TOKEN");
                      	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
                      			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
                      			TK_3Leaf.setLine(TK_3.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_3Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:7807:4: (TK_0= '[' expressionGen+= expression TK_1= ']' )+
                    {
                    // Java.g:7807:4: (TK_0= '[' expressionGen+= expression TK_1= ']' )+
                    int cnt165=0;
                    loop165:
                    do {
                        int alt165=2;
                        alt165 = dfa165.predict(input);
                        switch (alt165) {
                    	case 1 :
                    	    // Java.g:7807:5: TK_0= '[' expressionGen+= expression TK_1= ']'
                    	    {
                    	    TK_0=(Token)match(input,41,FOLLOW_41_in_identifierSuffix6151); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_identifierSuffix6155);
                    	    expressionGen=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    	    list_expressionGen.add(expressionGen.getTemplate());

                    	    TK_1=(Token)match(input,42,FOLLOW_42_in_identifierSuffix6159); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt165 >= 1 ) break loop165;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(165, input);
                                throw eee;
                        }
                        cnt165++;
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");

                      		// Create a special CST Node for terminal expressionGen aggregation
                      		if(list_expressionGen != null) {
                      	    for(int pos = 0; pos < list_expressionGen.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// No Terminal extractor
                      	    if(list_expressionGen != null) {		
                      	    	JavaParser.expression_return r = (JavaParser.expression_return) list_expressionGen.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("expression");
                      	    		identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		}
                      		}

                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:7848:9: argumentsGen+= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_identifierSuffix6178);
                    argumentsGen=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:7866:9: TK_0= '.' TK_1= 'class'
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_identifierSuffix6194); if (state.failed) return retval;
                    TK_1=(Token)match(input,30,FOLLOW_30_in_identifierSuffix6198); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:7892:9: TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_identifierSuffix6214); if (state.failed) return retval;
                    pushFollow(FOLLOW_explicitGenericInvocation_in_identifierSuffix6218);
                    explicitGenericInvocationGen=explicitGenericInvocation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_explicitGenericInvocationGen==null) list_explicitGenericInvocationGen=new ArrayList();
                    list_explicitGenericInvocationGen.add(explicitGenericInvocationGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_explicitGenericInvocationGen != null) {
                      	        for(Iterator it = list_explicitGenericInvocationGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.explicitGenericInvocation_return r = (JavaParser.explicitGenericInvocation_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("explicitGenericInvocation");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 6 :
                    // Java.g:7919:9: TK_0= '.' TK_1= 'this'
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_identifierSuffix6234); if (state.failed) return retval;
                    TK_1=(Token)match(input,112,FOLLOW_112_in_identifierSuffix6238); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 7 :
                    // Java.g:7945:9: TK_0= '.' TK_1= 'super' argumentsGen+= arguments
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_identifierSuffix6254); if (state.failed) return retval;
                    TK_1=(Token)match(input,64,FOLLOW_64_in_identifierSuffix6258); if (state.failed) return retval;
                    pushFollow(FOLLOW_arguments_in_identifierSuffix6262);
                    argumentsGen=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 8 :
                    // Java.g:7981:9: TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_identifierSuffix6278); if (state.failed) return retval;
                    TK_1=(Token)match(input,113,FOLLOW_113_in_identifierSuffix6282); if (state.failed) return retval;
                    // Java.g:7981:29: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?
                    int alt166=2;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==33) ) {
                        alt166=1;
                    }
                    switch (alt166) {
                        case 1 :
                            // Java.g:7981:30: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_identifierSuffix6287);
                            nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                            list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen.getTemplate());


                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_identifierSuffix6293);
                    innerCreatorGen=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_innerCreatorGen==null) list_innerCreatorGen=new ArrayList();
                    list_innerCreatorGen.add(innerCreatorGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node identifierSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		identifierSuffixReturnNode.setKind("identifierSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		identifierSuffixReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_nonWildcardTypeArgumentsGen != null) {
                      	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nonWildcardTypeArguments");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_innerCreatorGen != null) {
                      	        for(Iterator it = list_innerCreatorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.innerCreator_return r = (JavaParser.innerCreator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("innerCreator");
                      	            	identifierSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = identifierSuffixReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 119, identifierSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "identifierSuffix"

    public static class creator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "creator"
    // Java.g:8029:1: creator returns [Node returnNode] : (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? createdNameGen+= createdName (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest ) ;
    public final JavaParser.creator_return creator() throws RecognitionException {
        JavaParser.creator_return retval = new JavaParser.creator_return();
        retval.start = input.LT(1);
        int creator_StartIndex = input.index();
        List list_nonWildcardTypeArgumentsGen=null;
        List list_createdNameGen=null;
        List list_arrayCreatorRestGen=null;
        List list_classCreatorRestGen=null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope createdNameGen = null;
        RuleReturnScope arrayCreatorRestGen = null;
        RuleReturnScope classCreatorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 120) ) { return retval; }
            // Java.g:8030:1: ( (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? createdNameGen+= createdName (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest ) )
            // Java.g:8030:3: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? createdNameGen+= createdName (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest )
            {
            // Java.g:8030:30: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?
            int alt168=2;
            alt168 = dfa168.predict(input);
            switch (alt168) {
                case 1 :
                    // Java.g:0:0: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments
                    {
                    pushFollow(FOLLOW_nonWildcardTypeArguments_in_creator6315);
                    nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                    list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen.getTemplate());


                    }
                    break;

            }

            pushFollow(FOLLOW_createdName_in_creator6320);
            createdNameGen=createdName();

            state._fsp--;
            if (state.failed) return retval;
            if (list_createdNameGen==null) list_createdNameGen=new ArrayList();
            list_createdNameGen.add(createdNameGen.getTemplate());

            // Java.g:8031:9: (arrayCreatorRestGen+= arrayCreatorRest | classCreatorRestGen+= classCreatorRest )
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==41) ) {
                alt169=1;
            }
            else if ( (LA169_0==65) ) {
                alt169=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 169, 0, input);

                throw nvae;
            }
            switch (alt169) {
                case 1 :
                    // Java.g:8031:10: arrayCreatorRestGen+= arrayCreatorRest
                    {
                    pushFollow(FOLLOW_arrayCreatorRest_in_creator6333);
                    arrayCreatorRestGen=arrayCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_arrayCreatorRestGen==null) list_arrayCreatorRestGen=new ArrayList();
                    list_arrayCreatorRestGen.add(arrayCreatorRestGen.getTemplate());


                    }
                    break;
                case 2 :
                    // Java.g:8031:50: classCreatorRestGen+= classCreatorRest
                    {
                    pushFollow(FOLLOW_classCreatorRest_in_creator6339);
                    classCreatorRestGen=classCreatorRest();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classCreatorRestGen==null) list_classCreatorRestGen=new ArrayList();
                    list_classCreatorRestGen.add(classCreatorRestGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node creatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		creatorReturnNode.setKind("creator");
              	    // Create a CST Node
              		if(list_nonWildcardTypeArgumentsGen != null) {
              	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nonWildcardTypeArguments");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_createdNameGen != null) {
              	        for(Iterator it = list_createdNameGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.createdName_return r = (JavaParser.createdName_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("createdName");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_arrayCreatorRestGen != null) {
              	        for(Iterator it = list_arrayCreatorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arrayCreatorRest_return r = (JavaParser.arrayCreatorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arrayCreatorRest");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classCreatorRestGen != null) {
              	        for(Iterator it = list_classCreatorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classCreatorRest_return r = (JavaParser.classCreatorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classCreatorRest");
              	            	creatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = creatorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 120, creator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "creator"

    public static class createdName_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "createdName"
    // Java.g:8081:1: createdName returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* | primitiveTypeGen+= primitiveType );
    public final JavaParser.createdName_return createdName() throws RecognitionException {
        JavaParser.createdName_return retval = new JavaParser.createdName_return();
        retval.start = input.LT(1);
        int createdName_StartIndex = input.index();
        Token IdentifierGen=null;
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;
        List list_typeArgumentsGen=null;
        List list_typeArgumentsGen_1=null;
        List list_primitiveTypeGen=null;
        RuleReturnScope typeArgumentsGen = null;
        RuleReturnScope typeArgumentsGen_1 = null;
        RuleReturnScope primitiveTypeGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 121) ) { return retval; }
            // Java.g:8082:1: (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* | primitiveTypeGen+= primitiveType )
            int alt173=2;
            alt173 = dfa173.predict(input);
            switch (alt173) {
                case 1 :
                    // Java.g:8082:3: IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_createdName6361); if (state.failed) return retval;
                    // Java.g:8082:44: (typeArgumentsGen+= typeArguments )?
                    int alt170=2;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==33) ) {
                        alt170=1;
                    }
                    switch (alt170) {
                        case 1 :
                            // Java.g:0:0: typeArgumentsGen+= typeArguments
                            {
                            pushFollow(FOLLOW_typeArguments_in_createdName6365);
                            typeArgumentsGen=typeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_typeArgumentsGen==null) list_typeArgumentsGen=new ArrayList();
                            list_typeArgumentsGen.add(typeArgumentsGen.getTemplate());


                            }
                            break;

                    }

                    // Java.g:8083:9: (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==28) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // Java.g:8083:10: TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )?
                    	    {
                    	    TK_0=(Token)match(input,28,FOLLOW_28_in_createdName6379); if (state.failed) return retval;
                    	    IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_createdName6383); if (state.failed) return retval;
                    	    if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
                    	    list_IdentifierGen_1_List.add(IdentifierGen_1_List);

                    	    // Java.g:8083:70: (typeArgumentsGen_1+= typeArguments )?
                    	    int alt171=2;
                    	    int LA171_0 = input.LA(1);

                    	    if ( (LA171_0==33) ) {
                    	        alt171=1;
                    	    }
                    	    switch (alt171) {
                    	        case 1 :
                    	            // Java.g:0:0: typeArgumentsGen_1+= typeArguments
                    	            {
                    	            pushFollow(FOLLOW_typeArguments_in_createdName6387);
                    	            typeArgumentsGen_1=typeArguments();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if (list_typeArgumentsGen_1==null) list_typeArgumentsGen_1=new ArrayList();
                    	            list_typeArgumentsGen_1.add(typeArgumentsGen_1.getTemplate());


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node createdNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		createdNameReturnNode.setKind("createdName");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			createdNameReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_typeArgumentsGen != null) {
                      	        for(Iterator it = list_typeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("typeArguments");
                      	            	createdNameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }

                      		// Create a special CST Node for terminal IdentifierGen_1_List aggregation
                      		if(list_IdentifierGen_1_List != null) {
                      	    for(int pos = 0; pos < list_IdentifierGen_1_List.size(); pos++ )  { 
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		createdNameReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      		// Terminal extractor
                      	    if(list_IdentifierGen_1_List != null) {
                      		    Token t = (Token) list_IdentifierGen_1_List.get(pos); 
                      		    Leaf IdentifierGen_1_ListLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGen_1_ListLeaf.setKind("Identifier");
                      			IdentifierGen_1_ListLeaf.setValue(t.getText());
                      			IdentifierGen_1_ListLeaf.setPos(t.getCharPositionInLine());
                      			IdentifierGen_1_ListLeaf.setLine(t.getLine());
                      			createdNameReturnNode.getChildren().add(IdentifierGen_1_ListLeaf);
                      		}
                      		// No Terminal extractor
                      	    if(list_typeArgumentsGen_1 != null) {		
                      	    	JavaParser.typeArguments_return r = (JavaParser.typeArguments_return) list_typeArgumentsGen_1.get(pos); 
                      	    	if(r != null && r.returnNode != null) {
                      	        	r.returnNode.setKind("typeArguments");
                      	    		createdNameReturnNode.getChildren().add(r.returnNode);
                      	    	} 
                      		}
                      		}
                      		}

                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = createdNameReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:8144:7: primitiveTypeGen+= primitiveType
                    {
                    pushFollow(FOLLOW_primitiveType_in_createdName6404);
                    primitiveTypeGen=primitiveType();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
                    list_primitiveTypeGen.add(primitiveTypeGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node createdNameReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		createdNameReturnNode.setKind("createdName");
                      	    // Create a CST Node
                      		if(list_primitiveTypeGen != null) {
                      	        for(Iterator it = list_primitiveTypeGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.primitiveType_return r = (JavaParser.primitiveType_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("primitiveType");
                      	            	createdNameReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = createdNameReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 121, createdName_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "createdName"

    public static class innerCreator_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "innerCreator"
    // Java.g:8164:1: innerCreator returns [Node returnNode] : IdentifierGen= Identifier classCreatorRestGen+= classCreatorRest ;
    public final JavaParser.innerCreator_return innerCreator() throws RecognitionException {
        JavaParser.innerCreator_return retval = new JavaParser.innerCreator_return();
        retval.start = input.LT(1);
        int innerCreator_StartIndex = input.index();
        Token IdentifierGen=null;
        List list_classCreatorRestGen=null;
        RuleReturnScope classCreatorRestGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 122) ) { return retval; }
            // Java.g:8165:1: (IdentifierGen= Identifier classCreatorRestGen+= classCreatorRest )
            // Java.g:8165:3: IdentifierGen= Identifier classCreatorRestGen+= classCreatorRest
            {
            IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_innerCreator6426); if (state.failed) return retval;
            pushFollow(FOLLOW_classCreatorRest_in_innerCreator6430);
            classCreatorRestGen=classCreatorRest();

            state._fsp--;
            if (state.failed) return retval;
            if (list_classCreatorRestGen==null) list_classCreatorRestGen=new ArrayList();
            list_classCreatorRestGen.add(classCreatorRestGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node innerCreatorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		innerCreatorReturnNode.setKind("innerCreator");
              	    // Create a CST Leaf
              		if(IdentifierGen != null) {
              			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              			IdentifierGenLeaf.setKind("Identifier");
              			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
              			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
              			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
              			innerCreatorReturnNode.getChildren().add(IdentifierGenLeaf);
              		}
              	    // Create a CST Node
              		if(list_classCreatorRestGen != null) {
              	        for(Iterator it = list_classCreatorRestGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classCreatorRest_return r = (JavaParser.classCreatorRest_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classCreatorRest");
              	            	innerCreatorReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = innerCreatorReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 122, innerCreator_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "innerCreator"

    public static class arrayCreatorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "arrayCreatorRest"
    // Java.g:8194:1: arrayCreatorRest returns [Node returnNode] : TK_0= '[' (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* ) ;
    public final JavaParser.arrayCreatorRest_return arrayCreatorRest() throws RecognitionException {
        JavaParser.arrayCreatorRest_return retval = new JavaParser.arrayCreatorRest_return();
        retval.start = input.LT(1);
        int arrayCreatorRest_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;
        Token TK_5=null;
        Token TK_6=null;
        Token TK_7=null;
        Token TK_8=null;
        List list_arrayInitializerGen=null;
        List list_expressionGen=null;
        List list_expressionGen_1=null;
        RuleReturnScope arrayInitializerGen = null;
        RuleReturnScope expressionGen = null;
        RuleReturnScope expressionGen_1 = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 123) ) { return retval; }
            // Java.g:8195:1: (TK_0= '[' (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* ) )
            // Java.g:8195:3: TK_0= '[' (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* )
            {
            TK_0=(Token)match(input,41,FOLLOW_41_in_arrayCreatorRest6451); if (state.failed) return retval;
            // Java.g:8196:9: (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* )
            int alt177=2;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // Java.g:8196:13: TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer
                    {
                    TK_1=(Token)match(input,42,FOLLOW_42_in_arrayCreatorRest6467); if (state.failed) return retval;
                    // Java.g:8196:22: (TK_2= '[' TK_3= ']' )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==41) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // Java.g:8196:23: TK_2= '[' TK_3= ']'
                    	    {
                    	    TK_2=(Token)match(input,41,FOLLOW_41_in_arrayCreatorRest6472); if (state.failed) return retval;
                    	    TK_3=(Token)match(input,42,FOLLOW_42_in_arrayCreatorRest6476); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);

                    pushFollow(FOLLOW_arrayInitializer_in_arrayCreatorRest6482);
                    arrayInitializerGen=arrayInitializer();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_arrayInitializerGen==null) list_arrayInitializerGen=new ArrayList();
                    list_arrayInitializerGen.add(arrayInitializerGen.getTemplate());


                    }
                    break;
                case 2 :
                    // Java.g:8197:13: expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayCreatorRest6498);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());

                    TK_4=(Token)match(input,42,FOLLOW_42_in_arrayCreatorRest6502); if (state.failed) return retval;
                    // Java.g:8197:48: (TK_5= '[' expressionGen_1+= expression TK_6= ']' )*
                    loop175:
                    do {
                        int alt175=2;
                        alt175 = dfa175.predict(input);
                        switch (alt175) {
                    	case 1 :
                    	    // Java.g:8197:49: TK_5= '[' expressionGen_1+= expression TK_6= ']'
                    	    {
                    	    TK_5=(Token)match(input,41,FOLLOW_41_in_arrayCreatorRest6507); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_arrayCreatorRest6511);
                    	    expressionGen_1=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
                    	    list_expressionGen_1.add(expressionGen_1.getTemplate());

                    	    TK_6=(Token)match(input,42,FOLLOW_42_in_arrayCreatorRest6515); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop175;
                        }
                    } while (true);

                    // Java.g:8197:97: (TK_7= '[' TK_8= ']' )*
                    loop176:
                    do {
                        int alt176=2;
                        alt176 = dfa176.predict(input);
                        switch (alt176) {
                    	case 1 :
                    	    // Java.g:8197:98: TK_7= '[' TK_8= ']'
                    	    {
                    	    TK_7=(Token)match(input,41,FOLLOW_41_in_arrayCreatorRest6522); if (state.failed) return retval;
                    	    TK_8=(Token)match(input,42,FOLLOW_42_in_arrayCreatorRest6526); if (state.failed) return retval;

                    	    }
                    	    break;

                    	default :
                    	    break loop176;
                        }
                    } while (true);


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node arrayCreatorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		arrayCreatorRestReturnNode.setKind("arrayCreatorRest");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_2 != null) {
              			Leaf TK_2Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_2Leaf.setKind("TOKEN");
              	 		TK_2Leaf.setValue((TK_2!=null?TK_2.getText():null));
              			TK_2Leaf.setPos(TK_2.getCharPositionInLine());
              			TK_2Leaf.setLine(TK_2.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_2Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_3 != null) {
              			Leaf TK_3Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_3Leaf.setKind("TOKEN");
              	 		TK_3Leaf.setValue((TK_3!=null?TK_3.getText():null));
              			TK_3Leaf.setPos(TK_3.getCharPositionInLine());
              			TK_3Leaf.setLine(TK_3.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_3Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_arrayInitializerGen != null) {
              	        for(Iterator it = list_arrayInitializerGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arrayInitializer_return r = (JavaParser.arrayInitializer_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arrayInitializer");
              	            	arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_expressionGen != null) {
              	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expression");
              	            	arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_4 != null) {
              			Leaf TK_4Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_4Leaf.setKind("TOKEN");
              	 		TK_4Leaf.setValue((TK_4!=null?TK_4.getText():null));
              			TK_4Leaf.setPos(TK_4.getCharPositionInLine());
              			TK_4Leaf.setLine(TK_4.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_4Leaf);
              	 	}

              		// Create a special CST Node for terminal expressionGen_1 aggregation
              		if(list_expressionGen_1 != null) {
              	    for(int pos = 0; pos < list_expressionGen_1.size(); pos++ )  { 
              	    // Create a Token CST Leaf	
              	    if(TK_5 != null) {
              			Leaf TK_5Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_5Leaf.setKind("TOKEN");
              	 		TK_5Leaf.setValue((TK_5!=null?TK_5.getText():null));
              			TK_5Leaf.setPos(TK_5.getCharPositionInLine());
              			TK_5Leaf.setLine(TK_5.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_5Leaf);
              	 	}
              		// No Terminal extractor
              	    if(list_expressionGen_1 != null) {		
              	    	JavaParser.expression_return r = (JavaParser.expression_return) list_expressionGen_1.get(pos); 
              	    	if(r != null && r.returnNode != null) {
              	        	r.returnNode.setKind("expression");
              	    		arrayCreatorRestReturnNode.getChildren().add(r.returnNode);
              	    	} 
              		}
              	    // Create a Token CST Leaf	
              	    if(TK_6 != null) {
              			Leaf TK_6Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_6Leaf.setKind("TOKEN");
              	 		TK_6Leaf.setValue((TK_6!=null?TK_6.getText():null));
              			TK_6Leaf.setPos(TK_6.getCharPositionInLine());
              			TK_6Leaf.setLine(TK_6.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_6Leaf);
              	 	}
              		}
              		}

              	    // Create a Token CST Leaf	
              	    if(TK_7 != null) {
              			Leaf TK_7Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_7Leaf.setKind("TOKEN");
              	 		TK_7Leaf.setValue((TK_7!=null?TK_7.getText():null));
              			TK_7Leaf.setPos(TK_7.getCharPositionInLine());
              			TK_7Leaf.setLine(TK_7.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_7Leaf);
              	 	}
              	    // Create a Token CST Leaf	
              	    if(TK_8 != null) {
              			Leaf TK_8Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_8Leaf.setKind("TOKEN");
              	 		TK_8Leaf.setValue((TK_8!=null?TK_8.getText():null));
              			TK_8Leaf.setPos(TK_8.getCharPositionInLine());
              			TK_8Leaf.setLine(TK_8.getLine());
              	 		arrayCreatorRestReturnNode.getChildren().add(TK_8Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = arrayCreatorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 123, arrayCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arrayCreatorRest"

    public static class classCreatorRest_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "classCreatorRest"
    // Java.g:8324:1: classCreatorRest returns [Node returnNode] : argumentsGen+= arguments (classBodyGen+= classBody )? ;
    public final JavaParser.classCreatorRest_return classCreatorRest() throws RecognitionException {
        JavaParser.classCreatorRest_return retval = new JavaParser.classCreatorRest_return();
        retval.start = input.LT(1);
        int classCreatorRest_StartIndex = input.index();
        List list_argumentsGen=null;
        List list_classBodyGen=null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope classBodyGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 124) ) { return retval; }
            // Java.g:8325:1: (argumentsGen+= arguments (classBodyGen+= classBody )? )
            // Java.g:8325:3: argumentsGen+= arguments (classBodyGen+= classBody )?
            {
            pushFollow(FOLLOW_arguments_in_classCreatorRest6559);
            argumentsGen=arguments();

            state._fsp--;
            if (state.failed) return retval;
            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
            list_argumentsGen.add(argumentsGen.getTemplate());

            // Java.g:8325:39: (classBodyGen+= classBody )?
            int alt178=2;
            alt178 = dfa178.predict(input);
            switch (alt178) {
                case 1 :
                    // Java.g:0:0: classBodyGen+= classBody
                    {
                    pushFollow(FOLLOW_classBody_in_classCreatorRest6563);
                    classBodyGen=classBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_classBodyGen==null) list_classBodyGen=new ArrayList();
                    list_classBodyGen.add(classBodyGen.getTemplate());


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node classCreatorRestReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		classCreatorRestReturnNode.setKind("classCreatorRest");
              	    // Create a CST Node
              		if(list_argumentsGen != null) {
              	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("arguments");
              	            	classCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_classBodyGen != null) {
              	        for(Iterator it = list_classBodyGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.classBody_return r = (JavaParser.classBody_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("classBody");
              	            	classCreatorRestReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = classCreatorRestReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 124, classCreatorRest_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "classCreatorRest"

    public static class explicitGenericInvocation_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "explicitGenericInvocation"
    // Java.g:8355:1: explicitGenericInvocation returns [Node returnNode] : nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix ;
    public final JavaParser.explicitGenericInvocation_return explicitGenericInvocation() throws RecognitionException {
        JavaParser.explicitGenericInvocation_return retval = new JavaParser.explicitGenericInvocation_return();
        retval.start = input.LT(1);
        int explicitGenericInvocation_StartIndex = input.index();
        List list_nonWildcardTypeArgumentsGen=null;
        List list_explicitGenericInvocationSuffixGen=null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope explicitGenericInvocationSuffixGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 125) ) { return retval; }
            // Java.g:8356:1: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix )
            // Java.g:8356:3: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix
            {
            pushFollow(FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6586);
            nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
            list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen.getTemplate());

            pushFollow(FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6590);
            explicitGenericInvocationSuffixGen=explicitGenericInvocationSuffix();

            state._fsp--;
            if (state.failed) return retval;
            if (list_explicitGenericInvocationSuffixGen==null) list_explicitGenericInvocationSuffixGen=new ArrayList();
            list_explicitGenericInvocationSuffixGen.add(explicitGenericInvocationSuffixGen.getTemplate());

            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node explicitGenericInvocationReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		explicitGenericInvocationReturnNode.setKind("explicitGenericInvocation");
              	    // Create a CST Node
              		if(list_nonWildcardTypeArgumentsGen != null) {
              	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("nonWildcardTypeArguments");
              	            	explicitGenericInvocationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a CST Node
              		if(list_explicitGenericInvocationSuffixGen != null) {
              	        for(Iterator it = list_explicitGenericInvocationSuffixGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.explicitGenericInvocationSuffix_return r = (JavaParser.explicitGenericInvocationSuffix_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("explicitGenericInvocationSuffix");
              	            	explicitGenericInvocationReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = explicitGenericInvocationReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 125, explicitGenericInvocation_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocation"

    public static class nonWildcardTypeArguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "nonWildcardTypeArguments"
    // Java.g:8386:1: nonWildcardTypeArguments returns [Node returnNode] : TK_0= '<' typeListGen+= typeList TK_1= '>' ;
    public final JavaParser.nonWildcardTypeArguments_return nonWildcardTypeArguments() throws RecognitionException {
        JavaParser.nonWildcardTypeArguments_return retval = new JavaParser.nonWildcardTypeArguments_return();
        retval.start = input.LT(1);
        int nonWildcardTypeArguments_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_typeListGen=null;
        RuleReturnScope typeListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 126) ) { return retval; }
            // Java.g:8387:1: (TK_0= '<' typeListGen+= typeList TK_1= '>' )
            // Java.g:8387:3: TK_0= '<' typeListGen+= typeList TK_1= '>'
            {
            TK_0=(Token)match(input,33,FOLLOW_33_in_nonWildcardTypeArguments6612); if (state.failed) return retval;
            pushFollow(FOLLOW_typeList_in_nonWildcardTypeArguments6616);
            typeListGen=typeList();

            state._fsp--;
            if (state.failed) return retval;
            if (list_typeListGen==null) list_typeListGen=new ArrayList();
            list_typeListGen.add(typeListGen.getTemplate());

            TK_1=(Token)match(input,35,FOLLOW_35_in_nonWildcardTypeArguments6620); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node nonWildcardTypeArgumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		nonWildcardTypeArgumentsReturnNode.setKind("nonWildcardTypeArguments");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		nonWildcardTypeArgumentsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_typeListGen != null) {
              	        for(Iterator it = list_typeListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.typeList_return r = (JavaParser.typeList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("typeList");
              	            	nonWildcardTypeArgumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		nonWildcardTypeArgumentsReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = nonWildcardTypeArgumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 126, nonWildcardTypeArguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "nonWildcardTypeArguments"

    public static class explicitGenericInvocationSuffix_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "explicitGenericInvocationSuffix"
    // Java.g:8425:1: explicitGenericInvocationSuffix returns [Node returnNode] : (TK_0= 'super' superSuffixGen+= superSuffix | IdentifierGen= Identifier argumentsGen+= arguments );
    public final JavaParser.explicitGenericInvocationSuffix_return explicitGenericInvocationSuffix() throws RecognitionException {
        JavaParser.explicitGenericInvocationSuffix_return retval = new JavaParser.explicitGenericInvocationSuffix_return();
        retval.start = input.LT(1);
        int explicitGenericInvocationSuffix_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_superSuffixGen=null;
        List list_argumentsGen=null;
        RuleReturnScope superSuffixGen = null;
        RuleReturnScope argumentsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 127) ) { return retval; }
            // Java.g:8426:1: (TK_0= 'super' superSuffixGen+= superSuffix | IdentifierGen= Identifier argumentsGen+= arguments )
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==64) ) {
                alt179=1;
            }
            else if ( (LA179_0==Identifier) ) {
                alt179=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 179, 0, input);

                throw nvae;
            }
            switch (alt179) {
                case 1 :
                    // Java.g:8426:3: TK_0= 'super' superSuffixGen+= superSuffix
                    {
                    TK_0=(Token)match(input,64,FOLLOW_64_in_explicitGenericInvocationSuffix6642); if (state.failed) return retval;
                    pushFollow(FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6646);
                    superSuffixGen=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_superSuffixGen==null) list_superSuffixGen=new ArrayList();
                    list_superSuffixGen.add(superSuffixGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node explicitGenericInvocationSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		explicitGenericInvocationSuffixReturnNode.setKind("explicitGenericInvocationSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		explicitGenericInvocationSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_superSuffixGen != null) {
                      	        for(Iterator it = list_superSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("superSuffix");
                      	            	explicitGenericInvocationSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = explicitGenericInvocationSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:8453:6: IdentifierGen= Identifier argumentsGen+= arguments
                    {
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_explicitGenericInvocationSuffix6659); if (state.failed) return retval;
                    pushFollow(FOLLOW_arguments_in_explicitGenericInvocationSuffix6663);
                    argumentsGen=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node explicitGenericInvocationSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		explicitGenericInvocationSuffixReturnNode.setKind("explicitGenericInvocationSuffix");
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			explicitGenericInvocationSuffixReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	explicitGenericInvocationSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = explicitGenericInvocationSuffixReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 127, explicitGenericInvocationSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "explicitGenericInvocationSuffix"

    public static class selector_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "selector"
    // Java.g:8482:1: selector returns [Node returnNode] : (TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator | TK_0= '[' expressionGen+= expression TK_1= ']' );
    public final JavaParser.selector_return selector() throws RecognitionException {
        JavaParser.selector_return retval = new JavaParser.selector_return();
        retval.start = input.LT(1);
        int selector_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        Token TK_1=null;
        List list_argumentsGen=null;
        List list_superSuffixGen=null;
        List list_nonWildcardTypeArgumentsGen=null;
        List list_innerCreatorGen=null;
        List list_expressionGen=null;
        RuleReturnScope argumentsGen = null;
        RuleReturnScope superSuffixGen = null;
        RuleReturnScope nonWildcardTypeArgumentsGen = null;
        RuleReturnScope innerCreatorGen = null;
        RuleReturnScope expressionGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 128) ) { return retval; }
            // Java.g:8483:1: (TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator | TK_0= '[' expressionGen+= expression TK_1= ']' )
            int alt182=5;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==28) ) {
                switch ( input.LA(2) ) {
                case Identifier:
                    {
                    alt182=1;
                    }
                    break;
                case 112:
                    {
                    alt182=2;
                    }
                    break;
                case 64:
                    {
                    alt182=3;
                    }
                    break;
                case 113:
                    {
                    alt182=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 182, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA182_0==41) ) {
                alt182=5;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);

                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    // Java.g:8483:3: TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )?
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_selector6685); if (state.failed) return retval;
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_selector6689); if (state.failed) return retval;
                    // Java.g:8483:37: (argumentsGen+= arguments )?
                    int alt180=2;
                    alt180 = dfa180.predict(input);
                    switch (alt180) {
                        case 1 :
                            // Java.g:8483:38: argumentsGen+= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_selector6694);
                            argumentsGen=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                            list_argumentsGen.add(argumentsGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			selectorReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:8519:6: TK_0= '.' TK_1= 'this'
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_selector6709); if (state.failed) return retval;
                    TK_1=(Token)match(input,112,FOLLOW_112_in_selector6713); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 3 :
                    // Java.g:8545:6: TK_0= '.' TK_1= 'super' superSuffixGen+= superSuffix
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_selector6726); if (state.failed) return retval;
                    TK_1=(Token)match(input,64,FOLLOW_64_in_selector6730); if (state.failed) return retval;
                    pushFollow(FOLLOW_superSuffix_in_selector6734);
                    superSuffixGen=superSuffix();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_superSuffixGen==null) list_superSuffixGen=new ArrayList();
                    list_superSuffixGen.add(superSuffixGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_superSuffixGen != null) {
                      	        for(Iterator it = list_superSuffixGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.superSuffix_return r = (JavaParser.superSuffix_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("superSuffix");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 4 :
                    // Java.g:8581:6: TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_selector6747); if (state.failed) return retval;
                    TK_1=(Token)match(input,113,FOLLOW_113_in_selector6751); if (state.failed) return retval;
                    // Java.g:8581:26: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?
                    int alt181=2;
                    int LA181_0 = input.LA(1);

                    if ( (LA181_0==33) ) {
                        alt181=1;
                    }
                    switch (alt181) {
                        case 1 :
                            // Java.g:8581:27: nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments
                            {
                            pushFollow(FOLLOW_nonWildcardTypeArguments_in_selector6756);
                            nonWildcardTypeArgumentsGen=nonWildcardTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_nonWildcardTypeArgumentsGen==null) list_nonWildcardTypeArgumentsGen=new ArrayList();
                            list_nonWildcardTypeArgumentsGen.add(nonWildcardTypeArgumentsGen.getTemplate());


                            }
                            break;

                    }

                    pushFollow(FOLLOW_innerCreator_in_selector6762);
                    innerCreatorGen=innerCreator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_innerCreatorGen==null) list_innerCreatorGen=new ArrayList();
                    list_innerCreatorGen.add(innerCreatorGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_nonWildcardTypeArgumentsGen != null) {
                      	        for(Iterator it = list_nonWildcardTypeArgumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.nonWildcardTypeArguments_return r = (JavaParser.nonWildcardTypeArguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("nonWildcardTypeArguments");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a CST Node
                      		if(list_innerCreatorGen != null) {
                      	        for(Iterator it = list_innerCreatorGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.innerCreator_return r = (JavaParser.innerCreator_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("innerCreator");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;
                case 5 :
                    // Java.g:8627:6: TK_0= '[' expressionGen+= expression TK_1= ']'
                    {
                    TK_0=(Token)match(input,41,FOLLOW_41_in_selector6775); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_selector6779);
                    expressionGen=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionGen==null) list_expressionGen=new ArrayList();
                    list_expressionGen.add(expressionGen.getTemplate());

                    TK_1=(Token)match(input,42,FOLLOW_42_in_selector6783); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node selectorReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		selectorReturnNode.setKind("selector");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Node
                      		if(list_expressionGen != null) {
                      	        for(Iterator it = list_expressionGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.expression_return r = (JavaParser.expression_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("expression");
                      	            	selectorReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      	    // Create a Token CST Leaf	
                      	    if(TK_1 != null) {
                      			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_1Leaf.setKind("TOKEN");
                      	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
                      			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
                      			TK_1Leaf.setLine(TK_1.getLine());
                      	 		selectorReturnNode.getChildren().add(TK_1Leaf);
                      	 	}
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = selectorReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 128, selector_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "selector"

    public static class superSuffix_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "superSuffix"
    // Java.g:8665:1: superSuffix returns [Node returnNode] : (argumentsGen+= arguments | TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? );
    public final JavaParser.superSuffix_return superSuffix() throws RecognitionException {
        JavaParser.superSuffix_return retval = new JavaParser.superSuffix_return();
        retval.start = input.LT(1);
        int superSuffix_StartIndex = input.index();
        Token TK_0=null;
        Token IdentifierGen=null;
        List list_argumentsGen=null;
        RuleReturnScope argumentsGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 129) ) { return retval; }
            // Java.g:8666:1: (argumentsGen+= arguments | TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )? )
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==65) ) {
                alt184=1;
            }
            else if ( (LA184_0==28) ) {
                alt184=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 184, 0, input);

                throw nvae;
            }
            switch (alt184) {
                case 1 :
                    // Java.g:8666:3: argumentsGen+= arguments
                    {
                    pushFollow(FOLLOW_arguments_in_superSuffix6805);
                    argumentsGen=arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                    list_argumentsGen.add(argumentsGen.getTemplate());

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node superSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		superSuffixReturnNode.setKind("superSuffix");
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	superSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = superSuffixReturnNode;
                      	
                    }

                    }
                    break;
                case 2 :
                    // Java.g:8684:6: TK_0= '.' IdentifierGen= Identifier (argumentsGen+= arguments )?
                    {
                    TK_0=(Token)match(input,28,FOLLOW_28_in_superSuffix6818); if (state.failed) return retval;
                    IdentifierGen=(Token)match(input,Identifier,FOLLOW_Identifier_in_superSuffix6822); if (state.failed) return retval;
                    // Java.g:8684:40: (argumentsGen+= arguments )?
                    int alt183=2;
                    alt183 = dfa183.predict(input);
                    switch (alt183) {
                        case 1 :
                            // Java.g:8684:41: argumentsGen+= arguments
                            {
                            pushFollow(FOLLOW_arguments_in_superSuffix6827);
                            argumentsGen=arguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if (list_argumentsGen==null) list_argumentsGen=new ArrayList();
                            list_argumentsGen.add(argumentsGen.getTemplate());


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                      		// Create return CST Node
                      		Node superSuffixReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
                      		superSuffixReturnNode.setKind("superSuffix");
                      	    // Create a Token CST Leaf	
                      	    if(TK_0 != null) {
                      			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      	 		TK_0Leaf.setKind("TOKEN");
                      	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
                      			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
                      			TK_0Leaf.setLine(TK_0.getLine());
                      	 		superSuffixReturnNode.getChildren().add(TK_0Leaf);
                      	 	}
                      	    // Create a CST Leaf
                      		if(IdentifierGen != null) {
                      			Leaf IdentifierGenLeaf = CSTFactoryImpl.eINSTANCE.createLeaf();
                      			IdentifierGenLeaf.setKind("Identifier");
                      			IdentifierGenLeaf.setValue((IdentifierGen!=null?IdentifierGen.getText():null));
                      			IdentifierGenLeaf.setPos(IdentifierGen.getCharPositionInLine());
                      			IdentifierGenLeaf.setLine(IdentifierGen.getLine());
                      			superSuffixReturnNode.getChildren().add(IdentifierGenLeaf);
                      		}
                      	    // Create a CST Node
                      		if(list_argumentsGen != null) {
                      	        for(Iterator it = list_argumentsGen.iterator(); it.hasNext(); )  { 
                      	            JavaParser.arguments_return r = (JavaParser.arguments_return) it.next(); 
                      	            if(r != null && r.returnNode != null) {
                      	            	r.returnNode.setKind("arguments");
                      	            	superSuffixReturnNode.getChildren().add(r.returnNode);
                      	            } 
                      	        }
                      	    }
                      		// Returns the Node with CST Leaves/Nodes
                      		retval.returnNode = superSuffixReturnNode;
                      	
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 129, superSuffix_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "superSuffix"

    public static class arguments_return extends ParserRuleReturnScope {
        public Node returnNode;
        public StringTemplate st;
        public Object getTemplate() { return st; }
        public String toString() { return st==null?null:st.toString(); }
    };

    // $ANTLR start "arguments"
    // Java.g:8722:1: arguments returns [Node returnNode] : TK_0= '(' (expressionListGen+= expressionList )? TK_1= ')' ;
    public final JavaParser.arguments_return arguments() throws RecognitionException {
        JavaParser.arguments_return retval = new JavaParser.arguments_return();
        retval.start = input.LT(1);
        int arguments_StartIndex = input.index();
        Token TK_0=null;
        Token TK_1=null;
        List list_expressionListGen=null;
        RuleReturnScope expressionListGen = null;
        try {
            if ( state.backtracking>0 && alreadyParsedRule(input, 130) ) { return retval; }
            // Java.g:8723:1: (TK_0= '(' (expressionListGen+= expressionList )? TK_1= ')' )
            // Java.g:8723:3: TK_0= '(' (expressionListGen+= expressionList )? TK_1= ')'
            {
            TK_0=(Token)match(input,65,FOLLOW_65_in_arguments6853); if (state.failed) return retval;
            // Java.g:8723:29: (expressionListGen+= expressionList )?
            int alt185=2;
            alt185 = dfa185.predict(input);
            switch (alt185) {
                case 1 :
                    // Java.g:0:0: expressionListGen+= expressionList
                    {
                    pushFollow(FOLLOW_expressionList_in_arguments6857);
                    expressionListGen=expressionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if (list_expressionListGen==null) list_expressionListGen=new ArrayList();
                    list_expressionListGen.add(expressionListGen.getTemplate());


                    }
                    break;

            }

            TK_1=(Token)match(input,66,FOLLOW_66_in_arguments6862); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		// Create return CST Node
              		Node argumentsReturnNode = CSTFactoryImpl.eINSTANCE.createNode();
              		argumentsReturnNode.setKind("arguments");
              	    // Create a Token CST Leaf	
              	    if(TK_0 != null) {
              			Leaf TK_0Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_0Leaf.setKind("TOKEN");
              	 		TK_0Leaf.setValue((TK_0!=null?TK_0.getText():null));
              			TK_0Leaf.setPos(TK_0.getCharPositionInLine());
              			TK_0Leaf.setLine(TK_0.getLine());
              	 		argumentsReturnNode.getChildren().add(TK_0Leaf);
              	 	}
              	    // Create a CST Node
              		if(list_expressionListGen != null) {
              	        for(Iterator it = list_expressionListGen.iterator(); it.hasNext(); )  { 
              	            JavaParser.expressionList_return r = (JavaParser.expressionList_return) it.next(); 
              	            if(r != null && r.returnNode != null) {
              	            	r.returnNode.setKind("expressionList");
              	            	argumentsReturnNode.getChildren().add(r.returnNode);
              	            } 
              	        }
              	    }
              	    // Create a Token CST Leaf	
              	    if(TK_1 != null) {
              			Leaf TK_1Leaf = CSTFactoryImpl.eINSTANCE.createLeaf();
              	 		TK_1Leaf.setKind("TOKEN");
              	 		TK_1Leaf.setValue((TK_1!=null?TK_1.getText():null));
              			TK_1Leaf.setPos(TK_1.getCharPositionInLine());
              			TK_1Leaf.setLine(TK_1.getLine());
              	 		argumentsReturnNode.getChildren().add(TK_1Leaf);
              	 	}
              		// Returns the Node with CST Leaves/Nodes
              		retval.returnNode = argumentsReturnNode;
              	
            }

            }

            retval.stop = input.LT(-1);

        }
        catch (RecognitionException re) {
            reportError(re);
            recover(input,re);
        }
        finally {
            if ( state.backtracking>0 ) { memoize(input, 130, arguments_StartIndex); }
        }
        return retval;
    }
    // $ANTLR end "arguments"

    // $ANTLR start synpred1_Java
    public final void synpred1_Java_fragment() throws RecognitionException {   
        List list_annotationsGen=null;
        RuleReturnScope annotationsGen = null;
        // Java.g:100:17: (annotationsGen+= annotations )
        // Java.g:100:17: annotationsGen+= annotations
        {
        pushFollow(FOLLOW_annotations_in_synpred1_Java62);
        annotationsGen=annotations();

        state._fsp--;
        if (state.failed) return ;
        if (list_annotationsGen==null) list_annotationsGen=new ArrayList();
        list_annotationsGen.add(annotationsGen);


        }
    }
    // $ANTLR end synpred1_Java

    // $ANTLR start synpred38_Java
    public final void synpred38_Java_fragment() throws RecognitionException {   
        List list_methodDeclarationGen=null;
        RuleReturnScope methodDeclarationGen = null;
        // Java.g:1203:4: (methodDeclarationGen+= methodDeclaration )
        // Java.g:1203:4: methodDeclarationGen+= methodDeclaration
        {
        pushFollow(FOLLOW_methodDeclaration_in_synpred38_Java927);
        methodDeclarationGen=methodDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_methodDeclarationGen==null) list_methodDeclarationGen=new ArrayList();
        list_methodDeclarationGen.add(methodDeclarationGen);


        }
    }
    // $ANTLR end synpred38_Java

    // $ANTLR start synpred39_Java
    public final void synpred39_Java_fragment() throws RecognitionException {   
        List list_fieldDeclarationGen=null;
        RuleReturnScope fieldDeclarationGen = null;
        // Java.g:1221:4: (fieldDeclarationGen+= fieldDeclaration )
        // Java.g:1221:4: fieldDeclarationGen+= fieldDeclaration
        {
        pushFollow(FOLLOW_fieldDeclaration_in_synpred39_Java938);
        fieldDeclarationGen=fieldDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_fieldDeclarationGen==null) list_fieldDeclarationGen=new ArrayList();
        list_fieldDeclarationGen.add(fieldDeclarationGen);


        }
    }
    // $ANTLR end synpred39_Java

    // $ANTLR start synpred85_Java
    public final void synpred85_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        // Java.g:2775:29: (TK_0= '.' IdentifierGen_1_List+= Identifier )
        // Java.g:2775:29: TK_0= '.' IdentifierGen_1_List+= Identifier
        {
        TK_0=(Token)match(input,28,FOLLOW_28_in_synpred85_Java2235); if (state.failed) return ;
        IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred85_Java2239); if (state.failed) return ;
        if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
        list_IdentifierGen_1_List.add(IdentifierGen_1_List);


        }
    }
    // $ANTLR end synpred85_Java

    // $ANTLR start synpred120_Java
    public final void synpred120_Java_fragment() throws RecognitionException {   
        List list_annotationGen=null;
        RuleReturnScope annotationGen = null;
        // Java.g:3780:16: (annotationGen+= annotation )
        // Java.g:3780:16: annotationGen+= annotation
        {
        pushFollow(FOLLOW_annotation_in_synpred120_Java3074);
        annotationGen=annotation();

        state._fsp--;
        if (state.failed) return ;
        if (list_annotationGen==null) list_annotationGen=new ArrayList();
        list_annotationGen.add(annotationGen);


        }
    }
    // $ANTLR end synpred120_Java

    // $ANTLR start synpred135_Java
    public final void synpred135_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        List list_classDeclarationGen=null;
        RuleReturnScope classDeclarationGen = null;
        // Java.g:4295:6: (classDeclarationGen+= classDeclaration (TK_0= ';' )? )
        // Java.g:4295:6: classDeclarationGen+= classDeclaration (TK_0= ';' )?
        {
        pushFollow(FOLLOW_classDeclaration_in_synpred135_Java3478);
        classDeclarationGen=classDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_classDeclarationGen==null) list_classDeclarationGen=new ArrayList();
        list_classDeclarationGen.add(classDeclarationGen);

        // Java.g:4295:48: (TK_0= ';' )?
        int alt202=2;
        int LA202_0 = input.LA(1);

        if ( (LA202_0==25) ) {
            alt202=1;
        }
        switch (alt202) {
            case 1 :
                // Java.g:0:0: TK_0= ';'
                {
                TK_0=(Token)match(input,25,FOLLOW_25_in_synpred135_Java3482); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred135_Java

    // $ANTLR start synpred137_Java
    public final void synpred137_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        List list_interfaceDeclarationGen=null;
        RuleReturnScope interfaceDeclarationGen = null;
        // Java.g:4322:6: (interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? )
        // Java.g:4322:6: interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )?
        {
        pushFollow(FOLLOW_interfaceDeclaration_in_synpred137_Java3496);
        interfaceDeclarationGen=interfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_interfaceDeclarationGen==null) list_interfaceDeclarationGen=new ArrayList();
        list_interfaceDeclarationGen.add(interfaceDeclarationGen);

        // Java.g:4322:56: (TK_0= ';' )?
        int alt203=2;
        int LA203_0 = input.LA(1);

        if ( (LA203_0==25) ) {
            alt203=1;
        }
        switch (alt203) {
            case 1 :
                // Java.g:0:0: TK_0= ';'
                {
                TK_0=(Token)match(input,25,FOLLOW_25_in_synpred137_Java3500); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred137_Java

    // $ANTLR start synpred139_Java
    public final void synpred139_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        List list_enumDeclarationGen=null;
        RuleReturnScope enumDeclarationGen = null;
        // Java.g:4349:6: (enumDeclarationGen+= enumDeclaration (TK_0= ';' )? )
        // Java.g:4349:6: enumDeclarationGen+= enumDeclaration (TK_0= ';' )?
        {
        pushFollow(FOLLOW_enumDeclaration_in_synpred139_Java3514);
        enumDeclarationGen=enumDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_enumDeclarationGen==null) list_enumDeclarationGen=new ArrayList();
        list_enumDeclarationGen.add(enumDeclarationGen);

        // Java.g:4349:46: (TK_0= ';' )?
        int alt204=2;
        int LA204_0 = input.LA(1);

        if ( (LA204_0==25) ) {
            alt204=1;
        }
        switch (alt204) {
            case 1 :
                // Java.g:0:0: TK_0= ';'
                {
                TK_0=(Token)match(input,25,FOLLOW_25_in_synpred139_Java3518); if (state.failed) return ;

                }
                break;

        }


        }
    }
    // $ANTLR end synpred139_Java

    // $ANTLR start synpred144_Java
    public final void synpred144_Java_fragment() throws RecognitionException {   
        List list_localVariableDeclarationGen=null;
        RuleReturnScope localVariableDeclarationGen = null;
        // Java.g:4585:3: (localVariableDeclarationGen+= localVariableDeclaration )
        // Java.g:4585:3: localVariableDeclarationGen+= localVariableDeclaration
        {
        pushFollow(FOLLOW_localVariableDeclaration_in_synpred144_Java3716);
        localVariableDeclarationGen=localVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_localVariableDeclarationGen==null) list_localVariableDeclarationGen=new ArrayList();
        list_localVariableDeclarationGen.add(localVariableDeclarationGen);


        }
    }
    // $ANTLR end synpred144_Java

    // $ANTLR start synpred145_Java
    public final void synpred145_Java_fragment() throws RecognitionException {   
        List list_classOrInterfaceDeclarationGen=null;
        RuleReturnScope classOrInterfaceDeclarationGen = null;
        // Java.g:4603:4: (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration )
        // Java.g:4603:4: classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration
        {
        pushFollow(FOLLOW_classOrInterfaceDeclaration_in_synpred145_Java3727);
        classOrInterfaceDeclarationGen=classOrInterfaceDeclaration();

        state._fsp--;
        if (state.failed) return ;
        if (list_classOrInterfaceDeclarationGen==null) list_classOrInterfaceDeclarationGen=new ArrayList();
        list_classOrInterfaceDeclarationGen.add(classOrInterfaceDeclarationGen);


        }
    }
    // $ANTLR end synpred145_Java

    // $ANTLR start synpred150_Java
    public final void synpred150_Java_fragment() throws RecognitionException {   
        Token TK_1=null;
        List list_statementGen_1=null;
        RuleReturnScope statementGen_1 = null;
        // Java.g:4765:89: (TK_1= 'else' statementGen_1+= statement )
        // Java.g:4765:89: TK_1= 'else' statementGen_1+= statement
        {
        TK_1=(Token)match(input,76,FOLLOW_76_in_synpred150_Java3866); if (state.failed) return ;
        pushFollow(FOLLOW_statement_in_synpred150_Java3870);
        statementGen_1=statement();

        state._fsp--;
        if (state.failed) return ;
        if (list_statementGen_1==null) list_statementGen_1=new ArrayList();
        list_statementGen_1.add(statementGen_1);


        }
    }
    // $ANTLR end synpred150_Java

    // $ANTLR start synpred155_Java
    public final void synpred155_Java_fragment() throws RecognitionException {   
        Token TK_1=null;
        List list_catchesGen=null;
        List list_blockGen_1=null;
        RuleReturnScope catchesGen = null;
        RuleReturnScope blockGen_1 = null;
        // Java.g:4969:9: (catchesGen+= catches TK_1= 'finally' blockGen_1+= block )
        // Java.g:4969:9: catchesGen+= catches TK_1= 'finally' blockGen_1+= block
        {
        pushFollow(FOLLOW_catches_in_synpred155_Java3984);
        catchesGen=catches();

        state._fsp--;
        if (state.failed) return ;
        if (list_catchesGen==null) list_catchesGen=new ArrayList();
        list_catchesGen.add(catchesGen);

        TK_1=(Token)match(input,81,FOLLOW_81_in_synpred155_Java3988); if (state.failed) return ;
        pushFollow(FOLLOW_block_in_synpred155_Java3992);
        blockGen_1=block();

        state._fsp--;
        if (state.failed) return ;
        if (list_blockGen_1==null) list_blockGen_1=new ArrayList();
        list_blockGen_1.add(blockGen_1);


        }
    }
    // $ANTLR end synpred155_Java

    // $ANTLR start synpred156_Java
    public final void synpred156_Java_fragment() throws RecognitionException {   
        List list_catchesGen_1=null;
        RuleReturnScope catchesGen_1 = null;
        // Java.g:4970:9: (catchesGen_1+= catches )
        // Java.g:4970:9: catchesGen_1+= catches
        {
        pushFollow(FOLLOW_catches_in_synpred156_Java4004);
        catchesGen_1=catches();

        state._fsp--;
        if (state.failed) return ;
        if (list_catchesGen_1==null) list_catchesGen_1=new ArrayList();
        list_catchesGen_1.add(catchesGen_1);


        }
    }
    // $ANTLR end synpred156_Java

    // $ANTLR start synpred173_Java
    public final void synpred173_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_constantExpressionGen=null;
        RuleReturnScope constantExpressionGen = null;
        // Java.g:5556:3: (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' )
        // Java.g:5556:3: TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':'
        {
        TK_0=(Token)match(input,88,FOLLOW_88_in_synpred173_Java4397); if (state.failed) return ;
        pushFollow(FOLLOW_constantExpression_in_synpred173_Java4401);
        constantExpressionGen=constantExpression();

        state._fsp--;
        if (state.failed) return ;
        if (list_constantExpressionGen==null) list_constantExpressionGen=new ArrayList();
        list_constantExpressionGen.add(constantExpressionGen);

        TK_1=(Token)match(input,74,FOLLOW_74_in_synpred173_Java4405); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred173_Java

    // $ANTLR start synpred174_Java
    public final void synpred174_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_enumConstantNameGen=null;
        RuleReturnScope enumConstantNameGen = null;
        // Java.g:5592:6: (TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' )
        // Java.g:5592:6: TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':'
        {
        TK_0=(Token)match(input,88,FOLLOW_88_in_synpred174_Java4418); if (state.failed) return ;
        pushFollow(FOLLOW_enumConstantName_in_synpred174_Java4422);
        enumConstantNameGen=enumConstantName();

        state._fsp--;
        if (state.failed) return ;
        if (list_enumConstantNameGen==null) list_enumConstantNameGen=new ArrayList();
        list_enumConstantNameGen.add(enumConstantNameGen);

        TK_1=(Token)match(input,74,FOLLOW_74_in_synpred174_Java4426); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred174_Java

    // $ANTLR start synpred176_Java
    public final void synpred176_Java_fragment() throws RecognitionException {   
        List list_forVarControlGen=null;
        RuleReturnScope forVarControlGen = null;
        // Java.g:5693:4: (forVarControlGen+= forVarControl )
        // Java.g:5693:4: forVarControlGen+= forVarControl
        {
        pushFollow(FOLLOW_forVarControl_in_synpred176_Java4502);
        forVarControlGen=forVarControl();

        state._fsp--;
        if (state.failed) return ;
        if (list_forVarControlGen==null) list_forVarControlGen=new ArrayList();
        list_forVarControlGen.add(forVarControlGen);


        }
    }
    // $ANTLR end synpred176_Java

    // $ANTLR start synpred181_Java
    public final void synpred181_Java_fragment() throws RecognitionException {   
        List list_variableModifierGen=null;
        List list_typeGen=null;
        List list_variableDeclaratorsGen=null;
        RuleReturnScope variableModifierGen = null;
        RuleReturnScope typeGen = null;
        RuleReturnScope variableDeclaratorsGen = null;
        // Java.g:5770:3: ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators )
        // Java.g:5770:3: (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators
        {
        // Java.g:5770:22: (variableModifierGen+= variableModifier )*
        loop211:
        do {
            int alt211=2;
            alt211 = dfa211.predict(input);
            switch (alt211) {
        	case 1 :
        	    // Java.g:0:0: variableModifierGen+= variableModifier
        	    {
        	    pushFollow(FOLLOW_variableModifier_in_synpred181_Java4553);
        	    variableModifierGen=variableModifier();

        	    state._fsp--;
        	    if (state.failed) return ;
        	    if (list_variableModifierGen==null) list_variableModifierGen=new ArrayList();
        	    list_variableModifierGen.add(variableModifierGen);


        	    }
        	    break;

        	default :
        	    break loop211;
            }
        } while (true);

        pushFollow(FOLLOW_type_in_synpred181_Java4558);
        typeGen=type();

        state._fsp--;
        if (state.failed) return ;
        if (list_typeGen==null) list_typeGen=new ArrayList();
        list_typeGen.add(typeGen);

        pushFollow(FOLLOW_variableDeclarators_in_synpred181_Java4562);
        variableDeclaratorsGen=variableDeclarators();

        state._fsp--;
        if (state.failed) return ;
        if (list_variableDeclaratorsGen==null) list_variableDeclaratorsGen=new ArrayList();
        list_variableDeclaratorsGen.add(variableDeclaratorsGen);


        }
    }
    // $ANTLR end synpred181_Java

    // $ANTLR start synpred184_Java
    public final void synpred184_Java_fragment() throws RecognitionException {   
        List list_assignmentOperatorGen=null;
        List list_expressionGen=null;
        RuleReturnScope assignmentOperatorGen = null;
        RuleReturnScope expressionGen = null;
        // Java.g:6037:52: (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )
        // Java.g:6037:52: assignmentOperatorGen+= assignmentOperator expressionGen+= expression
        {
        pushFollow(FOLLOW_assignmentOperator_in_synpred184_Java4772);
        assignmentOperatorGen=assignmentOperator();

        state._fsp--;
        if (state.failed) return ;
        if (list_assignmentOperatorGen==null) list_assignmentOperatorGen=new ArrayList();
        list_assignmentOperatorGen.add(assignmentOperatorGen);

        pushFollow(FOLLOW_expression_in_synpred184_Java4776);
        expressionGen=expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_expressionGen==null) list_expressionGen=new ArrayList();
        list_expressionGen.add(expressionGen);


        }
    }
    // $ANTLR end synpred184_Java

    // $ANTLR start synpred195_Java
    public final void synpred195_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        Token TK_2=null;

        // Java.g:6266:9: (TK_0= '>' TK_1= '>' TK_2= '=' )
        // Java.g:6266:9: TK_0= '>' TK_1= '>' TK_2= '='
        {
        TK_0=(Token)match(input,35,FOLLOW_35_in_synpred195_Java4968); if (state.failed) return ;
        TK_1=(Token)match(input,35,FOLLOW_35_in_synpred195_Java4972); if (state.failed) return ;
        TK_2=(Token)match(input,44,FOLLOW_44_in_synpred195_Java4976); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred195_Java

    // $ANTLR start synpred205_Java
    public final void synpred205_Java_fragment() throws RecognitionException {   
        List list_relationalOpGen=null;
        List list_shiftExpressionGen_1=null;
        RuleReturnScope relationalOpGen = null;
        RuleReturnScope shiftExpressionGen_1 = null;
        // Java.g:6726:43: (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )
        // Java.g:6726:43: relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression
        {
        pushFollow(FOLLOW_relationalOp_in_synpred205_Java5335);
        relationalOpGen=relationalOp();

        state._fsp--;
        if (state.failed) return ;
        if (list_relationalOpGen==null) list_relationalOpGen=new ArrayList();
        list_relationalOpGen.add(relationalOpGen);

        pushFollow(FOLLOW_shiftExpression_in_synpred205_Java5339);
        shiftExpressionGen_1=shiftExpression();

        state._fsp--;
        if (state.failed) return ;
        if (list_shiftExpressionGen_1==null) list_shiftExpressionGen_1=new ArrayList();
        list_shiftExpressionGen_1.add(shiftExpressionGen_1);


        }
    }
    // $ANTLR end synpred205_Java

    // $ANTLR start synpred209_Java
    public final void synpred209_Java_fragment() throws RecognitionException {   
        List list_shiftOpGen=null;
        List list_additiveExpressionGen_1=null;
        RuleReturnScope shiftOpGen = null;
        RuleReturnScope additiveExpressionGen_1 = null;
        // Java.g:6835:49: (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )
        // Java.g:6835:49: shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression
        {
        pushFollow(FOLLOW_shiftOp_in_synpred209_Java5421);
        shiftOpGen=shiftOp();

        state._fsp--;
        if (state.failed) return ;
        if (list_shiftOpGen==null) list_shiftOpGen=new ArrayList();
        list_shiftOpGen.add(shiftOpGen);

        pushFollow(FOLLOW_additiveExpression_in_synpred209_Java5425);
        additiveExpressionGen_1=additiveExpression();

        state._fsp--;
        if (state.failed) return ;
        if (list_additiveExpressionGen_1==null) list_additiveExpressionGen_1=new ArrayList();
        list_additiveExpressionGen_1.add(additiveExpressionGen_1);


        }
    }
    // $ANTLR end synpred209_Java

    // $ANTLR start synpred211_Java
    public final void synpred211_Java_fragment() throws RecognitionException {   
        Token TK_2=null;
        Token TK_3=null;
        Token TK_4=null;

        // Java.g:6880:24: (TK_2= '>' TK_3= '>' TK_4= '>' )
        // Java.g:6880:24: TK_2= '>' TK_3= '>' TK_4= '>'
        {
        TK_2=(Token)match(input,35,FOLLOW_35_in_synpred211_Java5469); if (state.failed) return ;
        TK_3=(Token)match(input,35,FOLLOW_35_in_synpred211_Java5473); if (state.failed) return ;
        TK_4=(Token)match(input,35,FOLLOW_35_in_synpred211_Java5477); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred211_Java

    // $ANTLR start synpred223_Java
    public final void synpred223_Java_fragment() throws RecognitionException {   
        List list_castExpressionGen=null;
        RuleReturnScope castExpressionGen = null;
        // Java.g:7255:9: (castExpressionGen+= castExpression )
        // Java.g:7255:9: castExpressionGen+= castExpression
        {
        pushFollow(FOLLOW_castExpression_in_synpred223_Java5752);
        castExpressionGen=castExpression();

        state._fsp--;
        if (state.failed) return ;
        if (list_castExpressionGen==null) list_castExpressionGen=new ArrayList();
        list_castExpressionGen.add(castExpressionGen);


        }
    }
    // $ANTLR end synpred223_Java

    // $ANTLR start synpred227_Java
    public final void synpred227_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_primitiveTypeGen=null;
        List list_unaryExpressionGen=null;
        RuleReturnScope primitiveTypeGen = null;
        RuleReturnScope unaryExpressionGen = null;
        // Java.g:7322:4: (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression )
        // Java.g:7322:4: TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression
        {
        TK_0=(Token)match(input,65,FOLLOW_65_in_synpred227_Java5809); if (state.failed) return ;
        pushFollow(FOLLOW_primitiveType_in_synpred227_Java5813);
        primitiveTypeGen=primitiveType();

        state._fsp--;
        if (state.failed) return ;
        if (list_primitiveTypeGen==null) list_primitiveTypeGen=new ArrayList();
        list_primitiveTypeGen.add(primitiveTypeGen);

        TK_1=(Token)match(input,66,FOLLOW_66_in_synpred227_Java5817); if (state.failed) return ;
        pushFollow(FOLLOW_unaryExpression_in_synpred227_Java5821);
        unaryExpressionGen=unaryExpression();

        state._fsp--;
        if (state.failed) return ;
        if (list_unaryExpressionGen==null) list_unaryExpressionGen=new ArrayList();
        list_unaryExpressionGen.add(unaryExpressionGen);


        }
    }
    // $ANTLR end synpred227_Java

    // $ANTLR start synpred228_Java
    public final void synpred228_Java_fragment() throws RecognitionException {   
        List list_typeGen=null;
        RuleReturnScope typeGen = null;
        // Java.g:7368:18: (typeGen+= type )
        // Java.g:7368:18: typeGen+= type
        {
        pushFollow(FOLLOW_type_in_synpred228_Java5841);
        typeGen=type();

        state._fsp--;
        if (state.failed) return ;
        if (list_typeGen==null) list_typeGen=new ArrayList();
        list_typeGen.add(typeGen);


        }
    }
    // $ANTLR end synpred228_Java

    // $ANTLR start synpred232_Java
    public final void synpred232_Java_fragment() throws RecognitionException {   
        Token TK_1=null;
        Token IdentifierGen_List=null;
        List list_IdentifierGen_List=null;

        // Java.g:7493:22: (TK_1= '.' IdentifierGen_List+= Identifier )
        // Java.g:7493:22: TK_1= '.' IdentifierGen_List+= Identifier
        {
        TK_1=(Token)match(input,28,FOLLOW_28_in_synpred232_Java5941); if (state.failed) return ;
        IdentifierGen_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred232_Java5945); if (state.failed) return ;
        if (list_IdentifierGen_List==null) list_IdentifierGen_List=new ArrayList();
        list_IdentifierGen_List.add(IdentifierGen_List);


        }
    }
    // $ANTLR end synpred232_Java

    // $ANTLR start synpred233_Java
    public final void synpred233_Java_fragment() throws RecognitionException {   
        List list_identifierSuffixGen=null;
        RuleReturnScope identifierSuffixGen = null;
        // Java.g:7493:65: (identifierSuffixGen+= identifierSuffix )
        // Java.g:7493:65: identifierSuffixGen+= identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred233_Java5952);
        identifierSuffixGen=identifierSuffix();

        state._fsp--;
        if (state.failed) return ;
        if (list_identifierSuffixGen==null) list_identifierSuffixGen=new ArrayList();
        list_identifierSuffixGen.add(identifierSuffixGen);


        }
    }
    // $ANTLR end synpred233_Java

    // $ANTLR start synpred238_Java
    public final void synpred238_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token IdentifierGen_1_List=null;
        List list_IdentifierGen_1_List=null;

        // Java.g:7618:35: (TK_0= '.' IdentifierGen_1_List+= Identifier )
        // Java.g:7618:35: TK_0= '.' IdentifierGen_1_List+= Identifier
        {
        TK_0=(Token)match(input,28,FOLLOW_28_in_synpred238_Java6031); if (state.failed) return ;
        IdentifierGen_1_List=(Token)match(input,Identifier,FOLLOW_Identifier_in_synpred238_Java6035); if (state.failed) return ;
        if (list_IdentifierGen_1_List==null) list_IdentifierGen_1_List=new ArrayList();
        list_IdentifierGen_1_List.add(IdentifierGen_1_List);


        }
    }
    // $ANTLR end synpred238_Java

    // $ANTLR start synpred239_Java
    public final void synpred239_Java_fragment() throws RecognitionException {   
        List list_identifierSuffixGen=null;
        RuleReturnScope identifierSuffixGen = null;
        // Java.g:7618:80: (identifierSuffixGen+= identifierSuffix )
        // Java.g:7618:80: identifierSuffixGen+= identifierSuffix
        {
        pushFollow(FOLLOW_identifierSuffix_in_synpred239_Java6042);
        identifierSuffixGen=identifierSuffix();

        state._fsp--;
        if (state.failed) return ;
        if (list_identifierSuffixGen==null) list_identifierSuffixGen=new ArrayList();
        list_identifierSuffixGen.add(identifierSuffixGen);


        }
    }
    // $ANTLR end synpred239_Java

    // $ANTLR start synpred245_Java
    public final void synpred245_Java_fragment() throws RecognitionException {   
        Token TK_0=null;
        Token TK_1=null;
        List list_expressionGen=null;
        RuleReturnScope expressionGen = null;
        // Java.g:7807:5: (TK_0= '[' expressionGen+= expression TK_1= ']' )
        // Java.g:7807:5: TK_0= '[' expressionGen+= expression TK_1= ']'
        {
        TK_0=(Token)match(input,41,FOLLOW_41_in_synpred245_Java6151); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred245_Java6155);
        expressionGen=expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_expressionGen==null) list_expressionGen=new ArrayList();
        list_expressionGen.add(expressionGen);

        TK_1=(Token)match(input,42,FOLLOW_42_in_synpred245_Java6159); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred245_Java

    // $ANTLR start synpred261_Java
    public final void synpred261_Java_fragment() throws RecognitionException {   
        Token TK_5=null;
        Token TK_6=null;
        List list_expressionGen_1=null;
        RuleReturnScope expressionGen_1 = null;
        // Java.g:8197:49: (TK_5= '[' expressionGen_1+= expression TK_6= ']' )
        // Java.g:8197:49: TK_5= '[' expressionGen_1+= expression TK_6= ']'
        {
        TK_5=(Token)match(input,41,FOLLOW_41_in_synpred261_Java6507); if (state.failed) return ;
        pushFollow(FOLLOW_expression_in_synpred261_Java6511);
        expressionGen_1=expression();

        state._fsp--;
        if (state.failed) return ;
        if (list_expressionGen_1==null) list_expressionGen_1=new ArrayList();
        list_expressionGen_1.add(expressionGen_1);

        TK_6=(Token)match(input,42,FOLLOW_42_in_synpred261_Java6515); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred261_Java

    // Delegated rules

    public final boolean synpred261_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred156_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred156_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred155_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred155_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred144_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred144_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred135_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred135_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred245_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred245_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred38_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred38_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred184_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred184_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred145_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred145_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred150_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred150_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_Java() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_Java_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA1 dfa1 = new DFA1(this);
    protected DFA2 dfa2 = new DFA2(this);
    protected DFA3 dfa3 = new DFA3(this);
    protected DFA4 dfa4 = new DFA4(this);
    protected DFA8 dfa8 = new DFA8(this);
    protected DFA9 dfa9 = new DFA9(this);
    protected DFA26 dfa26 = new DFA26(this);
    protected DFA31 dfa31 = new DFA31(this);
    protected DFA32 dfa32 = new DFA32(this);
    protected DFA35 dfa35 = new DFA35(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA36 dfa36 = new DFA36(this);
    protected DFA38 dfa38 = new DFA38(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA41 dfa41 = new DFA41(this);
    protected DFA50 dfa50 = new DFA50(this);
    protected DFA60 dfa60 = new DFA60(this);
    protected DFA63 dfa63 = new DFA63(this);
    protected DFA61 dfa61 = new DFA61(this);
    protected DFA64 dfa64 = new DFA64(this);
    protected DFA72 dfa72 = new DFA72(this);
    protected DFA67 dfa67 = new DFA67(this);
    protected DFA69 dfa69 = new DFA69(this);
    protected DFA68 dfa68 = new DFA68(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA80 dfa80 = new DFA80(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA86 dfa86 = new DFA86(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA91 dfa91 = new DFA91(this);
    protected DFA90 dfa90 = new DFA90(this);
    protected DFA92 dfa92 = new DFA92(this);
    protected DFA94 dfa94 = new DFA94(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA98 dfa98 = new DFA98(this);
    protected DFA99 dfa99 = new DFA99(this);
    protected DFA100 dfa100 = new DFA100(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA101 dfa101 = new DFA101(this);
    protected DFA102 dfa102 = new DFA102(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA104 dfa104 = new DFA104(this);
    protected DFA108 dfa108 = new DFA108(this);
    protected DFA109 dfa109 = new DFA109(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA117 dfa117 = new DFA117(this);
    protected DFA114 dfa114 = new DFA114(this);
    protected DFA118 dfa118 = new DFA118(this);
    protected DFA119 dfa119 = new DFA119(this);
    protected DFA121 dfa121 = new DFA121(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA127 dfa127 = new DFA127(this);
    protected DFA124 dfa124 = new DFA124(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA126 dfa126 = new DFA126(this);
    protected DFA129 dfa129 = new DFA129(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA130 dfa130 = new DFA130(this);
    protected DFA132 dfa132 = new DFA132(this);
    protected DFA133 dfa133 = new DFA133(this);
    protected DFA134 dfa134 = new DFA134(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA142 dfa142 = new DFA142(this);
    protected DFA143 dfa143 = new DFA143(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA145 dfa145 = new DFA145(this);
    protected DFA148 dfa148 = new DFA148(this);
    protected DFA150 dfa150 = new DFA150(this);
    protected DFA151 dfa151 = new DFA151(this);
    protected DFA154 dfa154 = new DFA154(this);
    protected DFA152 dfa152 = new DFA152(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA163 dfa163 = new DFA163(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA165 dfa165 = new DFA165(this);
    protected DFA168 dfa168 = new DFA168(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA175 dfa175 = new DFA175(this);
    protected DFA176 dfa176 = new DFA176(this);
    protected DFA178 dfa178 = new DFA178(this);
    protected DFA180 dfa180 = new DFA180(this);
    protected DFA183 dfa183 = new DFA183(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA211 dfa211 = new DFA211(this);
    static final String DFA1_eotS =
        "\27\uffff";
    static final String DFA1_eofS =
        "\1\2\26\uffff";
    static final String DFA1_minS =
        "\1\5\1\4\23\uffff\1\0\1\uffff";
    static final String DFA1_maxS =
        "\1\107\1\47\23\uffff\1\0\1\uffff";
    static final String DFA1_acceptS =
        "\2\uffff\1\2\23\uffff\1\1";
    static final String DFA1_specialS =
        "\25\uffff\1\0\1\uffff}>";
    static final String[] DFA1_transitionS = {
            "\1\2\22\uffff\4\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2\20"+
            "\uffff\1\1",
            "\1\25\42\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA1_eot = DFA.unpackEncodedString(DFA1_eotS);
    static final short[] DFA1_eof = DFA.unpackEncodedString(DFA1_eofS);
    static final char[] DFA1_min = DFA.unpackEncodedStringToUnsignedChars(DFA1_minS);
    static final char[] DFA1_max = DFA.unpackEncodedStringToUnsignedChars(DFA1_maxS);
    static final short[] DFA1_accept = DFA.unpackEncodedString(DFA1_acceptS);
    static final short[] DFA1_special = DFA.unpackEncodedString(DFA1_specialS);
    static final short[][] DFA1_transition;

    static {
        int numStates = DFA1_transitionS.length;
        DFA1_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA1_transition[i] = DFA.unpackEncodedString(DFA1_transitionS[i]);
        }
    }

    class DFA1 extends DFA {

        public DFA1(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 1;
            this.eot = DFA1_eot;
            this.eof = DFA1_eof;
            this.min = DFA1_min;
            this.max = DFA1_max;
            this.accept = DFA1_accept;
            this.special = DFA1_special;
            this.transition = DFA1_transition;
        }
        public String getDescription() {
            return "100:17: (annotationsGen+= annotations )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA1_21 = input.LA(1);

                         
                        int index1_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_Java()) ) {s = 22;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index1_21);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 1, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA2_eotS =
        "\24\uffff";
    static final String DFA2_eofS =
        "\1\2\23\uffff";
    static final String DFA2_minS =
        "\1\5\23\uffff";
    static final String DFA2_maxS =
        "\1\107\23\uffff";
    static final String DFA2_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA2_specialS =
        "\24\uffff}>";
    static final String[] DFA2_transitionS = {
            "\1\2\22\uffff\1\1\3\2\2\uffff\1\2\10\uffff\1\2\5\uffff\12\2"+
            "\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA2_eot = DFA.unpackEncodedString(DFA2_eotS);
    static final short[] DFA2_eof = DFA.unpackEncodedString(DFA2_eofS);
    static final char[] DFA2_min = DFA.unpackEncodedStringToUnsignedChars(DFA2_minS);
    static final char[] DFA2_max = DFA.unpackEncodedStringToUnsignedChars(DFA2_maxS);
    static final short[] DFA2_accept = DFA.unpackEncodedString(DFA2_acceptS);
    static final short[] DFA2_special = DFA.unpackEncodedString(DFA2_specialS);
    static final short[][] DFA2_transition;

    static {
        int numStates = DFA2_transitionS.length;
        DFA2_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA2_transition[i] = DFA.unpackEncodedString(DFA2_transitionS[i]);
        }
    }

    class DFA2 extends DFA {

        public DFA2(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 2;
            this.eot = DFA2_eot;
            this.eof = DFA2_eof;
            this.min = DFA2_min;
            this.max = DFA2_max;
            this.accept = DFA2_accept;
            this.special = DFA2_special;
            this.transition = DFA2_transition;
        }
        public String getDescription() {
            return "101:24: (packageDeclarationGen+= packageDeclaration )?";
        }
    }
    static final String DFA3_eotS =
        "\23\uffff";
    static final String DFA3_eofS =
        "\1\1\22\uffff";
    static final String DFA3_minS =
        "\1\5\22\uffff";
    static final String DFA3_maxS =
        "\1\107\22\uffff";
    static final String DFA3_acceptS =
        "\1\uffff\1\2\20\uffff\1\1";
    static final String DFA3_specialS =
        "\23\uffff}>";
    static final String[] DFA3_transitionS = {
            "\1\1\23\uffff\1\1\1\22\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA3_eot = DFA.unpackEncodedString(DFA3_eotS);
    static final short[] DFA3_eof = DFA.unpackEncodedString(DFA3_eofS);
    static final char[] DFA3_min = DFA.unpackEncodedStringToUnsignedChars(DFA3_minS);
    static final char[] DFA3_max = DFA.unpackEncodedStringToUnsignedChars(DFA3_maxS);
    static final short[] DFA3_accept = DFA.unpackEncodedString(DFA3_acceptS);
    static final short[] DFA3_special = DFA.unpackEncodedString(DFA3_specialS);
    static final short[][] DFA3_transition;

    static {
        int numStates = DFA3_transitionS.length;
        DFA3_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA3_transition[i] = DFA.unpackEncodedString(DFA3_transitionS[i]);
        }
    }

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = DFA3_eot;
            this.eof = DFA3_eof;
            this.min = DFA3_min;
            this.max = DFA3_max;
            this.accept = DFA3_accept;
            this.special = DFA3_special;
            this.transition = DFA3_transition;
        }
        public String getDescription() {
            return "()* loopback of 102:29: (importDeclarationGen+= importDeclaration )*";
        }
    }
    static final String DFA4_eotS =
        "\22\uffff";
    static final String DFA4_eofS =
        "\1\1\21\uffff";
    static final String DFA4_minS =
        "\1\5\21\uffff";
    static final String DFA4_maxS =
        "\1\107\21\uffff";
    static final String DFA4_acceptS =
        "\1\uffff\1\2\1\1\17\uffff";
    static final String DFA4_specialS =
        "\22\uffff}>";
    static final String[] DFA4_transitionS = {
            "\1\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\10\uffff\1\2\5\uffff"+
            "\12\2\20\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA4_eot = DFA.unpackEncodedString(DFA4_eotS);
    static final short[] DFA4_eof = DFA.unpackEncodedString(DFA4_eofS);
    static final char[] DFA4_min = DFA.unpackEncodedStringToUnsignedChars(DFA4_minS);
    static final char[] DFA4_max = DFA.unpackEncodedStringToUnsignedChars(DFA4_maxS);
    static final short[] DFA4_accept = DFA.unpackEncodedString(DFA4_acceptS);
    static final short[] DFA4_special = DFA.unpackEncodedString(DFA4_specialS);
    static final short[][] DFA4_transition;

    static {
        int numStates = DFA4_transitionS.length;
        DFA4_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA4_transition[i] = DFA.unpackEncodedString(DFA4_transitionS[i]);
        }
    }

    class DFA4 extends DFA {

        public DFA4(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 4;
            this.eot = DFA4_eot;
            this.eof = DFA4_eof;
            this.min = DFA4_min;
            this.max = DFA4_max;
            this.accept = DFA4_accept;
            this.special = DFA4_special;
            this.transition = DFA4_transition;
        }
        public String getDescription() {
            return "()* loopback of 103:27: (typeDeclarationGen+= typeDeclaration )*";
        }
    }
    static final String DFA8_eotS =
        "\21\uffff";
    static final String DFA8_eofS =
        "\21\uffff";
    static final String DFA8_minS =
        "\1\5\20\uffff";
    static final String DFA8_maxS =
        "\1\107\20\uffff";
    static final String DFA8_acceptS =
        "\1\uffff\1\1\16\uffff\1\2";
    static final String DFA8_specialS =
        "\21\uffff}>";
    static final String[] DFA8_transitionS = {
            "\1\1\23\uffff\1\20\1\uffff\1\1\2\uffff\1\1\10\uffff\1\1\5\uffff"+
            "\12\1\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA8_eot = DFA.unpackEncodedString(DFA8_eotS);
    static final short[] DFA8_eof = DFA.unpackEncodedString(DFA8_eofS);
    static final char[] DFA8_min = DFA.unpackEncodedStringToUnsignedChars(DFA8_minS);
    static final char[] DFA8_max = DFA.unpackEncodedStringToUnsignedChars(DFA8_maxS);
    static final short[] DFA8_accept = DFA.unpackEncodedString(DFA8_acceptS);
    static final short[] DFA8_special = DFA.unpackEncodedString(DFA8_specialS);
    static final short[][] DFA8_transition;

    static {
        int numStates = DFA8_transitionS.length;
        DFA8_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA8_transition[i] = DFA.unpackEncodedString(DFA8_transitionS[i]);
        }
    }

    class DFA8 extends DFA {

        public DFA8(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 8;
            this.eot = DFA8_eot;
            this.eof = DFA8_eof;
            this.min = DFA8_min;
            this.max = DFA8_max;
            this.accept = DFA8_accept;
            this.special = DFA8_special;
            this.transition = DFA8_transition;
        }
        public String getDescription() {
            return "283:1: typeDeclaration returns [Node returnNode] : (classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | TK_0= ';' );";
        }
    }
    static final String DFA9_eotS =
        "\22\uffff";
    static final String DFA9_eofS =
        "\22\uffff";
    static final String DFA9_minS =
        "\1\5\3\uffff\1\4\15\uffff";
    static final String DFA9_maxS =
        "\1\107\3\uffff\1\47\15\uffff";
    static final String DFA9_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\14\uffff";
    static final String DFA9_specialS =
        "\22\uffff}>";
    static final String[] DFA9_transitionS = {
            "\1\1\25\uffff\1\5\2\uffff\1\1\10\uffff\1\1\5\uffff\12\5\20"+
            "\uffff\1\4",
            "",
            "",
            "",
            "\1\5\42\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA9_eot = DFA.unpackEncodedString(DFA9_eotS);
    static final short[] DFA9_eof = DFA.unpackEncodedString(DFA9_eofS);
    static final char[] DFA9_min = DFA.unpackEncodedStringToUnsignedChars(DFA9_minS);
    static final char[] DFA9_max = DFA.unpackEncodedStringToUnsignedChars(DFA9_maxS);
    static final short[] DFA9_accept = DFA.unpackEncodedString(DFA9_acceptS);
    static final short[] DFA9_special = DFA.unpackEncodedString(DFA9_specialS);
    static final short[][] DFA9_transition;

    static {
        int numStates = DFA9_transitionS.length;
        DFA9_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA9_transition[i] = DFA.unpackEncodedString(DFA9_transitionS[i]);
        }
    }

    class DFA9 extends DFA {

        public DFA9(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 9;
            this.eot = DFA9_eot;
            this.eof = DFA9_eof;
            this.min = DFA9_min;
            this.max = DFA9_max;
            this.accept = DFA9_accept;
            this.special = DFA9_special;
            this.transition = DFA9_transition;
        }
        public String getDescription() {
            return "()* loopback of 322:14: (modifierGen+= modifier )*";
        }
    }
    static final String DFA26_eotS =
        "\37\uffff";
    static final String DFA26_eofS =
        "\1\1\36\uffff";
    static final String DFA26_minS =
        "\1\4\36\uffff";
    static final String DFA26_maxS =
        "\1\107\36\uffff";
    static final String DFA26_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\33\uffff";
    static final String DFA26_specialS =
        "\37\uffff}>";
    static final String[] DFA26_transitionS = {
            "\2\3\23\uffff\1\3\1\uffff\1\3\2\uffff\1\3\2\uffff\1\3\3\uffff"+
            "\1\3\1\1\2\3\4\uffff\22\3\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA26_eot = DFA.unpackEncodedString(DFA26_eotS);
    static final short[] DFA26_eof = DFA.unpackEncodedString(DFA26_eofS);
    static final char[] DFA26_min = DFA.unpackEncodedStringToUnsignedChars(DFA26_minS);
    static final char[] DFA26_max = DFA.unpackEncodedStringToUnsignedChars(DFA26_maxS);
    static final short[] DFA26_accept = DFA.unpackEncodedString(DFA26_acceptS);
    static final short[] DFA26_special = DFA.unpackEncodedString(DFA26_specialS);
    static final short[][] DFA26_transition;

    static {
        int numStates = DFA26_transitionS.length;
        DFA26_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA26_transition[i] = DFA.unpackEncodedString(DFA26_transitionS[i]);
        }
    }

    class DFA26 extends DFA {

        public DFA26(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 26;
            this.eot = DFA26_eot;
            this.eof = DFA26_eof;
            this.min = DFA26_min;
            this.max = DFA26_max;
            this.accept = DFA26_accept;
            this.special = DFA26_special;
            this.transition = DFA26_transition;
        }
        public String getDescription() {
            return "()* loopback of 850:12: (classBodyDeclarationGen+= classBodyDeclaration )*";
        }
    }
    static final String DFA31_eotS =
        "\36\uffff";
    static final String DFA31_eofS =
        "\36\uffff";
    static final String DFA31_minS =
        "\1\4\35\uffff";
    static final String DFA31_maxS =
        "\1\107\35\uffff";
    static final String DFA31_acceptS =
        "\1\uffff\1\2\1\1\33\uffff";
    static final String DFA31_specialS =
        "\36\uffff}>";
    static final String[] DFA31_transitionS = {
            "\2\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\1\2\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA31_eot = DFA.unpackEncodedString(DFA31_eotS);
    static final short[] DFA31_eof = DFA.unpackEncodedString(DFA31_eofS);
    static final char[] DFA31_min = DFA.unpackEncodedStringToUnsignedChars(DFA31_minS);
    static final char[] DFA31_max = DFA.unpackEncodedStringToUnsignedChars(DFA31_maxS);
    static final short[] DFA31_accept = DFA.unpackEncodedString(DFA31_acceptS);
    static final short[] DFA31_special = DFA.unpackEncodedString(DFA31_specialS);
    static final short[][] DFA31_transition;

    static {
        int numStates = DFA31_transitionS.length;
        DFA31_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA31_transition[i] = DFA.unpackEncodedString(DFA31_transitionS[i]);
        }
    }

    class DFA31 extends DFA {

        public DFA31(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 31;
            this.eot = DFA31_eot;
            this.eof = DFA31_eof;
            this.min = DFA31_min;
            this.max = DFA31_max;
            this.accept = DFA31_accept;
            this.special = DFA31_special;
            this.transition = DFA31_transition;
        }
        public String getDescription() {
            return "()* loopback of 1032:35: (classBodyDeclarationGen+= classBodyDeclaration )*";
        }
    }
    static final String DFA32_eotS =
        "\35\uffff";
    static final String DFA32_eofS =
        "\35\uffff";
    static final String DFA32_minS =
        "\1\4\34\uffff";
    static final String DFA32_maxS =
        "\1\107\34\uffff";
    static final String DFA32_acceptS =
        "\1\uffff\1\2\1\1\32\uffff";
    static final String DFA32_specialS =
        "\35\uffff}>";
    static final String[] DFA32_transitionS = {
            "\2\2\23\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\4\uffff"+
            "\1\1\2\2\4\uffff\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA32_eot = DFA.unpackEncodedString(DFA32_eotS);
    static final short[] DFA32_eof = DFA.unpackEncodedString(DFA32_eofS);
    static final char[] DFA32_min = DFA.unpackEncodedStringToUnsignedChars(DFA32_minS);
    static final char[] DFA32_max = DFA.unpackEncodedStringToUnsignedChars(DFA32_maxS);
    static final short[] DFA32_accept = DFA.unpackEncodedString(DFA32_acceptS);
    static final short[] DFA32_special = DFA.unpackEncodedString(DFA32_specialS);
    static final short[][] DFA32_transition;

    static {
        int numStates = DFA32_transitionS.length;
        DFA32_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA32_transition[i] = DFA.unpackEncodedString(DFA32_transitionS[i]);
        }
    }

    class DFA32 extends DFA {

        public DFA32(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 32;
            this.eot = DFA32_eot;
            this.eof = DFA32_eof;
            this.min = DFA32_min;
            this.max = DFA32_max;
            this.accept = DFA32_accept;
            this.special = DFA32_special;
            this.transition = DFA32_transition;
        }
        public String getDescription() {
            return "()* loopback of 1071:39: (interfaceBodyDeclarationGen+= interfaceBodyDeclaration )*";
        }
    }
    static final String DFA35_eotS =
        "\70\uffff";
    static final String DFA35_eofS =
        "\70\uffff";
    static final String DFA35_minS =
        "\1\4\1\uffff\1\4\65\uffff";
    static final String DFA35_maxS =
        "\1\107\1\uffff\1\107\65\uffff";
    static final String DFA35_acceptS =
        "\1\uffff\1\1\1\uffff\1\2\1\3\63\uffff";
    static final String DFA35_specialS =
        "\70\uffff}>";
    static final String[] DFA35_transitionS = {
            "\2\4\23\uffff\1\1\1\uffff\1\2\2\uffff\1\4\2\uffff\1\4\3\uffff"+
            "\1\3\1\uffff\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "\2\4\25\uffff\1\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\3\1\uffff"+
            "\2\4\4\uffff\22\4\10\uffff\1\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA35_eot = DFA.unpackEncodedString(DFA35_eotS);
    static final short[] DFA35_eof = DFA.unpackEncodedString(DFA35_eofS);
    static final char[] DFA35_min = DFA.unpackEncodedStringToUnsignedChars(DFA35_minS);
    static final char[] DFA35_max = DFA.unpackEncodedStringToUnsignedChars(DFA35_maxS);
    static final short[] DFA35_accept = DFA.unpackEncodedString(DFA35_acceptS);
    static final short[] DFA35_special = DFA.unpackEncodedString(DFA35_specialS);
    static final short[][] DFA35_transition;

    static {
        int numStates = DFA35_transitionS.length;
        DFA35_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA35_transition[i] = DFA.unpackEncodedString(DFA35_transitionS[i]);
        }
    }

    class DFA35 extends DFA {

        public DFA35(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 35;
            this.eot = DFA35_eot;
            this.eof = DFA35_eof;
            this.min = DFA35_min;
            this.max = DFA35_max;
            this.accept = DFA35_accept;
            this.special = DFA35_special;
            this.transition = DFA35_transition;
        }
        public String getDescription() {
            return "1109:1: classBodyDeclaration returns [Node returnNode] : (TK_0= ';' | (TK_0= 'static' )? blockGen+= block | (modifierGen+= modifier )* memberDeclGen+= memberDecl );";
        }
    }
    static final String DFA34_eotS =
        "\35\uffff";
    static final String DFA34_eofS =
        "\35\uffff";
    static final String DFA34_minS =
        "\1\4\14\uffff\1\4\17\uffff";
    static final String DFA34_maxS =
        "\1\107\14\uffff\1\47\17\uffff";
    static final String DFA34_acceptS =
        "\1\uffff\1\2\16\uffff\1\1\14\uffff";
    static final String DFA34_specialS =
        "\35\uffff}>";
    static final String[] DFA34_transitionS = {
            "\2\1\25\uffff\1\20\2\uffff\1\1\2\uffff\1\1\5\uffff\2\1\4\uffff"+
            "\12\20\10\1\10\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\42\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "()* loopback of 1154:15: (modifierGen+= modifier )*";
        }
    }
    static final String DFA36_eotS =
        "\47\uffff";
    static final String DFA36_eofS =
        "\47\uffff";
    static final String DFA36_minS =
        "\1\4\1\uffff\11\4\5\uffff\4\0\1\uffff\20\0\2\uffff";
    static final String DFA36_maxS =
        "\1\107\1\uffff\1\101\10\51\5\uffff\4\0\1\uffff\20\0\2\uffff";
    static final String DFA36_acceptS =
        "\1\uffff\1\1\11\uffff\1\4\1\6\1\uffff\1\7\5\uffff\1\5\20\uffff"+
        "\1\2\1\3";
    static final String DFA36_specialS =
        "\20\uffff\1\0\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
        "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\uffff}>";
    static final String[] DFA36_transitionS = {
            "\1\2\1\16\30\uffff\1\16\2\uffff\1\1\5\uffff\1\14\1\13\16\uffff"+
            "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\10\uffff\1\14",
            "",
            "\1\23\27\uffff\1\21\4\uffff\1\20\7\uffff\1\22\27\uffff\1\24",
            "\1\26\44\uffff\1\25",
            "\1\30\44\uffff\1\27",
            "\1\32\44\uffff\1\31",
            "\1\34\44\uffff\1\33",
            "\1\36\44\uffff\1\35",
            "\1\40\44\uffff\1\37",
            "\1\42\44\uffff\1\41",
            "\1\44\44\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA36_eot = DFA.unpackEncodedString(DFA36_eotS);
    static final short[] DFA36_eof = DFA.unpackEncodedString(DFA36_eofS);
    static final char[] DFA36_min = DFA.unpackEncodedStringToUnsignedChars(DFA36_minS);
    static final char[] DFA36_max = DFA.unpackEncodedStringToUnsignedChars(DFA36_maxS);
    static final short[] DFA36_accept = DFA.unpackEncodedString(DFA36_acceptS);
    static final short[] DFA36_special = DFA.unpackEncodedString(DFA36_specialS);
    static final short[][] DFA36_transition;

    static {
        int numStates = DFA36_transitionS.length;
        DFA36_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA36_transition[i] = DFA.unpackEncodedString(DFA36_transitionS[i]);
        }
    }

    class DFA36 extends DFA {

        public DFA36(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 36;
            this.eot = DFA36_eot;
            this.eof = DFA36_eof;
            this.min = DFA36_min;
            this.max = DFA36_max;
            this.accept = DFA36_accept;
            this.special = DFA36_special;
            this.transition = DFA36_transition;
        }
        public String getDescription() {
            return "1184:1: memberDecl returns [Node returnNode] : (genericMethodOrConstructorDeclGen+= genericMethodOrConstructorDecl | methodDeclarationGen+= methodDeclaration | fieldDeclarationGen+= fieldDeclaration | TK_0= 'void' IdentifierGen= Identifier voidMethodDeclaratorRestGen+= voidMethodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA36_16 = input.LA(1);

                         
                        int index36_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA36_17 = input.LA(1);

                         
                        int index36_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA36_18 = input.LA(1);

                         
                        int index36_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_18);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA36_19 = input.LA(1);

                         
                        int index36_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA36_21 = input.LA(1);

                         
                        int index36_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_21);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA36_22 = input.LA(1);

                         
                        int index36_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA36_23 = input.LA(1);

                         
                        int index36_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_23);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA36_24 = input.LA(1);

                         
                        int index36_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_24);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA36_25 = input.LA(1);

                         
                        int index36_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_25);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA36_26 = input.LA(1);

                         
                        int index36_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_26);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA36_27 = input.LA(1);

                         
                        int index36_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_27);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA36_28 = input.LA(1);

                         
                        int index36_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_28);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA36_29 = input.LA(1);

                         
                        int index36_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_29);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA36_30 = input.LA(1);

                         
                        int index36_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_30);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA36_31 = input.LA(1);

                         
                        int index36_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_31);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA36_32 = input.LA(1);

                         
                        int index36_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_32);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA36_33 = input.LA(1);

                         
                        int index36_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_33);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA36_34 = input.LA(1);

                         
                        int index36_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_34);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA36_35 = input.LA(1);

                         
                        int index36_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_35);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA36_36 = input.LA(1);

                         
                        int index36_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred38_Java()) ) {s = 37;}

                        else if ( (synpred39_Java()) ) {s = 38;}

                         
                        input.seek(index36_36);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 36, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA38_eotS =
        "\20\uffff";
    static final String DFA38_eofS =
        "\20\uffff";
    static final String DFA38_minS =
        "\2\4\16\uffff";
    static final String DFA38_maxS =
        "\1\76\1\101\16\uffff";
    static final String DFA38_acceptS =
        "\2\uffff\1\1\14\uffff\1\2";
    static final String DFA38_specialS =
        "\20\uffff}>";
    static final String[] DFA38_transitionS = {
            "\1\1\43\uffff\1\2\16\uffff\10\2",
            "\1\2\27\uffff\1\2\4\uffff\1\2\7\uffff\1\2\27\uffff\1\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA38_eot = DFA.unpackEncodedString(DFA38_eotS);
    static final short[] DFA38_eof = DFA.unpackEncodedString(DFA38_eofS);
    static final char[] DFA38_min = DFA.unpackEncodedStringToUnsignedChars(DFA38_minS);
    static final char[] DFA38_max = DFA.unpackEncodedStringToUnsignedChars(DFA38_maxS);
    static final short[] DFA38_accept = DFA.unpackEncodedString(DFA38_acceptS);
    static final short[] DFA38_special = DFA.unpackEncodedString(DFA38_specialS);
    static final short[][] DFA38_transition;

    static {
        int numStates = DFA38_transitionS.length;
        DFA38_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA38_transition[i] = DFA.unpackEncodedString(DFA38_transitionS[i]);
        }
    }

    class DFA38 extends DFA {

        public DFA38(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 38;
            this.eot = DFA38_eot;
            this.eof = DFA38_eof;
            this.min = DFA38_min;
            this.max = DFA38_max;
            this.accept = DFA38_accept;
            this.special = DFA38_special;
            this.transition = DFA38_transition;
        }
        public String getDescription() {
            return "1371:1: genericMethodOrConstructorRest returns [Node returnNode] : ( (typeGen+= type | TK_0= 'void' ) IdentifierGen= Identifier methodDeclaratorRestGen+= methodDeclaratorRest | IdentifierGen= Identifier constructorDeclaratorRestGen+= constructorDeclaratorRest );";
        }
    }
    static final String DFA37_eotS =
        "\13\uffff";
    static final String DFA37_eofS =
        "\13\uffff";
    static final String DFA37_minS =
        "\1\4\12\uffff";
    static final String DFA37_maxS =
        "\1\76\12\uffff";
    static final String DFA37_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA37_specialS =
        "\13\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\1\43\uffff\1\12\16\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "1372:3: (typeGen+= type | TK_0= 'void' )";
        }
    }
    static final String DFA40_eotS =
        "\34\uffff";
    static final String DFA40_eofS =
        "\34\uffff";
    static final String DFA40_minS =
        "\1\4\33\uffff";
    static final String DFA40_maxS =
        "\1\107\33\uffff";
    static final String DFA40_acceptS =
        "\1\uffff\1\1\31\uffff\1\2";
    static final String DFA40_specialS =
        "\34\uffff}>";
    static final String[] DFA40_transitionS = {
            "\2\1\23\uffff\1\33\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\5\uffff"+
            "\2\1\4\uffff\22\1\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "1527:1: interfaceBodyDeclaration returns [Node returnNode] : ( (modifierGen+= modifier )* interfaceMemberDeclGen+= interfaceMemberDecl | TK_0= ';' );";
        }
    }
    static final String DFA39_eotS =
        "\35\uffff";
    static final String DFA39_eofS =
        "\35\uffff";
    static final String DFA39_minS =
        "\1\4\14\uffff\1\4\17\uffff";
    static final String DFA39_maxS =
        "\1\107\14\uffff\1\47\17\uffff";
    static final String DFA39_acceptS =
        "\1\uffff\1\2\16\uffff\1\1\14\uffff";
    static final String DFA39_specialS =
        "\35\uffff}>";
    static final String[] DFA39_transitionS = {
            "\2\1\25\uffff\1\20\2\uffff\1\1\2\uffff\1\1\5\uffff\2\1\4\uffff"+
            "\12\20\10\1\10\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\20\42\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "()* loopback of 1528:14: (modifierGen+= modifier )*";
        }
    }
    static final String DFA41_eotS =
        "\20\uffff";
    static final String DFA41_eofS =
        "\20\uffff";
    static final String DFA41_minS =
        "\1\4\17\uffff";
    static final String DFA41_maxS =
        "\1\107\17\uffff";
    static final String DFA41_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\uffff\1\5\1\uffff";
    static final String DFA41_specialS =
        "\20\uffff}>";
    static final String[] DFA41_transitionS = {
            "\1\1\1\16\30\uffff\1\16\2\uffff\1\12\5\uffff\1\14\1\13\16\uffff"+
            "\10\1\10\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA41_eot = DFA.unpackEncodedString(DFA41_eotS);
    static final short[] DFA41_eof = DFA.unpackEncodedString(DFA41_eofS);
    static final char[] DFA41_min = DFA.unpackEncodedStringToUnsignedChars(DFA41_minS);
    static final char[] DFA41_max = DFA.unpackEncodedStringToUnsignedChars(DFA41_maxS);
    static final short[] DFA41_accept = DFA.unpackEncodedString(DFA41_acceptS);
    static final short[] DFA41_special = DFA.unpackEncodedString(DFA41_specialS);
    static final short[][] DFA41_transition;

    static {
        int numStates = DFA41_transitionS.length;
        DFA41_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA41_transition[i] = DFA.unpackEncodedString(DFA41_transitionS[i]);
        }
    }

    class DFA41 extends DFA {

        public DFA41(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 41;
            this.eot = DFA41_eot;
            this.eof = DFA41_eof;
            this.min = DFA41_min;
            this.max = DFA41_max;
            this.accept = DFA41_accept;
            this.special = DFA41_special;
            this.transition = DFA41_transition;
        }
        public String getDescription() {
            return "1575:1: interfaceMemberDecl returns [Node returnNode] : (interfaceMethodOrFieldDeclGen+= interfaceMethodOrFieldDecl | interfaceGenericMethodDeclGen+= interfaceGenericMethodDecl | TK_0= 'void' IdentifierGen= Identifier voidInterfaceMethodDeclaratorRestGen+= voidInterfaceMethodDeclaratorRest | interfaceDeclarationGen+= interfaceDeclaration | classDeclarationGen+= classDeclaration );";
        }
    }
    static final String DFA50_eotS =
        "\13\uffff";
    static final String DFA50_eofS =
        "\13\uffff";
    static final String DFA50_minS =
        "\1\4\12\uffff";
    static final String DFA50_maxS =
        "\1\76\12\uffff";
    static final String DFA50_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA50_specialS =
        "\13\uffff}>";
    static final String[] DFA50_transitionS = {
            "\1\1\43\uffff\1\12\16\uffff\10\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA50_eot = DFA.unpackEncodedString(DFA50_eotS);
    static final short[] DFA50_eof = DFA.unpackEncodedString(DFA50_eofS);
    static final char[] DFA50_min = DFA.unpackEncodedStringToUnsignedChars(DFA50_minS);
    static final char[] DFA50_max = DFA.unpackEncodedStringToUnsignedChars(DFA50_maxS);
    static final short[] DFA50_accept = DFA.unpackEncodedString(DFA50_acceptS);
    static final short[] DFA50_special = DFA.unpackEncodedString(DFA50_specialS);
    static final short[][] DFA50_transition;

    static {
        int numStates = DFA50_transitionS.length;
        DFA50_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA50_transition[i] = DFA.unpackEncodedString(DFA50_transitionS[i]);
        }
    }

    class DFA50 extends DFA {

        public DFA50(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 50;
            this.eot = DFA50_eot;
            this.eof = DFA50_eof;
            this.min = DFA50_min;
            this.max = DFA50_max;
            this.accept = DFA50_accept;
            this.special = DFA50_special;
            this.transition = DFA50_transition;
        }
        public String getDescription() {
            return "1985:37: (typeGen+= type | TK_0= 'void' )";
        }
    }
    static final String DFA60_eotS =
        "\40\uffff";
    static final String DFA60_eofS =
        "\40\uffff";
    static final String DFA60_minS =
        "\1\4\37\uffff";
    static final String DFA60_maxS =
        "\1\161\37\uffff";
    static final String DFA60_acceptS =
        "\1\uffff\1\1\1\2\35\uffff";
    static final String DFA60_specialS =
        "\40\uffff}>";
    static final String[] DFA60_transitionS = {
            "\1\2\1\uffff\6\2\25\uffff\1\2\3\uffff\1\1\2\uffff\1\2\16\uffff"+
            "\10\2\1\uffff\2\2\2\uffff\3\2\41\uffff\2\2\2\uffff\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA60_eot = DFA.unpackEncodedString(DFA60_eotS);
    static final short[] DFA60_eof = DFA.unpackEncodedString(DFA60_eofS);
    static final char[] DFA60_min = DFA.unpackEncodedStringToUnsignedChars(DFA60_minS);
    static final char[] DFA60_max = DFA.unpackEncodedStringToUnsignedChars(DFA60_maxS);
    static final short[] DFA60_accept = DFA.unpackEncodedString(DFA60_acceptS);
    static final short[] DFA60_special = DFA.unpackEncodedString(DFA60_specialS);
    static final short[][] DFA60_transition;

    static {
        int numStates = DFA60_transitionS.length;
        DFA60_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA60_transition[i] = DFA.unpackEncodedString(DFA60_transitionS[i]);
        }
    }

    class DFA60 extends DFA {

        public DFA60(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 60;
            this.eot = DFA60_eot;
            this.eof = DFA60_eof;
            this.min = DFA60_min;
            this.max = DFA60_max;
            this.accept = DFA60_accept;
            this.special = DFA60_special;
            this.transition = DFA60_transition;
        }
        public String getDescription() {
            return "2455:1: variableInitializer returns [Node returnNode] : (arrayInitializerGen+= arrayInitializer | expressionGen+= expression );";
        }
    }
    static final String DFA63_eotS =
        "\41\uffff";
    static final String DFA63_eofS =
        "\41\uffff";
    static final String DFA63_minS =
        "\1\4\40\uffff";
    static final String DFA63_maxS =
        "\1\161\40\uffff";
    static final String DFA63_acceptS =
        "\1\uffff\1\1\36\uffff\1\2";
    static final String DFA63_specialS =
        "\41\uffff}>";
    static final String[] DFA63_transitionS = {
            "\1\1\1\uffff\6\1\25\uffff\1\1\3\uffff\1\1\1\40\1\uffff\1\1"+
            "\16\uffff\10\1\1\uffff\2\1\2\uffff\3\1\41\uffff\2\1\2\uffff"+
            "\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA63_eot = DFA.unpackEncodedString(DFA63_eotS);
    static final short[] DFA63_eof = DFA.unpackEncodedString(DFA63_eofS);
    static final char[] DFA63_min = DFA.unpackEncodedStringToUnsignedChars(DFA63_minS);
    static final char[] DFA63_max = DFA.unpackEncodedStringToUnsignedChars(DFA63_maxS);
    static final short[] DFA63_accept = DFA.unpackEncodedString(DFA63_acceptS);
    static final short[] DFA63_special = DFA.unpackEncodedString(DFA63_specialS);
    static final short[][] DFA63_transition;

    static {
        int numStates = DFA63_transitionS.length;
        DFA63_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA63_transition[i] = DFA.unpackEncodedString(DFA63_transitionS[i]);
        }
    }

    class DFA63 extends DFA {

        public DFA63(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 63;
            this.eot = DFA63_eot;
            this.eof = DFA63_eof;
            this.min = DFA63_min;
            this.max = DFA63_max;
            this.accept = DFA63_accept;
            this.special = DFA63_special;
            this.transition = DFA63_transition;
        }
        public String getDescription() {
            return "2495:12: (variableInitializerGen+= variableInitializer (TK_1= ',' variableInitializerGen_1+= variableInitializer )* (TK_2= ',' )? )?";
        }
    }
    static final String DFA61_eotS =
        "\43\uffff";
    static final String DFA61_eofS =
        "\43\uffff";
    static final String DFA61_minS =
        "\1\42\1\4\41\uffff";
    static final String DFA61_maxS =
        "\1\46\1\161\41\uffff";
    static final String DFA61_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\36\uffff";
    static final String DFA61_specialS =
        "\43\uffff}>";
    static final String[] DFA61_transitionS = {
            "\1\1\3\uffff\1\2",
            "\1\4\1\uffff\6\4\25\uffff\1\4\3\uffff\1\4\1\2\1\uffff\1\4"+
            "\16\uffff\10\4\1\uffff\2\4\2\uffff\3\4\41\uffff\2\4\2\uffff"+
            "\6\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA61_eot = DFA.unpackEncodedString(DFA61_eotS);
    static final short[] DFA61_eof = DFA.unpackEncodedString(DFA61_eofS);
    static final char[] DFA61_min = DFA.unpackEncodedStringToUnsignedChars(DFA61_minS);
    static final char[] DFA61_max = DFA.unpackEncodedStringToUnsignedChars(DFA61_maxS);
    static final short[] DFA61_accept = DFA.unpackEncodedString(DFA61_acceptS);
    static final short[] DFA61_special = DFA.unpackEncodedString(DFA61_specialS);
    static final short[][] DFA61_transition;

    static {
        int numStates = DFA61_transitionS.length;
        DFA61_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA61_transition[i] = DFA.unpackEncodedString(DFA61_transitionS[i]);
        }
    }

    class DFA61 extends DFA {

        public DFA61(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 61;
            this.eot = DFA61_eot;
            this.eof = DFA61_eof;
            this.min = DFA61_min;
            this.max = DFA61_max;
            this.accept = DFA61_accept;
            this.special = DFA61_special;
            this.transition = DFA61_transition;
        }
        public String getDescription() {
            return "()* loopback of 2495:57: (TK_1= ',' variableInitializerGen_1+= variableInitializer )*";
        }
    }
    static final String DFA64_eotS =
        "\15\uffff";
    static final String DFA64_eofS =
        "\15\uffff";
    static final String DFA64_minS =
        "\1\33\14\uffff";
    static final String DFA64_maxS =
        "\1\107\14\uffff";
    static final String DFA64_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14";
    static final String DFA64_specialS =
        "\15\uffff}>";
    static final String[] DFA64_transitionS = {
            "\1\5\21\uffff\1\2\1\3\1\4\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
            "\20\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA64_eot = DFA.unpackEncodedString(DFA64_eotS);
    static final short[] DFA64_eof = DFA.unpackEncodedString(DFA64_eofS);
    static final char[] DFA64_min = DFA.unpackEncodedStringToUnsignedChars(DFA64_minS);
    static final char[] DFA64_max = DFA.unpackEncodedStringToUnsignedChars(DFA64_maxS);
    static final short[] DFA64_accept = DFA.unpackEncodedString(DFA64_acceptS);
    static final short[] DFA64_special = DFA.unpackEncodedString(DFA64_specialS);
    static final short[][] DFA64_transition;

    static {
        int numStates = DFA64_transitionS.length;
        DFA64_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA64_transition[i] = DFA.unpackEncodedString(DFA64_transitionS[i]);
        }
    }

    class DFA64 extends DFA {

        public DFA64(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 64;
            this.eot = DFA64_eot;
            this.eof = DFA64_eof;
            this.min = DFA64_min;
            this.max = DFA64_max;
            this.accept = DFA64_accept;
            this.special = DFA64_special;
            this.transition = DFA64_transition;
        }
        public String getDescription() {
            return "2566:1: modifier returns [Node returnNode] : (annotationGen+= annotation | TK_0= 'public' | TK_0= 'protected' | TK_0= 'private' | TK_0= 'static' | TK_0= 'abstract' | TK_0= 'final' | TK_0= 'native' | TK_0= 'synchronized' | TK_0= 'transient' | TK_0= 'volatile' | TK_0= 'strictfp' );";
        }
    }
    static final String DFA72_eotS =
        "\12\uffff";
    static final String DFA72_eofS =
        "\12\uffff";
    static final String DFA72_minS =
        "\1\4\11\uffff";
    static final String DFA72_maxS =
        "\1\76\11\uffff";
    static final String DFA72_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA72_specialS =
        "\12\uffff}>";
    static final String[] DFA72_transitionS = {
            "\1\1\62\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA72_eot = DFA.unpackEncodedString(DFA72_eotS);
    static final short[] DFA72_eof = DFA.unpackEncodedString(DFA72_eofS);
    static final char[] DFA72_min = DFA.unpackEncodedStringToUnsignedChars(DFA72_minS);
    static final char[] DFA72_max = DFA.unpackEncodedStringToUnsignedChars(DFA72_maxS);
    static final short[] DFA72_accept = DFA.unpackEncodedString(DFA72_acceptS);
    static final short[] DFA72_special = DFA.unpackEncodedString(DFA72_specialS);
    static final short[][] DFA72_transition;

    static {
        int numStates = DFA72_transitionS.length;
        DFA72_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA72_transition[i] = DFA.unpackEncodedString(DFA72_transitionS[i]);
        }
    }

    class DFA72 extends DFA {

        public DFA72(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 72;
            this.eot = DFA72_eot;
            this.eof = DFA72_eof;
            this.min = DFA72_min;
            this.max = DFA72_max;
            this.accept = DFA72_accept;
            this.special = DFA72_special;
            this.transition = DFA72_transition;
        }
        public String getDescription() {
            return "2896:1: type returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* (TK_1= '[' TK_2= ']' )* | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* );";
        }
    }
    static final String DFA67_eotS =
        "\54\uffff";
    static final String DFA67_eofS =
        "\1\2\53\uffff";
    static final String DFA67_minS =
        "\2\4\52\uffff";
    static final String DFA67_maxS =
        "\1\146\1\77\52\uffff";
    static final String DFA67_acceptS =
        "\2\uffff\1\2\37\uffff\1\1\11\uffff";
    static final String DFA67_specialS =
        "\54\uffff}>";
    static final String[] DFA67_transitionS = {
            "\1\2\24\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\1\5\2\2\uffff\2"+
            "\2\1\uffff\1\2\22\uffff\1\2\2\uffff\2\2\6\uffff\1\2\16\uffff"+
            "\16\2",
            "\1\42\34\uffff\1\2\25\uffff\11\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA67_eot = DFA.unpackEncodedString(DFA67_eotS);
    static final short[] DFA67_eof = DFA.unpackEncodedString(DFA67_eofS);
    static final char[] DFA67_min = DFA.unpackEncodedStringToUnsignedChars(DFA67_minS);
    static final char[] DFA67_max = DFA.unpackEncodedStringToUnsignedChars(DFA67_maxS);
    static final short[] DFA67_accept = DFA.unpackEncodedString(DFA67_acceptS);
    static final short[] DFA67_special = DFA.unpackEncodedString(DFA67_specialS);
    static final short[][] DFA67_transition;

    static {
        int numStates = DFA67_transitionS.length;
        DFA67_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA67_transition[i] = DFA.unpackEncodedString(DFA67_transitionS[i]);
        }
    }

    class DFA67 extends DFA {

        public DFA67(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 67;
            this.eot = DFA67_eot;
            this.eof = DFA67_eof;
            this.min = DFA67_min;
            this.max = DFA67_max;
            this.accept = DFA67_accept;
            this.special = DFA67_special;
            this.transition = DFA67_transition;
        }
        public String getDescription() {
            return "2897:28: (typeArgumentsGen+= typeArguments )?";
        }
    }
    static final String DFA69_eotS =
        "\41\uffff";
    static final String DFA69_eofS =
        "\1\1\40\uffff";
    static final String DFA69_minS =
        "\1\4\40\uffff";
    static final String DFA69_maxS =
        "\1\146\40\uffff";
    static final String DFA69_acceptS =
        "\1\uffff\1\2\36\uffff\1\1";
    static final String DFA69_specialS =
        "\41\uffff}>";
    static final String[] DFA69_transitionS = {
            "\1\1\24\uffff\1\1\2\uffff\1\40\3\uffff\7\1\2\uffff\2\1\1\uffff"+
            "\1\1\22\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\16\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA69_eot = DFA.unpackEncodedString(DFA69_eotS);
    static final short[] DFA69_eof = DFA.unpackEncodedString(DFA69_eofS);
    static final char[] DFA69_min = DFA.unpackEncodedStringToUnsignedChars(DFA69_minS);
    static final char[] DFA69_max = DFA.unpackEncodedStringToUnsignedChars(DFA69_maxS);
    static final short[] DFA69_accept = DFA.unpackEncodedString(DFA69_acceptS);
    static final short[] DFA69_special = DFA.unpackEncodedString(DFA69_specialS);
    static final short[][] DFA69_transition;

    static {
        int numStates = DFA69_transitionS.length;
        DFA69_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA69_transition[i] = DFA.unpackEncodedString(DFA69_transitionS[i]);
        }
    }

    class DFA69 extends DFA {

        public DFA69(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 69;
            this.eot = DFA69_eot;
            this.eof = DFA69_eof;
            this.min = DFA69_min;
            this.max = DFA69_max;
            this.accept = DFA69_accept;
            this.special = DFA69_special;
            this.transition = DFA69_transition;
        }
        public String getDescription() {
            return "()* loopback of 2897:63: (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )*";
        }
    }
    static final String DFA68_eotS =
        "\54\uffff";
    static final String DFA68_eofS =
        "\1\2\53\uffff";
    static final String DFA68_minS =
        "\2\4\52\uffff";
    static final String DFA68_maxS =
        "\1\146\1\77\52\uffff";
    static final String DFA68_acceptS =
        "\2\uffff\1\2\37\uffff\1\1\11\uffff";
    static final String DFA68_specialS =
        "\54\uffff}>";
    static final String[] DFA68_transitionS = {
            "\1\2\24\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\1\5\2\2\uffff\2"+
            "\2\1\uffff\1\2\22\uffff\1\2\2\uffff\2\2\6\uffff\1\2\16\uffff"+
            "\16\2",
            "\1\42\34\uffff\1\2\25\uffff\11\42",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA68_eot = DFA.unpackEncodedString(DFA68_eotS);
    static final short[] DFA68_eof = DFA.unpackEncodedString(DFA68_eofS);
    static final char[] DFA68_min = DFA.unpackEncodedStringToUnsignedChars(DFA68_minS);
    static final char[] DFA68_max = DFA.unpackEncodedStringToUnsignedChars(DFA68_maxS);
    static final short[] DFA68_accept = DFA.unpackEncodedString(DFA68_acceptS);
    static final short[] DFA68_special = DFA.unpackEncodedString(DFA68_specialS);
    static final short[][] DFA68_transition;

    static {
        int numStates = DFA68_transitionS.length;
        DFA68_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA68_transition[i] = DFA.unpackEncodedString(DFA68_transitionS[i]);
        }
    }

    class DFA68 extends DFA {

        public DFA68(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 68;
            this.eot = DFA68_eot;
            this.eof = DFA68_eof;
            this.min = DFA68_min;
            this.max = DFA68_max;
            this.accept = DFA68_accept;
            this.special = DFA68_special;
            this.transition = DFA68_transition;
        }
        public String getDescription() {
            return "2897:106: (typeArgumentsGen_1+= typeArguments )?";
        }
    }
    static final String DFA70_eotS =
        "\40\uffff";
    static final String DFA70_eofS =
        "\1\1\37\uffff";
    static final String DFA70_minS =
        "\1\4\37\uffff";
    static final String DFA70_maxS =
        "\1\146\37\uffff";
    static final String DFA70_acceptS =
        "\1\uffff\1\2\35\uffff\1\1";
    static final String DFA70_specialS =
        "\40\uffff}>";
    static final String[] DFA70_transitionS = {
            "\1\1\24\uffff\1\1\6\uffff\7\1\2\uffff\1\37\1\1\1\uffff\1\1"+
            "\22\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\16\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA70_eot = DFA.unpackEncodedString(DFA70_eotS);
    static final short[] DFA70_eof = DFA.unpackEncodedString(DFA70_eofS);
    static final char[] DFA70_min = DFA.unpackEncodedStringToUnsignedChars(DFA70_minS);
    static final char[] DFA70_max = DFA.unpackEncodedStringToUnsignedChars(DFA70_maxS);
    static final short[] DFA70_accept = DFA.unpackEncodedString(DFA70_acceptS);
    static final short[] DFA70_special = DFA.unpackEncodedString(DFA70_specialS);
    static final short[][] DFA70_transition;

    static {
        int numStates = DFA70_transitionS.length;
        DFA70_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA70_transition[i] = DFA.unpackEncodedString(DFA70_transitionS[i]);
        }
    }

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = DFA70_eot;
            this.eof = DFA70_eof;
            this.min = DFA70_min;
            this.max = DFA70_max;
            this.accept = DFA70_accept;
            this.special = DFA70_special;
            this.transition = DFA70_transition;
        }
        public String getDescription() {
            return "()* loopback of 2897:146: (TK_1= '[' TK_2= ']' )*";
        }
    }
    static final String DFA71_eotS =
        "\40\uffff";
    static final String DFA71_eofS =
        "\1\1\37\uffff";
    static final String DFA71_minS =
        "\1\4\37\uffff";
    static final String DFA71_maxS =
        "\1\146\37\uffff";
    static final String DFA71_acceptS =
        "\1\uffff\1\2\35\uffff\1\1";
    static final String DFA71_specialS =
        "\40\uffff}>";
    static final String[] DFA71_transitionS = {
            "\1\1\24\uffff\1\1\6\uffff\7\1\2\uffff\1\37\1\1\1\uffff\1\1"+
            "\22\uffff\1\1\2\uffff\2\1\6\uffff\1\1\16\uffff\16\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA71_eot = DFA.unpackEncodedString(DFA71_eotS);
    static final short[] DFA71_eof = DFA.unpackEncodedString(DFA71_eofS);
    static final char[] DFA71_min = DFA.unpackEncodedStringToUnsignedChars(DFA71_minS);
    static final char[] DFA71_max = DFA.unpackEncodedStringToUnsignedChars(DFA71_maxS);
    static final short[] DFA71_accept = DFA.unpackEncodedString(DFA71_acceptS);
    static final short[] DFA71_special = DFA.unpackEncodedString(DFA71_specialS);
    static final short[][] DFA71_transition;

    static {
        int numStates = DFA71_transitionS.length;
        DFA71_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA71_transition[i] = DFA.unpackEncodedString(DFA71_transitionS[i]);
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = DFA71_eot;
            this.eof = DFA71_eof;
            this.min = DFA71_min;
            this.max = DFA71_max;
            this.accept = DFA71_accept;
            this.special = DFA71_special;
            this.transition = DFA71_transition;
        }
        public String getDescription() {
            return "()* loopback of 2976:36: (TK_0= '[' TK_1= ']' )*";
        }
    }
    static final String DFA78_eotS =
        "\13\uffff";
    static final String DFA78_eofS =
        "\13\uffff";
    static final String DFA78_minS =
        "\1\4\12\uffff";
    static final String DFA78_maxS =
        "\1\77\12\uffff";
    static final String DFA78_acceptS =
        "\1\uffff\1\1\10\uffff\1\2";
    static final String DFA78_specialS =
        "\13\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\1\62\uffff\10\1\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "3254:1: typeArgument returns [Node returnNode] : (typeGen+= type | TK_0= '?' ( (TK_1= 'extends' | TK_2= 'super' ) typeGen+= type )? );";
        }
    }
    static final String DFA80_eotS =
        "\15\uffff";
    static final String DFA80_eofS =
        "\15\uffff";
    static final String DFA80_minS =
        "\1\4\14\uffff";
    static final String DFA80_maxS =
        "\1\107\14\uffff";
    static final String DFA80_acceptS =
        "\1\uffff\1\1\12\uffff\1\2";
    static final String DFA80_specialS =
        "\15\uffff}>";
    static final String[] DFA80_transitionS = {
            "\1\1\54\uffff\1\1\5\uffff\10\1\3\uffff\1\14\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA80_eot = DFA.unpackEncodedString(DFA80_eotS);
    static final short[] DFA80_eof = DFA.unpackEncodedString(DFA80_eofS);
    static final char[] DFA80_min = DFA.unpackEncodedStringToUnsignedChars(DFA80_minS);
    static final char[] DFA80_max = DFA.unpackEncodedStringToUnsignedChars(DFA80_maxS);
    static final short[] DFA80_accept = DFA.unpackEncodedString(DFA80_acceptS);
    static final short[] DFA80_special = DFA.unpackEncodedString(DFA80_specialS);
    static final short[][] DFA80_transition;

    static {
        int numStates = DFA80_transitionS.length;
        DFA80_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA80_transition[i] = DFA.unpackEncodedString(DFA80_transitionS[i]);
        }
    }

    class DFA80 extends DFA {

        public DFA80(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 80;
            this.eot = DFA80_eot;
            this.eof = DFA80_eof;
            this.min = DFA80_min;
            this.max = DFA80_max;
            this.accept = DFA80_accept;
            this.special = DFA80_special;
            this.transition = DFA80_transition;
        }
        public String getDescription() {
            return "3366:35: (formalParameterDeclsGen+= formalParameterDecls )?";
        }
    }
    static final String DFA81_eotS =
        "\14\uffff";
    static final String DFA81_eofS =
        "\14\uffff";
    static final String DFA81_minS =
        "\1\4\13\uffff";
    static final String DFA81_maxS =
        "\1\107\13\uffff";
    static final String DFA81_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA81_specialS =
        "\14\uffff}>";
    static final String[] DFA81_transitionS = {
            "\1\1\54\uffff\1\12\5\uffff\10\1\10\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA81_eot = DFA.unpackEncodedString(DFA81_eotS);
    static final short[] DFA81_eof = DFA.unpackEncodedString(DFA81_eofS);
    static final char[] DFA81_min = DFA.unpackEncodedStringToUnsignedChars(DFA81_minS);
    static final char[] DFA81_max = DFA.unpackEncodedStringToUnsignedChars(DFA81_maxS);
    static final short[] DFA81_accept = DFA.unpackEncodedString(DFA81_acceptS);
    static final short[] DFA81_special = DFA.unpackEncodedString(DFA81_specialS);
    static final short[][] DFA81_transition;

    static {
        int numStates = DFA81_transitionS.length;
        DFA81_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA81_transition[i] = DFA.unpackEncodedString(DFA81_transitionS[i]);
        }
    }

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = DFA81_eot;
            this.eof = DFA81_eof;
            this.min = DFA81_min;
            this.max = DFA81_max;
            this.accept = DFA81_accept;
            this.special = DFA81_special;
            this.transition = DFA81_transition;
        }
        public String getDescription() {
            return "()* loopback of 3405:22: (variableModifierGen+= variableModifier )*";
        }
    }
    static final String DFA86_eotS =
        "\12\uffff";
    static final String DFA86_eofS =
        "\12\uffff";
    static final String DFA86_minS =
        "\1\6\11\uffff";
    static final String DFA86_maxS =
        "\1\106\11\uffff";
    static final String DFA86_acceptS =
        "\1\uffff\1\1\2\uffff\1\2\1\3\1\4\1\5\1\uffff\1\6";
    static final String DFA86_specialS =
        "\12\uffff}>";
    static final String[] DFA86_transitionS = {
            "\1\4\1\5\1\6\3\1\70\uffff\1\11\2\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA86_eot = DFA.unpackEncodedString(DFA86_eotS);
    static final short[] DFA86_eof = DFA.unpackEncodedString(DFA86_eofS);
    static final char[] DFA86_min = DFA.unpackEncodedStringToUnsignedChars(DFA86_minS);
    static final char[] DFA86_max = DFA.unpackEncodedStringToUnsignedChars(DFA86_maxS);
    static final short[] DFA86_accept = DFA.unpackEncodedString(DFA86_acceptS);
    static final short[] DFA86_special = DFA.unpackEncodedString(DFA86_specialS);
    static final short[][] DFA86_transition;

    static {
        int numStates = DFA86_transitionS.length;
        DFA86_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA86_transition[i] = DFA.unpackEncodedString(DFA86_transitionS[i]);
        }
    }

    class DFA86 extends DFA {

        public DFA86(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 86;
            this.eot = DFA86_eot;
            this.eof = DFA86_eof;
            this.min = DFA86_min;
            this.max = DFA86_max;
            this.accept = DFA86_accept;
            this.special = DFA86_special;
            this.transition = DFA86_transition;
        }
        public String getDescription() {
            return "3579:1: literal returns [Node returnNode] : (integerLiteralGen+= integerLiteral | FloatingPointLiteralGen= FloatingPointLiteral | CharacterLiteralGen= CharacterLiteral | StringLiteralGen= StringLiteral | booleanLiteralGen+= booleanLiteral | TK_0= 'null' );";
        }
    }
    static final String DFA89_eotS =
        "\30\uffff";
    static final String DFA89_eofS =
        "\1\1\27\uffff";
    static final String DFA89_minS =
        "\1\4\2\uffff\1\4\22\uffff\1\0\1\uffff";
    static final String DFA89_maxS =
        "\1\107\2\uffff\1\47\22\uffff\1\0\1\uffff";
    static final String DFA89_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA89_specialS =
        "\26\uffff\1\0\1\uffff}>";
    static final String[] DFA89_transitionS = {
            "\2\1\22\uffff\4\1\2\uffff\1\1\10\uffff\1\1\5\uffff\12\1\20"+
            "\uffff\1\3",
            "",
            "",
            "\1\26\42\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            ""
    };

    static final short[] DFA89_eot = DFA.unpackEncodedString(DFA89_eotS);
    static final short[] DFA89_eof = DFA.unpackEncodedString(DFA89_eofS);
    static final char[] DFA89_min = DFA.unpackEncodedStringToUnsignedChars(DFA89_minS);
    static final char[] DFA89_max = DFA.unpackEncodedStringToUnsignedChars(DFA89_maxS);
    static final short[] DFA89_accept = DFA.unpackEncodedString(DFA89_acceptS);
    static final short[] DFA89_special = DFA.unpackEncodedString(DFA89_specialS);
    static final short[][] DFA89_transition;

    static {
        int numStates = DFA89_transitionS.length;
        DFA89_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA89_transition[i] = DFA.unpackEncodedString(DFA89_transitionS[i]);
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = DFA89_eot;
            this.eof = DFA89_eof;
            this.min = DFA89_min;
            this.max = DFA89_max;
            this.accept = DFA89_accept;
            this.special = DFA89_special;
            this.transition = DFA89_transition;
        }
        public String getDescription() {
            return "()+ loopback of 3780:16: (annotationGen+= annotation )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_22 = input.LA(1);

                         
                        int index89_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred120_Java()) ) {s = 23;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index89_22);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA91_eotS =
        "\43\uffff";
    static final String DFA91_eofS =
        "\1\2\42\uffff";
    static final String DFA91_minS =
        "\1\4\42\uffff";
    static final String DFA91_maxS =
        "\1\107\42\uffff";
    static final String DFA91_acceptS =
        "\1\uffff\1\1\1\2\40\uffff";
    static final String DFA91_specialS =
        "\43\uffff}>";
    static final String[] DFA91_transitionS = {
            "\2\2\22\uffff\4\2\2\uffff\1\2\2\uffff\2\2\3\uffff\3\2\4\uffff"+
            "\22\2\2\uffff\1\1\1\2\4\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA91_eot = DFA.unpackEncodedString(DFA91_eotS);
    static final short[] DFA91_eof = DFA.unpackEncodedString(DFA91_eofS);
    static final char[] DFA91_min = DFA.unpackEncodedStringToUnsignedChars(DFA91_minS);
    static final char[] DFA91_max = DFA.unpackEncodedStringToUnsignedChars(DFA91_maxS);
    static final short[] DFA91_accept = DFA.unpackEncodedString(DFA91_acceptS);
    static final short[] DFA91_special = DFA.unpackEncodedString(DFA91_specialS);
    static final short[][] DFA91_transition;

    static {
        int numStates = DFA91_transitionS.length;
        DFA91_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA91_transition[i] = DFA.unpackEncodedString(DFA91_transitionS[i]);
        }
    }

    class DFA91 extends DFA {

        public DFA91(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 91;
            this.eot = DFA91_eot;
            this.eof = DFA91_eof;
            this.min = DFA91_min;
            this.max = DFA91_max;
            this.accept = DFA91_accept;
            this.special = DFA91_special;
            this.transition = DFA91_transition;
        }
        public String getDescription() {
            return "3801:46: (TK_1= '(' (elementValuePairsGen+= elementValuePairs )? TK_2= ')' )?";
        }
    }
    static final String DFA90_eotS =
        "\42\uffff";
    static final String DFA90_eofS =
        "\42\uffff";
    static final String DFA90_minS =
        "\1\4\41\uffff";
    static final String DFA90_maxS =
        "\1\161\41\uffff";
    static final String DFA90_acceptS =
        "\1\uffff\1\1\37\uffff\1\2";
    static final String DFA90_specialS =
        "\42\uffff}>";
    static final String[] DFA90_transitionS = {
            "\1\1\1\uffff\6\1\25\uffff\1\1\3\uffff\1\1\2\uffff\1\1\16\uffff"+
            "\10\1\1\uffff\2\1\1\41\1\uffff\4\1\40\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA90_eot = DFA.unpackEncodedString(DFA90_eotS);
    static final short[] DFA90_eof = DFA.unpackEncodedString(DFA90_eofS);
    static final char[] DFA90_min = DFA.unpackEncodedStringToUnsignedChars(DFA90_minS);
    static final char[] DFA90_max = DFA.unpackEncodedStringToUnsignedChars(DFA90_maxS);
    static final short[] DFA90_accept = DFA.unpackEncodedString(DFA90_acceptS);
    static final short[] DFA90_special = DFA.unpackEncodedString(DFA90_specialS);
    static final short[][] DFA90_transition;

    static {
        int numStates = DFA90_transitionS.length;
        DFA90_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA90_transition[i] = DFA.unpackEncodedString(DFA90_transitionS[i]);
        }
    }

    class DFA90 extends DFA {

        public DFA90(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 90;
            this.eot = DFA90_eot;
            this.eof = DFA90_eof;
            this.min = DFA90_min;
            this.max = DFA90_max;
            this.accept = DFA90_accept;
            this.special = DFA90_special;
            this.transition = DFA90_transition;
        }
        public String getDescription() {
            return "3801:76: (elementValuePairsGen+= elementValuePairs )?";
        }
    }
    static final String DFA92_eotS =
        "\44\uffff";
    static final String DFA92_eofS =
        "\1\1\43\uffff";
    static final String DFA92_minS =
        "\1\4\43\uffff";
    static final String DFA92_maxS =
        "\1\107\43\uffff";
    static final String DFA92_acceptS =
        "\1\uffff\1\2\41\uffff\1\1";
    static final String DFA92_specialS =
        "\44\uffff}>";
    static final String[] DFA92_transitionS = {
            "\2\1\22\uffff\4\1\1\43\1\uffff\1\1\2\uffff\2\1\3\uffff\3\1"+
            "\4\uffff\22\1\2\uffff\2\1\4\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA92_eot = DFA.unpackEncodedString(DFA92_eotS);
    static final short[] DFA92_eof = DFA.unpackEncodedString(DFA92_eofS);
    static final char[] DFA92_min = DFA.unpackEncodedStringToUnsignedChars(DFA92_minS);
    static final char[] DFA92_max = DFA.unpackEncodedStringToUnsignedChars(DFA92_maxS);
    static final short[] DFA92_accept = DFA.unpackEncodedString(DFA92_acceptS);
    static final short[] DFA92_special = DFA.unpackEncodedString(DFA92_specialS);
    static final short[][] DFA92_transition;

    static {
        int numStates = DFA92_transitionS.length;
        DFA92_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA92_transition[i] = DFA.unpackEncodedString(DFA92_transitionS[i]);
        }
    }

    class DFA92 extends DFA {

        public DFA92(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 92;
            this.eot = DFA92_eot;
            this.eof = DFA92_eof;
            this.min = DFA92_min;
            this.max = DFA92_max;
            this.accept = DFA92_accept;
            this.special = DFA92_special;
            this.transition = DFA92_transition;
        }
        public String getDescription() {
            return "()* loopback of 3859:28: (TK_0= '.' IdentifierGen_1_List+= Identifier )*";
        }
    }
    static final String DFA94_eotS =
        "\72\uffff";
    static final String DFA94_eofS =
        "\1\uffff\1\2\70\uffff";
    static final String DFA94_minS =
        "\1\4\1\34\70\uffff";
    static final String DFA94_maxS =
        "\1\161\1\155\70\uffff";
    static final String DFA94_acceptS =
        "\2\uffff\1\2\36\uffff\1\1\30\uffff";
    static final String DFA94_specialS =
        "\72\uffff}>";
    static final String[] DFA94_transitionS = {
            "\1\1\1\uffff\6\2\25\uffff\1\2\3\uffff\1\2\2\uffff\1\2\16\uffff"+
            "\10\2\1\uffff\2\2\2\uffff\4\2\40\uffff\2\2\2\uffff\6\2",
            "\2\2\3\uffff\4\2\4\uffff\1\2\2\uffff\1\41\22\uffff\1\2\1\uffff"+
            "\2\2\36\uffff\15\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA94_eot = DFA.unpackEncodedString(DFA94_eotS);
    static final short[] DFA94_eof = DFA.unpackEncodedString(DFA94_eofS);
    static final char[] DFA94_min = DFA.unpackEncodedStringToUnsignedChars(DFA94_minS);
    static final char[] DFA94_max = DFA.unpackEncodedStringToUnsignedChars(DFA94_maxS);
    static final short[] DFA94_accept = DFA.unpackEncodedString(DFA94_acceptS);
    static final short[] DFA94_special = DFA.unpackEncodedString(DFA94_specialS);
    static final short[][] DFA94_transition;

    static {
        int numStates = DFA94_transitionS.length;
        DFA94_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA94_transition[i] = DFA.unpackEncodedString(DFA94_transitionS[i]);
        }
    }

    class DFA94 extends DFA {

        public DFA94(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 94;
            this.eot = DFA94_eot;
            this.eof = DFA94_eof;
            this.min = DFA94_min;
            this.max = DFA94_max;
            this.accept = DFA94_accept;
            this.special = DFA94_special;
            this.transition = DFA94_transition;
        }
        public String getDescription() {
            return "3950:3: (IdentifierGen= Identifier TK_0= '=' )?";
        }
    }
    static final String DFA95_eotS =
        "\41\uffff";
    static final String DFA95_eofS =
        "\41\uffff";
    static final String DFA95_minS =
        "\1\4\40\uffff";
    static final String DFA95_maxS =
        "\1\161\40\uffff";
    static final String DFA95_acceptS =
        "\1\uffff\1\1\35\uffff\1\2\1\3";
    static final String DFA95_specialS =
        "\41\uffff}>";
    static final String[] DFA95_transitionS = {
            "\1\1\1\uffff\6\1\25\uffff\1\1\3\uffff\1\40\2\uffff\1\1\16\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\1\37\40\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA95_eot = DFA.unpackEncodedString(DFA95_eotS);
    static final short[] DFA95_eof = DFA.unpackEncodedString(DFA95_eofS);
    static final char[] DFA95_min = DFA.unpackEncodedStringToUnsignedChars(DFA95_minS);
    static final char[] DFA95_max = DFA.unpackEncodedStringToUnsignedChars(DFA95_maxS);
    static final short[] DFA95_accept = DFA.unpackEncodedString(DFA95_acceptS);
    static final short[] DFA95_special = DFA.unpackEncodedString(DFA95_specialS);
    static final short[][] DFA95_transition;

    static {
        int numStates = DFA95_transitionS.length;
        DFA95_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA95_transition[i] = DFA.unpackEncodedString(DFA95_transitionS[i]);
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = DFA95_eot;
            this.eof = DFA95_eof;
            this.min = DFA95_min;
            this.max = DFA95_max;
            this.accept = DFA95_accept;
            this.special = DFA95_special;
            this.transition = DFA95_transition;
        }
        public String getDescription() {
            return "3988:1: elementValue returns [Node returnNode] : (conditionalExpressionGen+= conditionalExpression | annotationGen+= annotation | elementValueArrayInitializerGen+= elementValueArrayInitializer );";
        }
    }
    static final String DFA97_eotS =
        "\42\uffff";
    static final String DFA97_eofS =
        "\42\uffff";
    static final String DFA97_minS =
        "\1\4\41\uffff";
    static final String DFA97_maxS =
        "\1\161\41\uffff";
    static final String DFA97_acceptS =
        "\1\uffff\1\1\37\uffff\1\2";
    static final String DFA97_specialS =
        "\42\uffff}>";
    static final String[] DFA97_transitionS = {
            "\1\1\1\uffff\6\1\25\uffff\1\1\3\uffff\1\1\1\41\1\uffff\1\1"+
            "\16\uffff\10\1\1\uffff\2\1\2\uffff\4\1\40\uffff\2\1\2\uffff"+
            "\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA97_eot = DFA.unpackEncodedString(DFA97_eotS);
    static final short[] DFA97_eof = DFA.unpackEncodedString(DFA97_eofS);
    static final char[] DFA97_min = DFA.unpackEncodedStringToUnsignedChars(DFA97_minS);
    static final char[] DFA97_max = DFA.unpackEncodedStringToUnsignedChars(DFA97_maxS);
    static final short[] DFA97_accept = DFA.unpackEncodedString(DFA97_acceptS);
    static final short[] DFA97_special = DFA.unpackEncodedString(DFA97_specialS);
    static final short[][] DFA97_transition;

    static {
        int numStates = DFA97_transitionS.length;
        DFA97_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA97_transition[i] = DFA.unpackEncodedString(DFA97_transitionS[i]);
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = DFA97_eot;
            this.eof = DFA97_eof;
            this.min = DFA97_min;
            this.max = DFA97_max;
            this.accept = DFA97_accept;
            this.special = DFA97_special;
            this.transition = DFA97_transition;
        }
        public String getDescription() {
            return "4046:12: (elementValueGen+= elementValue (TK_1= ',' elementValueGen_1+= elementValue )* )?";
        }
    }
    static final String DFA98_eotS =
        "\32\uffff";
    static final String DFA98_eofS =
        "\32\uffff";
    static final String DFA98_minS =
        "\1\4\31\uffff";
    static final String DFA98_maxS =
        "\1\107\31\uffff";
    static final String DFA98_acceptS =
        "\1\uffff\1\1\27\uffff\1\2";
    static final String DFA98_specialS =
        "\32\uffff}>";
    static final String[] DFA98_transitionS = {
            "\2\1\25\uffff\1\1\2\uffff\1\1\7\uffff\1\31\1\1\5\uffff\22\1"+
            "\10\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA98_eot = DFA.unpackEncodedString(DFA98_eotS);
    static final short[] DFA98_eof = DFA.unpackEncodedString(DFA98_eofS);
    static final char[] DFA98_min = DFA.unpackEncodedStringToUnsignedChars(DFA98_minS);
    static final char[] DFA98_max = DFA.unpackEncodedStringToUnsignedChars(DFA98_maxS);
    static final short[] DFA98_accept = DFA.unpackEncodedString(DFA98_acceptS);
    static final short[] DFA98_special = DFA.unpackEncodedString(DFA98_specialS);
    static final short[][] DFA98_transition;

    static {
        int numStates = DFA98_transitionS.length;
        DFA98_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA98_transition[i] = DFA.unpackEncodedString(DFA98_transitionS[i]);
        }
    }

    class DFA98 extends DFA {

        public DFA98(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 98;
            this.eot = DFA98_eot;
            this.eof = DFA98_eof;
            this.min = DFA98_min;
            this.max = DFA98_max;
            this.accept = DFA98_accept;
            this.special = DFA98_special;
            this.transition = DFA98_transition;
        }
        public String getDescription() {
            return "4157:12: (annotationTypeElementDeclarationsGen+= annotationTypeElementDeclarations )?";
        }
    }
    static final String DFA99_eotS =
        "\33\uffff";
    static final String DFA99_eofS =
        "\1\1\32\uffff";
    static final String DFA99_minS =
        "\1\4\32\uffff";
    static final String DFA99_maxS =
        "\1\107\32\uffff";
    static final String DFA99_acceptS =
        "\1\uffff\1\2\1\uffff\1\1\27\uffff";
    static final String DFA99_specialS =
        "\33\uffff}>";
    static final String[] DFA99_transitionS = {
            "\2\3\25\uffff\1\3\2\uffff\1\3\7\uffff\1\1\1\3\5\uffff\22\3"+
            "\10\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA99_eot = DFA.unpackEncodedString(DFA99_eotS);
    static final short[] DFA99_eof = DFA.unpackEncodedString(DFA99_eofS);
    static final char[] DFA99_min = DFA.unpackEncodedStringToUnsignedChars(DFA99_minS);
    static final char[] DFA99_max = DFA.unpackEncodedStringToUnsignedChars(DFA99_maxS);
    static final short[] DFA99_accept = DFA.unpackEncodedString(DFA99_acceptS);
    static final short[] DFA99_special = DFA.unpackEncodedString(DFA99_specialS);
    static final short[][] DFA99_transition;

    static {
        int numStates = DFA99_transitionS.length;
        DFA99_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA99_transition[i] = DFA.unpackEncodedString(DFA99_transitionS[i]);
        }
    }

    class DFA99 extends DFA {

        public DFA99(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 99;
            this.eot = DFA99_eot;
            this.eof = DFA99_eof;
            this.min = DFA99_min;
            this.max = DFA99_max;
            this.accept = DFA99_accept;
            this.special = DFA99_special;
            this.transition = DFA99_transition;
        }
        public String getDescription() {
            return "()* loopback of 4196:75: (annotationTypeElementDeclarationGen_1+= annotationTypeElementDeclaration )*";
        }
    }
    static final String DFA100_eotS =
        "\33\uffff";
    static final String DFA100_eofS =
        "\33\uffff";
    static final String DFA100_minS =
        "\1\4\14\uffff\1\4\15\uffff";
    static final String DFA100_maxS =
        "\1\107\14\uffff\1\47\15\uffff";
    static final String DFA100_acceptS =
        "\1\uffff\1\2\14\uffff\1\1\14\uffff";
    static final String DFA100_specialS =
        "\33\uffff}>";
    static final String[] DFA100_transitionS = {
            "\2\1\25\uffff\1\16\2\uffff\1\1\10\uffff\1\1\5\uffff\12\16\10"+
            "\1\10\uffff\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16\42\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA100_eot = DFA.unpackEncodedString(DFA100_eotS);
    static final short[] DFA100_eof = DFA.unpackEncodedString(DFA100_eofS);
    static final char[] DFA100_min = DFA.unpackEncodedStringToUnsignedChars(DFA100_minS);
    static final char[] DFA100_max = DFA.unpackEncodedStringToUnsignedChars(DFA100_maxS);
    static final short[] DFA100_accept = DFA.unpackEncodedString(DFA100_acceptS);
    static final short[] DFA100_special = DFA.unpackEncodedString(DFA100_specialS);
    static final short[][] DFA100_transition;

    static {
        int numStates = DFA100_transitionS.length;
        DFA100_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA100_transition[i] = DFA.unpackEncodedString(DFA100_transitionS[i]);
        }
    }

    class DFA100 extends DFA {

        public DFA100(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 100;
            this.eot = DFA100_eot;
            this.eof = DFA100_eof;
            this.min = DFA100_min;
            this.max = DFA100_max;
            this.accept = DFA100_accept;
            this.special = DFA100_special;
            this.transition = DFA100_transition;
        }
        public String getDescription() {
            return "()* loopback of 4227:3: (modifierGen+= modifier )*";
        }
    }
    static final String DFA105_eotS =
        "\22\uffff";
    static final String DFA105_eofS =
        "\22\uffff";
    static final String DFA105_minS =
        "\1\4\12\uffff\1\4\1\uffff\1\47\2\0\2\uffff";
    static final String DFA105_maxS =
        "\1\107\12\uffff\1\4\1\uffff\1\47\2\0\2\uffff";
    static final String DFA105_acceptS =
        "\1\uffff\1\1\10\uffff\1\2\1\uffff\1\3\3\uffff\1\4\1\5";
    static final String DFA105_specialS =
        "\16\uffff\1\0\1\1\2\uffff}>";
    static final String[] DFA105_transitionS = {
            "\1\1\1\13\30\uffff\1\12\10\uffff\1\14\17\uffff\10\1\10\uffff"+
            "\1\15",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\16",
            "",
            "\1\17",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA105_eot = DFA.unpackEncodedString(DFA105_eotS);
    static final short[] DFA105_eof = DFA.unpackEncodedString(DFA105_eofS);
    static final char[] DFA105_min = DFA.unpackEncodedStringToUnsignedChars(DFA105_minS);
    static final char[] DFA105_max = DFA.unpackEncodedStringToUnsignedChars(DFA105_maxS);
    static final short[] DFA105_accept = DFA.unpackEncodedString(DFA105_acceptS);
    static final short[] DFA105_special = DFA.unpackEncodedString(DFA105_specialS);
    static final short[][] DFA105_transition;

    static {
        int numStates = DFA105_transitionS.length;
        DFA105_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA105_transition[i] = DFA.unpackEncodedString(DFA105_transitionS[i]);
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = DFA105_eot;
            this.eof = DFA105_eof;
            this.min = DFA105_min;
            this.max = DFA105_max;
            this.accept = DFA105_accept;
            this.special = DFA105_special;
            this.transition = DFA105_transition;
        }
        public String getDescription() {
            return "4257:1: annotationTypeElementRest returns [Node returnNode] : (typeGen+= type annotationMethodOrConstantRestGen+= annotationMethodOrConstantRest TK_0= ';' | classDeclarationGen+= classDeclaration (TK_0= ';' )? | interfaceDeclarationGen+= interfaceDeclaration (TK_0= ';' )? | enumDeclarationGen+= enumDeclaration (TK_0= ';' )? | annotationTypeDeclarationGen+= annotationTypeDeclaration (TK_0= ';' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_14 = input.LA(1);

                         
                        int index105_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred135_Java()) ) {s = 10;}

                        else if ( (synpred139_Java()) ) {s = 16;}

                         
                        input.seek(index105_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA105_15 = input.LA(1);

                         
                        int index105_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred137_Java()) ) {s = 12;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index105_15);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA101_eotS =
        "\34\uffff";
    static final String DFA101_eofS =
        "\1\2\33\uffff";
    static final String DFA101_minS =
        "\1\4\33\uffff";
    static final String DFA101_maxS =
        "\1\107\33\uffff";
    static final String DFA101_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA101_specialS =
        "\34\uffff}>";
    static final String[] DFA101_transitionS = {
            "\2\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff\2\2\5\uffff"+
            "\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA101_eot = DFA.unpackEncodedString(DFA101_eotS);
    static final short[] DFA101_eof = DFA.unpackEncodedString(DFA101_eofS);
    static final char[] DFA101_min = DFA.unpackEncodedStringToUnsignedChars(DFA101_minS);
    static final char[] DFA101_max = DFA.unpackEncodedStringToUnsignedChars(DFA101_maxS);
    static final short[] DFA101_accept = DFA.unpackEncodedString(DFA101_acceptS);
    static final short[] DFA101_special = DFA.unpackEncodedString(DFA101_specialS);
    static final short[][] DFA101_transition;

    static {
        int numStates = DFA101_transitionS.length;
        DFA101_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA101_transition[i] = DFA.unpackEncodedString(DFA101_transitionS[i]);
        }
    }

    class DFA101 extends DFA {

        public DFA101(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 101;
            this.eot = DFA101_eot;
            this.eof = DFA101_eof;
            this.min = DFA101_min;
            this.max = DFA101_max;
            this.accept = DFA101_accept;
            this.special = DFA101_special;
            this.transition = DFA101_transition;
        }
        public String getDescription() {
            return "4295:48: (TK_0= ';' )?";
        }
    }
    static final String DFA102_eotS =
        "\34\uffff";
    static final String DFA102_eofS =
        "\1\2\33\uffff";
    static final String DFA102_minS =
        "\1\4\33\uffff";
    static final String DFA102_maxS =
        "\1\107\33\uffff";
    static final String DFA102_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA102_specialS =
        "\34\uffff}>";
    static final String[] DFA102_transitionS = {
            "\2\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff\2\2\5\uffff"+
            "\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA102_eot = DFA.unpackEncodedString(DFA102_eotS);
    static final short[] DFA102_eof = DFA.unpackEncodedString(DFA102_eofS);
    static final char[] DFA102_min = DFA.unpackEncodedStringToUnsignedChars(DFA102_minS);
    static final char[] DFA102_max = DFA.unpackEncodedStringToUnsignedChars(DFA102_maxS);
    static final short[] DFA102_accept = DFA.unpackEncodedString(DFA102_acceptS);
    static final short[] DFA102_special = DFA.unpackEncodedString(DFA102_specialS);
    static final short[][] DFA102_transition;

    static {
        int numStates = DFA102_transitionS.length;
        DFA102_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA102_transition[i] = DFA.unpackEncodedString(DFA102_transitionS[i]);
        }
    }

    class DFA102 extends DFA {

        public DFA102(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 102;
            this.eot = DFA102_eot;
            this.eof = DFA102_eof;
            this.min = DFA102_min;
            this.max = DFA102_max;
            this.accept = DFA102_accept;
            this.special = DFA102_special;
            this.transition = DFA102_transition;
        }
        public String getDescription() {
            return "4322:56: (TK_0= ';' )?";
        }
    }
    static final String DFA103_eotS =
        "\34\uffff";
    static final String DFA103_eofS =
        "\1\2\33\uffff";
    static final String DFA103_minS =
        "\1\4\33\uffff";
    static final String DFA103_maxS =
        "\1\107\33\uffff";
    static final String DFA103_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA103_specialS =
        "\34\uffff}>";
    static final String[] DFA103_transitionS = {
            "\2\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff\2\2\5\uffff"+
            "\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA103_eot = DFA.unpackEncodedString(DFA103_eotS);
    static final short[] DFA103_eof = DFA.unpackEncodedString(DFA103_eofS);
    static final char[] DFA103_min = DFA.unpackEncodedStringToUnsignedChars(DFA103_minS);
    static final char[] DFA103_max = DFA.unpackEncodedStringToUnsignedChars(DFA103_maxS);
    static final short[] DFA103_accept = DFA.unpackEncodedString(DFA103_acceptS);
    static final short[] DFA103_special = DFA.unpackEncodedString(DFA103_specialS);
    static final short[][] DFA103_transition;

    static {
        int numStates = DFA103_transitionS.length;
        DFA103_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA103_transition[i] = DFA.unpackEncodedString(DFA103_transitionS[i]);
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = DFA103_eot;
            this.eof = DFA103_eof;
            this.min = DFA103_min;
            this.max = DFA103_max;
            this.accept = DFA103_accept;
            this.special = DFA103_special;
            this.transition = DFA103_transition;
        }
        public String getDescription() {
            return "4349:46: (TK_0= ';' )?";
        }
    }
    static final String DFA104_eotS =
        "\34\uffff";
    static final String DFA104_eofS =
        "\1\2\33\uffff";
    static final String DFA104_minS =
        "\1\4\33\uffff";
    static final String DFA104_maxS =
        "\1\107\33\uffff";
    static final String DFA104_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA104_specialS =
        "\34\uffff}>";
    static final String[] DFA104_transitionS = {
            "\2\2\23\uffff\1\1\1\uffff\1\2\2\uffff\1\2\7\uffff\2\2\5\uffff"+
            "\22\2\10\uffff\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA104_eot = DFA.unpackEncodedString(DFA104_eotS);
    static final short[] DFA104_eof = DFA.unpackEncodedString(DFA104_eofS);
    static final char[] DFA104_min = DFA.unpackEncodedStringToUnsignedChars(DFA104_minS);
    static final char[] DFA104_max = DFA.unpackEncodedStringToUnsignedChars(DFA104_maxS);
    static final short[] DFA104_accept = DFA.unpackEncodedString(DFA104_acceptS);
    static final short[] DFA104_special = DFA.unpackEncodedString(DFA104_specialS);
    static final short[][] DFA104_transition;

    static {
        int numStates = DFA104_transitionS.length;
        DFA104_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA104_transition[i] = DFA.unpackEncodedString(DFA104_transitionS[i]);
        }
    }

    class DFA104 extends DFA {

        public DFA104(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 104;
            this.eot = DFA104_eot;
            this.eof = DFA104_eof;
            this.min = DFA104_min;
            this.max = DFA104_max;
            this.accept = DFA104_accept;
            this.special = DFA104_special;
            this.transition = DFA104_transition;
        }
        public String getDescription() {
            return "4376:66: (TK_0= ';' )?";
        }
    }
    static final String DFA108_eotS =
        "\74\uffff";
    static final String DFA108_eofS =
        "\74\uffff";
    static final String DFA108_minS =
        "\1\4\73\uffff";
    static final String DFA108_maxS =
        "\1\161\73\uffff";
    static final String DFA108_acceptS =
        "\1\uffff\1\2\1\1\71\uffff";
    static final String DFA108_specialS =
        "\74\uffff}>";
    static final String[] DFA108_transitionS = {
            "\10\2\15\uffff\1\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\1\2\1\1\2\2\4\uffff\22\2\1\uffff\2\2\2\uffff\4\2\1\uffff\1"+
            "\2\1\uffff\1\2\1\uffff\4\2\1\uffff\5\2\21\uffff\2\2\2\uffff"+
            "\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA108_eot = DFA.unpackEncodedString(DFA108_eotS);
    static final short[] DFA108_eof = DFA.unpackEncodedString(DFA108_eofS);
    static final char[] DFA108_min = DFA.unpackEncodedStringToUnsignedChars(DFA108_minS);
    static final char[] DFA108_max = DFA.unpackEncodedStringToUnsignedChars(DFA108_maxS);
    static final short[] DFA108_accept = DFA.unpackEncodedString(DFA108_acceptS);
    static final short[] DFA108_special = DFA.unpackEncodedString(DFA108_specialS);
    static final short[][] DFA108_transition;

    static {
        int numStates = DFA108_transitionS.length;
        DFA108_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA108_transition[i] = DFA.unpackEncodedString(DFA108_transitionS[i]);
        }
    }

    class DFA108 extends DFA {

        public DFA108(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 108;
            this.eot = DFA108_eot;
            this.eof = DFA108_eof;
            this.min = DFA108_min;
            this.max = DFA108_max;
            this.accept = DFA108_accept;
            this.special = DFA108_special;
            this.transition = DFA108_transition;
        }
        public String getDescription() {
            return "()* loopback of 4546:29: (blockStatementGen+= blockStatement )*";
        }
    }
    static final String DFA109_eotS =
        "\u009e\uffff";
    static final String DFA109_eofS =
        "\u009e\uffff";
    static final String DFA109_minS =
        "\14\4\6\uffff\1\5\53\uffff\1\0\5\uffff\1\0\17\uffff\1\0\1\uffff"+
        "\3\0\35\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\22\uffff";
    static final String DFA109_maxS =
        "\1\161\1\107\1\47\1\155\10\51\6\uffff\1\107\53\uffff\1\0\5\uffff"+
        "\1\0\17\uffff\1\0\1\uffff\3\0\35\uffff\1\0\2\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\22"+
        "\uffff";
    static final String DFA109_acceptS =
        "\14\uffff\1\2\14\uffff\1\3\60\uffff\1\1\123\uffff";
    static final String DFA109_specialS =
        "\76\uffff\1\0\5\uffff\1\1\17\uffff\1\2\1\uffff\1\3\1\4\1\5\35\uffff"+
        "\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff\1\11\2\uffff\1\12\2\uffff"+
        "\1\13\2\uffff\1\14\2\uffff\1\15\22\uffff}>";
    static final String[] DFA109_transitionS = {
            "\1\3\1\14\6\31\15\uffff\1\31\1\uffff\1\14\2\uffff\1\14\2\uffff"+
            "\1\31\3\uffff\1\31\1\uffff\1\14\1\31\4\uffff\4\14\1\1\1\14\1"+
            "\22\3\14\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\2\31\2"+
            "\uffff\3\31\1\2\1\uffff\1\31\1\uffff\1\31\1\uffff\4\31\1\uffff"+
            "\5\31\21\uffff\2\31\2\uffff\6\31",
            "\1\112\1\14\25\uffff\1\14\2\uffff\1\14\10\uffff\1\14\5\uffff"+
            "\4\14\1\104\5\14\10\112\10\uffff\1\76",
            "\1\124\42\uffff\1\14",
            "\1\112\24\uffff\1\31\2\uffff\1\127\1\31\3\uffff\1\126\1\uffff"+
            "\2\31\4\uffff\1\130\2\uffff\1\31\22\uffff\1\31\1\uffff\1\31"+
            "\10\uffff\1\31\16\uffff\25\31",
            "\1\112\27\uffff\1\31\14\uffff\1\166",
            "\1\112\27\uffff\1\31\14\uffff\1\171",
            "\1\112\27\uffff\1\31\14\uffff\1\174",
            "\1\112\27\uffff\1\31\14\uffff\1\177",
            "\1\112\27\uffff\1\31\14\uffff\1\u0082",
            "\1\112\27\uffff\1\31\14\uffff\1\u0085",
            "\1\112\27\uffff\1\31\14\uffff\1\u0088",
            "\1\112\27\uffff\1\31\14\uffff\1\u008b",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\25\uffff\1\14\2\uffff\1\14\10\uffff\1\14\5\uffff\12"+
            "\14\12\uffff\1\31\5\uffff\1\14",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA109_eot = DFA.unpackEncodedString(DFA109_eotS);
    static final short[] DFA109_eof = DFA.unpackEncodedString(DFA109_eofS);
    static final char[] DFA109_min = DFA.unpackEncodedStringToUnsignedChars(DFA109_minS);
    static final char[] DFA109_max = DFA.unpackEncodedStringToUnsignedChars(DFA109_maxS);
    static final short[] DFA109_accept = DFA.unpackEncodedString(DFA109_acceptS);
    static final short[] DFA109_special = DFA.unpackEncodedString(DFA109_specialS);
    static final short[][] DFA109_transition;

    static {
        int numStates = DFA109_transitionS.length;
        DFA109_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA109_transition[i] = DFA.unpackEncodedString(DFA109_transitionS[i]);
        }
    }

    class DFA109 extends DFA {

        public DFA109(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 109;
            this.eot = DFA109_eot;
            this.eof = DFA109_eof;
            this.min = DFA109_min;
            this.max = DFA109_max;
            this.accept = DFA109_accept;
            this.special = DFA109_special;
            this.transition = DFA109_transition;
        }
        public String getDescription() {
            return "4584:1: blockStatement returns [Node returnNode] : (localVariableDeclarationGen+= localVariableDeclaration | classOrInterfaceDeclarationGen+= classOrInterfaceDeclaration | statementGen+= statement );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA109_62 = input.LA(1);

                         
                        int index109_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (synpred145_Java()) ) {s = 12;}

                         
                        input.seek(index109_62);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA109_68 = input.LA(1);

                         
                        int index109_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (synpred145_Java()) ) {s = 12;}

                         
                        input.seek(index109_68);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA109_84 = input.LA(1);

                         
                        int index109_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (synpred145_Java()) ) {s = 12;}

                         
                        input.seek(index109_84);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA109_86 = input.LA(1);

                         
                        int index109_86 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_86);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA109_87 = input.LA(1);

                         
                        int index109_87 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_87);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA109_88 = input.LA(1);

                         
                        int index109_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_88);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA109_118 = input.LA(1);

                         
                        int index109_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_118);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA109_121 = input.LA(1);

                         
                        int index109_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_121);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA109_124 = input.LA(1);

                         
                        int index109_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_124);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA109_127 = input.LA(1);

                         
                        int index109_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_127);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA109_130 = input.LA(1);

                         
                        int index109_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_130);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA109_133 = input.LA(1);

                         
                        int index109_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_133);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA109_136 = input.LA(1);

                         
                        int index109_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_136);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA109_139 = input.LA(1);

                         
                        int index109_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred144_Java()) ) {s = 74;}

                        else if ( (true) ) {s = 25;}

                         
                        input.seek(index109_139);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 109, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA110_eotS =
        "\14\uffff";
    static final String DFA110_eofS =
        "\14\uffff";
    static final String DFA110_minS =
        "\1\4\13\uffff";
    static final String DFA110_maxS =
        "\1\107\13\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA110_specialS =
        "\14\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\1\54\uffff\1\12\5\uffff\10\1\10\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "()* loopback of 4642:22: (variableModifierGen+= variableModifier )*";
        }
    }
    static final String DFA117_eotS =
        "\115\uffff";
    static final String DFA117_eofS =
        "\115\uffff";
    static final String DFA117_minS =
        "\1\4\42\uffff\1\31\51\uffff";
    static final String DFA117_maxS =
        "\1\161\42\uffff\1\155\51\uffff";
    static final String DFA117_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1"+
        "\15\1\16\1\17\35\uffff\1\20\37\uffff";
    static final String DFA117_specialS =
        "\115\uffff}>";
    static final String[] DFA117_transitionS = {
            "\1\43\1\uffff\6\17\15\uffff\1\16\7\uffff\1\17\3\uffff\1\1\2"+
            "\uffff\1\17\12\uffff\1\11\3\uffff\10\17\1\uffff\2\17\2\uffff"+
            "\3\17\2\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\5\1\6\1\7\1\uffff"+
            "\1\10\1\12\1\13\1\14\1\15\21\uffff\2\17\2\uffff\6\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\2\uffff\2\17\3\uffff\1\17\1\uffff\2\17\4\uffff\1\17"+
            "\2\uffff\1\17\22\uffff\1\17\1\uffff\1\17\10\uffff\1\55\16\uffff"+
            "\25\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA117_eot = DFA.unpackEncodedString(DFA117_eotS);
    static final short[] DFA117_eof = DFA.unpackEncodedString(DFA117_eofS);
    static final char[] DFA117_min = DFA.unpackEncodedStringToUnsignedChars(DFA117_minS);
    static final char[] DFA117_max = DFA.unpackEncodedStringToUnsignedChars(DFA117_maxS);
    static final short[] DFA117_accept = DFA.unpackEncodedString(DFA117_acceptS);
    static final short[] DFA117_special = DFA.unpackEncodedString(DFA117_specialS);
    static final short[][] DFA117_transition;

    static {
        int numStates = DFA117_transitionS.length;
        DFA117_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA117_transition[i] = DFA.unpackEncodedString(DFA117_transitionS[i]);
        }
    }

    class DFA117 extends DFA {

        public DFA117(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 117;
            this.eot = DFA117_eot;
            this.eof = DFA117_eof;
            this.min = DFA117_min;
            this.max = DFA117_max;
            this.accept = DFA117_accept;
            this.special = DFA117_special;
            this.transition = DFA117_transition;
        }
        public String getDescription() {
            return "4691:1: statement returns [Node returnNode] : (blockGen+= block | TK_0= 'assert' expressionGen+= expression (TK_1= ':' expressionGen_1+= expression )? TK_2= ';' | TK_0= 'if' parExpressionGen+= parExpression statementGen+= statement ( options {k=1; } : TK_1= 'else' statementGen_1+= statement )? | TK_0= 'for' TK_1= '(' forControlGen+= forControl TK_2= ')' statementGen+= statement | TK_0= 'while' parExpressionGen+= parExpression statementGen+= statement | TK_0= 'do' statementGen+= statement TK_1= 'while' parExpressionGen+= parExpression TK_2= ';' | TK_0= 'try' blockGen+= block (catchesGen+= catches TK_1= 'finally' blockGen_1+= block | catchesGen_1+= catches | TK_2= 'finally' blockGen_2+= block ) | TK_0= 'switch' parExpressionGen+= parExpression TK_1= '{' switchBlockStatementGroupsGen+= switchBlockStatementGroups TK_2= '}' | TK_0= 'synchronized' parExpressionGen+= parExpression blockGen+= block | TK_0= 'return' (expressionGen+= expression )? TK_1= ';' | TK_0= 'throw' expressionGen+= expression TK_1= ';' | TK_0= 'break' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= 'continue' (IdentifierGen= Identifier )? TK_1= ';' | TK_0= ';' | statementExpressionGen+= statementExpression TK_0= ';' | IdentifierGen= Identifier TK_0= ':' statementGen+= statement );";
        }
    }
    static final String DFA114_eotS =
        "\40\uffff";
    static final String DFA114_eofS =
        "\40\uffff";
    static final String DFA114_minS =
        "\1\4\37\uffff";
    static final String DFA114_maxS =
        "\1\161\37\uffff";
    static final String DFA114_acceptS =
        "\1\uffff\1\1\35\uffff\1\2";
    static final String DFA114_specialS =
        "\40\uffff}>";
    static final String[] DFA114_transitionS = {
            "\1\1\1\uffff\6\1\15\uffff\1\37\7\uffff\1\1\6\uffff\1\1\16\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\41\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA114_eot = DFA.unpackEncodedString(DFA114_eotS);
    static final short[] DFA114_eof = DFA.unpackEncodedString(DFA114_eofS);
    static final char[] DFA114_min = DFA.unpackEncodedStringToUnsignedChars(DFA114_minS);
    static final char[] DFA114_max = DFA.unpackEncodedStringToUnsignedChars(DFA114_maxS);
    static final short[] DFA114_accept = DFA.unpackEncodedString(DFA114_acceptS);
    static final short[] DFA114_special = DFA.unpackEncodedString(DFA114_specialS);
    static final short[][] DFA114_transition;

    static {
        int numStates = DFA114_transitionS.length;
        DFA114_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA114_transition[i] = DFA.unpackEncodedString(DFA114_transitionS[i]);
        }
    }

    class DFA114 extends DFA {

        public DFA114(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 114;
            this.eot = DFA114_eot;
            this.eof = DFA114_eof;
            this.min = DFA114_min;
            this.max = DFA114_max;
            this.accept = DFA114_accept;
            this.special = DFA114_special;
            this.transition = DFA114_transition;
        }
        public String getDescription() {
            return "5149:34: (expressionGen+= expression )?";
        }
    }
    static final String DFA118_eotS =
        "\102\uffff";
    static final String DFA118_eofS =
        "\1\1\101\uffff";
    static final String DFA118_minS =
        "\1\4\101\uffff";
    static final String DFA118_maxS =
        "\1\161\101\uffff";
    static final String DFA118_acceptS =
        "\1\uffff\1\2\77\uffff\1\1";
    static final String DFA118_specialS =
        "\102\uffff}>";
    static final String[] DFA118_transitionS = {
            "\10\1\15\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff"+
            "\4\1\4\uffff\22\1\1\uffff\2\1\2\uffff\6\1\1\uffff\14\1\1\101"+
            "\1\1\17\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA118_eot = DFA.unpackEncodedString(DFA118_eotS);
    static final short[] DFA118_eof = DFA.unpackEncodedString(DFA118_eofS);
    static final char[] DFA118_min = DFA.unpackEncodedStringToUnsignedChars(DFA118_minS);
    static final char[] DFA118_max = DFA.unpackEncodedStringToUnsignedChars(DFA118_maxS);
    static final short[] DFA118_accept = DFA.unpackEncodedString(DFA118_acceptS);
    static final short[] DFA118_special = DFA.unpackEncodedString(DFA118_specialS);
    static final short[][] DFA118_transition;

    static {
        int numStates = DFA118_transitionS.length;
        DFA118_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA118_transition[i] = DFA.unpackEncodedString(DFA118_transitionS[i]);
        }
    }

    class DFA118 extends DFA {

        public DFA118(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 118;
            this.eot = DFA118_eot;
            this.eof = DFA118_eof;
            this.min = DFA118_min;
            this.max = DFA118_max;
            this.accept = DFA118_accept;
            this.special = DFA118_special;
            this.transition = DFA118_transition;
        }
        public String getDescription() {
            return "()* loopback of 5374:31: (catchClauseGen_1+= catchClause )*";
        }
    }
    static final String DFA119_eotS =
        "\14\uffff";
    static final String DFA119_eofS =
        "\14\uffff";
    static final String DFA119_minS =
        "\1\4\13\uffff";
    static final String DFA119_maxS =
        "\1\107\13\uffff";
    static final String DFA119_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA119_specialS =
        "\14\uffff}>";
    static final String[] DFA119_transitionS = {
            "\1\1\54\uffff\1\12\5\uffff\10\1\10\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA119_eot = DFA.unpackEncodedString(DFA119_eotS);
    static final short[] DFA119_eof = DFA.unpackEncodedString(DFA119_eofS);
    static final char[] DFA119_min = DFA.unpackEncodedStringToUnsignedChars(DFA119_minS);
    static final char[] DFA119_max = DFA.unpackEncodedStringToUnsignedChars(DFA119_maxS);
    static final short[] DFA119_accept = DFA.unpackEncodedString(DFA119_acceptS);
    static final short[] DFA119_special = DFA.unpackEncodedString(DFA119_specialS);
    static final short[][] DFA119_transition;

    static {
        int numStates = DFA119_transitionS.length;
        DFA119_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA119_transition[i] = DFA.unpackEncodedString(DFA119_transitionS[i]);
        }
    }

    class DFA119 extends DFA {

        public DFA119(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 119;
            this.eot = DFA119_eot;
            this.eof = DFA119_eof;
            this.min = DFA119_min;
            this.max = DFA119_max;
            this.accept = DFA119_accept;
            this.special = DFA119_special;
            this.transition = DFA119_transition;
        }
        public String getDescription() {
            return "()* loopback of 5463:22: (variableModifierGen+= variableModifier )*";
        }
    }
    static final String DFA121_eotS =
        "\77\uffff";
    static final String DFA121_eofS =
        "\1\1\76\uffff";
    static final String DFA121_minS =
        "\1\4\76\uffff";
    static final String DFA121_maxS =
        "\1\161\76\uffff";
    static final String DFA121_acceptS =
        "\1\uffff\1\2\3\uffff\1\1\71\uffff";
    static final String DFA121_specialS =
        "\77\uffff}>";
    static final String[] DFA121_transitionS = {
            "\10\5\15\uffff\1\5\1\uffff\1\5\2\uffff\1\5\2\uffff\1\5\3\uffff"+
            "\1\5\1\1\2\5\4\uffff\22\5\1\uffff\2\5\2\uffff\4\5\1\1\1\5\1"+
            "\uffff\1\5\1\uffff\4\5\1\uffff\5\5\1\uffff\1\1\17\uffff\2\5"+
            "\2\uffff\6\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA121_eot = DFA.unpackEncodedString(DFA121_eotS);
    static final short[] DFA121_eof = DFA.unpackEncodedString(DFA121_eofS);
    static final char[] DFA121_min = DFA.unpackEncodedStringToUnsignedChars(DFA121_minS);
    static final char[] DFA121_max = DFA.unpackEncodedStringToUnsignedChars(DFA121_maxS);
    static final short[] DFA121_accept = DFA.unpackEncodedString(DFA121_acceptS);
    static final short[] DFA121_special = DFA.unpackEncodedString(DFA121_specialS);
    static final short[][] DFA121_transition;

    static {
        int numStates = DFA121_transitionS.length;
        DFA121_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA121_transition[i] = DFA.unpackEncodedString(DFA121_transitionS[i]);
        }
    }

    class DFA121 extends DFA {

        public DFA121(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 121;
            this.eot = DFA121_eot;
            this.eof = DFA121_eof;
            this.min = DFA121_min;
            this.max = DFA121_max;
            this.accept = DFA121_accept;
            this.special = DFA121_special;
            this.transition = DFA121_transition;
        }
        public String getDescription() {
            return "()* loopback of 5525:48: (blockStatementGen+= blockStatement )*";
        }
    }
    static final String DFA122_eotS =
        "\42\uffff";
    static final String DFA122_eofS =
        "\42\uffff";
    static final String DFA122_minS =
        "\1\110\1\4\1\uffff\1\0\36\uffff";
    static final String DFA122_maxS =
        "\1\130\1\161\1\uffff\1\0\36\uffff";
    static final String DFA122_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\34\uffff\1\2";
    static final String DFA122_specialS =
        "\3\uffff\1\0\36\uffff}>";
    static final String[] DFA122_transitionS = {
            "\1\2\17\uffff\1\1",
            "\1\3\1\uffff\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1"+
            "\uffff\2\4\2\uffff\3\4\41\uffff\2\4\2\uffff\6\4",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA122_eot = DFA.unpackEncodedString(DFA122_eotS);
    static final short[] DFA122_eof = DFA.unpackEncodedString(DFA122_eofS);
    static final char[] DFA122_min = DFA.unpackEncodedStringToUnsignedChars(DFA122_minS);
    static final char[] DFA122_max = DFA.unpackEncodedStringToUnsignedChars(DFA122_maxS);
    static final short[] DFA122_accept = DFA.unpackEncodedString(DFA122_acceptS);
    static final short[] DFA122_special = DFA.unpackEncodedString(DFA122_specialS);
    static final short[][] DFA122_transition;

    static {
        int numStates = DFA122_transitionS.length;
        DFA122_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA122_transition[i] = DFA.unpackEncodedString(DFA122_transitionS[i]);
        }
    }

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = DFA122_eot;
            this.eof = DFA122_eof;
            this.min = DFA122_min;
            this.max = DFA122_max;
            this.accept = DFA122_accept;
            this.special = DFA122_special;
            this.transition = DFA122_transition;
        }
        public String getDescription() {
            return "5555:1: switchLabel returns [Node returnNode] : (TK_0= 'case' constantExpressionGen+= constantExpression TK_1= ':' | TK_0= 'case' enumConstantNameGen+= enumConstantName TK_1= ':' | TK_0= 'default' TK_1= ':' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA122_3 = input.LA(1);

                         
                        int index122_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred173_Java()) ) {s = 4;}

                        else if ( (synpred174_Java()) ) {s = 33;}

                         
                        input.seek(index122_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 122, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA127_eotS =
        "\u010e\uffff";
    static final String DFA127_eofS =
        "\u010e\uffff";
    static final String DFA127_minS =
        "\14\4\26\uffff\17\4\1\31\35\uffff\1\52\1\uffff\1\31\1\52\1\uffff"+
        "\1\31\1\52\1\uffff\1\31\1\52\1\uffff\1\31\1\52\1\uffff\1\31\1\52"+
        "\1\uffff\1\31\1\52\1\uffff\1\31\1\52\1\uffff\1\31\55\0\25\uffff"+
        "\11\0\1\uffff\2\0\5\uffff\1\0\43\uffff\1\0\5\uffff\1\0\5\uffff\1"+
        "\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5"+
        "\uffff";
    static final String DFA127_maxS =
        "\1\161\1\107\1\4\1\155\10\51\26\uffff\11\51\1\107\1\4\1\107\3\161"+
        "\1\112\35\uffff\1\52\1\uffff\1\112\1\52\1\uffff\1\112\1\52\1\uffff"+
        "\1\112\1\52\1\uffff\1\112\1\52\1\uffff\1\112\1\52\1\uffff\1\112"+
        "\1\52\1\uffff\1\112\1\52\1\uffff\1\112\55\0\25\uffff\11\0\1\uffff"+
        "\2\0\5\uffff\1\0\43\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1"+
        "\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff\1\0\5\uffff";
    static final String DFA127_acceptS =
        "\14\uffff\1\2\u00cc\uffff\1\1\64\uffff";
    static final String DFA127_specialS =
        "\147\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
        "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
        "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\25\uffff\1\55\1\56\1\57\1\60"+
        "\1\61\1\62\1\63\1\64\1\65\1\uffff\1\66\1\67\5\uffff\1\70\43\uffff"+
        "\1\71\5\uffff\1\72\5\uffff\1\73\5\uffff\1\74\5\uffff\1\75\5\uffff"+
        "\1\76\5\uffff\1\77\5\uffff\1\100\5\uffff}>";
    static final String[] DFA127_transitionS = {
            "\1\3\1\uffff\6\14\15\uffff\1\14\7\uffff\1\14\6\uffff\1\14\10"+
            "\uffff\1\1\5\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
            "\2\14\2\uffff\3\14\1\2\40\uffff\2\14\2\uffff\6\14",
            "\1\42\54\uffff\1\53\5\uffff\1\43\1\44\1\45\1\46\1\47\1\50"+
            "\1\51\1\52\10\uffff\1\54",
            "\1\55",
            "\1\61\24\uffff\1\14\2\uffff\1\57\1\14\3\uffff\1\56\3\14\4"+
            "\uffff\1\60\2\uffff\1\14\22\uffff\1\14\1\uffff\1\14\27\uffff"+
            "\25\14",
            "\1\121\27\uffff\1\14\14\uffff\1\117",
            "\1\124\27\uffff\1\14\14\uffff\1\122",
            "\1\127\27\uffff\1\14\14\uffff\1\125",
            "\1\132\27\uffff\1\14\14\uffff\1\130",
            "\1\135\27\uffff\1\14\14\uffff\1\133",
            "\1\140\27\uffff\1\14\14\uffff\1\136",
            "\1\143\27\uffff\1\14\14\uffff\1\141",
            "\1\146\27\uffff\1\14\14\uffff\1\144",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\152\27\uffff\1\150\4\uffff\1\147\7\uffff\1\151",
            "\1\154\44\uffff\1\153",
            "\1\156\44\uffff\1\155",
            "\1\160\44\uffff\1\157",
            "\1\162\44\uffff\1\161",
            "\1\164\44\uffff\1\163",
            "\1\166\44\uffff\1\165",
            "\1\170\44\uffff\1\167",
            "\1\172\44\uffff\1\171",
            "\1\173\54\uffff\1\u0084\5\uffff\1\174\1\175\1\176\1\177\1"+
            "\u0080\1\u0081\1\u0082\1\u0083\10\uffff\1\u0085",
            "\1\u0086",
            "\1\u0089\27\uffff\1\u0087\24\uffff\1\u0092\5\uffff\1\u008a"+
            "\1\u008b\1\u008c\1\u008d\1\u008e\1\u008f\1\u0090\1\u0091\2\uffff"+
            "\1\u0088\5\uffff\1\u0093",
            "\1\u00a9\1\uffff\6\14\25\uffff\1\14\6\uffff\1\14\3\uffff\1"+
            "\14\12\uffff\1\u00aa\1\u00ab\1\u00ac\1\u00ad\1\u00ae\1\u00af"+
            "\1\u00b0\1\u00b1\1\u00b3\2\14\2\uffff\3\14\41\uffff\2\14\2\uffff"+
            "\6\14",
            "\1\u00b4\31\uffff\1\14\2\uffff\1\14\36\uffff\1\14\57\uffff"+
            "\2\14",
            "\1\14\1\uffff\6\14\25\uffff\1\14\6\uffff\1\14\1\uffff\1\u00ba"+
            "\14\uffff\10\14\1\uffff\2\14\2\uffff\3\14\41\uffff\2\14\2\uffff"+
            "\6\14",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00de",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u00e4",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u00ea",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u00f0",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u00f6",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u00fc",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u0102",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\u0108",
            "",
            "\1\14\10\uffff\1\14\6\uffff\1\14\2\uffff\1\14\35\uffff\1\u00d9",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA127_eot = DFA.unpackEncodedString(DFA127_eotS);
    static final short[] DFA127_eof = DFA.unpackEncodedString(DFA127_eofS);
    static final char[] DFA127_min = DFA.unpackEncodedStringToUnsignedChars(DFA127_minS);
    static final char[] DFA127_max = DFA.unpackEncodedStringToUnsignedChars(DFA127_maxS);
    static final short[] DFA127_accept = DFA.unpackEncodedString(DFA127_acceptS);
    static final short[] DFA127_special = DFA.unpackEncodedString(DFA127_specialS);
    static final short[][] DFA127_transition;

    static {
        int numStates = DFA127_transitionS.length;
        DFA127_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA127_transition[i] = DFA.unpackEncodedString(DFA127_transitionS[i]);
        }
    }

    class DFA127 extends DFA {

        public DFA127(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 127;
            this.eot = DFA127_eot;
            this.eof = DFA127_eof;
            this.min = DFA127_min;
            this.max = DFA127_max;
            this.accept = DFA127_accept;
            this.special = DFA127_special;
            this.transition = DFA127_transition;
        }
        public String getDescription() {
            return "5691:1: forControl returns [Node returnNode] options {k=3; } : (forVarControlGen+= forVarControl | (forInitGen+= forInit )? TK_0= ';' (expressionGen+= expression )? TK_1= ';' (forUpdateGen+= forUpdate )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA127_103 = input.LA(1);

                         
                        int index127_103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_103);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA127_104 = input.LA(1);

                         
                        int index127_104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_104);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA127_105 = input.LA(1);

                         
                        int index127_105 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_105);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA127_106 = input.LA(1);

                         
                        int index127_106 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_106);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA127_107 = input.LA(1);

                         
                        int index127_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_107);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA127_108 = input.LA(1);

                         
                        int index127_108 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_108);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA127_109 = input.LA(1);

                         
                        int index127_109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_109);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA127_110 = input.LA(1);

                         
                        int index127_110 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_110);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA127_111 = input.LA(1);

                         
                        int index127_111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_111);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA127_112 = input.LA(1);

                         
                        int index127_112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_112);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA127_113 = input.LA(1);

                         
                        int index127_113 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_113);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA127_114 = input.LA(1);

                         
                        int index127_114 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_114);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA127_115 = input.LA(1);

                         
                        int index127_115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_115);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA127_116 = input.LA(1);

                         
                        int index127_116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_116);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA127_117 = input.LA(1);

                         
                        int index127_117 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_117);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA127_118 = input.LA(1);

                         
                        int index127_118 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_118);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA127_119 = input.LA(1);

                         
                        int index127_119 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_119);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA127_120 = input.LA(1);

                         
                        int index127_120 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_120);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA127_121 = input.LA(1);

                         
                        int index127_121 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_121);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA127_122 = input.LA(1);

                         
                        int index127_122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_122);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA127_123 = input.LA(1);

                         
                        int index127_123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_123);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA127_124 = input.LA(1);

                         
                        int index127_124 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_124);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA127_125 = input.LA(1);

                         
                        int index127_125 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_125);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA127_126 = input.LA(1);

                         
                        int index127_126 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_126);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA127_127 = input.LA(1);

                         
                        int index127_127 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_127);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA127_128 = input.LA(1);

                         
                        int index127_128 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_128);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA127_129 = input.LA(1);

                         
                        int index127_129 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_129);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA127_130 = input.LA(1);

                         
                        int index127_130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_130);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA127_131 = input.LA(1);

                         
                        int index127_131 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_131);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA127_132 = input.LA(1);

                         
                        int index127_132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_132);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA127_133 = input.LA(1);

                         
                        int index127_133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_133);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA127_134 = input.LA(1);

                         
                        int index127_134 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_134);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA127_135 = input.LA(1);

                         
                        int index127_135 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_135);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA127_136 = input.LA(1);

                         
                        int index127_136 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_136);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA127_137 = input.LA(1);

                         
                        int index127_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_137);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA127_138 = input.LA(1);

                         
                        int index127_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_138);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA127_139 = input.LA(1);

                         
                        int index127_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_139);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA127_140 = input.LA(1);

                         
                        int index127_140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_140);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA127_141 = input.LA(1);

                         
                        int index127_141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_141);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA127_142 = input.LA(1);

                         
                        int index127_142 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_142);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA127_143 = input.LA(1);

                         
                        int index127_143 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_143);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA127_144 = input.LA(1);

                         
                        int index127_144 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_144);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA127_145 = input.LA(1);

                         
                        int index127_145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_145);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA127_146 = input.LA(1);

                         
                        int index127_146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_146);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA127_147 = input.LA(1);

                         
                        int index127_147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_147);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA127_169 = input.LA(1);

                         
                        int index127_169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_169);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA127_170 = input.LA(1);

                         
                        int index127_170 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_170);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA127_171 = input.LA(1);

                         
                        int index127_171 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_171);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA127_172 = input.LA(1);

                         
                        int index127_172 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_172);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA127_173 = input.LA(1);

                         
                        int index127_173 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_173);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA127_174 = input.LA(1);

                         
                        int index127_174 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_174);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA127_175 = input.LA(1);

                         
                        int index127_175 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_175);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA127_176 = input.LA(1);

                         
                        int index127_176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_176);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA127_177 = input.LA(1);

                         
                        int index127_177 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_177);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA127_179 = input.LA(1);

                         
                        int index127_179 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_179);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA127_180 = input.LA(1);

                         
                        int index127_180 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_180);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA127_186 = input.LA(1);

                         
                        int index127_186 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_186);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA127_222 = input.LA(1);

                         
                        int index127_222 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_222);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA127_228 = input.LA(1);

                         
                        int index127_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_228);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA127_234 = input.LA(1);

                         
                        int index127_234 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_234);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA127_240 = input.LA(1);

                         
                        int index127_240 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_240);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA127_246 = input.LA(1);

                         
                        int index127_246 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_246);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA127_252 = input.LA(1);

                         
                        int index127_252 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_252);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA127_258 = input.LA(1);

                         
                        int index127_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_258);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA127_264 = input.LA(1);

                         
                        int index127_264 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred176_Java()) ) {s = 217;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index127_264);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 127, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA124_eotS =
        "\42\uffff";
    static final String DFA124_eofS =
        "\42\uffff";
    static final String DFA124_minS =
        "\1\4\41\uffff";
    static final String DFA124_maxS =
        "\1\161\41\uffff";
    static final String DFA124_acceptS =
        "\1\uffff\1\1\37\uffff\1\2";
    static final String DFA124_specialS =
        "\42\uffff}>";
    static final String[] DFA124_transitionS = {
            "\1\1\1\uffff\6\1\15\uffff\1\41\7\uffff\1\1\6\uffff\1\1\10\uffff"+
            "\1\1\5\uffff\10\1\1\uffff\2\1\2\uffff\4\1\40\uffff\2\1\2\uffff"+
            "\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA124_eot = DFA.unpackEncodedString(DFA124_eotS);
    static final short[] DFA124_eof = DFA.unpackEncodedString(DFA124_eofS);
    static final char[] DFA124_min = DFA.unpackEncodedStringToUnsignedChars(DFA124_minS);
    static final char[] DFA124_max = DFA.unpackEncodedStringToUnsignedChars(DFA124_maxS);
    static final short[] DFA124_accept = DFA.unpackEncodedString(DFA124_acceptS);
    static final short[] DFA124_special = DFA.unpackEncodedString(DFA124_specialS);
    static final short[][] DFA124_transition;

    static {
        int numStates = DFA124_transitionS.length;
        DFA124_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA124_transition[i] = DFA.unpackEncodedString(DFA124_transitionS[i]);
        }
    }

    class DFA124 extends DFA {

        public DFA124(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 124;
            this.eot = DFA124_eot;
            this.eof = DFA124_eof;
            this.min = DFA124_min;
            this.max = DFA124_max;
            this.accept = DFA124_accept;
            this.special = DFA124_special;
            this.transition = DFA124_transition;
        }
        public String getDescription() {
            return "5711:14: (forInitGen+= forInit )?";
        }
    }
    static final String DFA125_eotS =
        "\40\uffff";
    static final String DFA125_eofS =
        "\40\uffff";
    static final String DFA125_minS =
        "\1\4\37\uffff";
    static final String DFA125_maxS =
        "\1\161\37\uffff";
    static final String DFA125_acceptS =
        "\1\uffff\1\1\35\uffff\1\2";
    static final String DFA125_specialS =
        "\40\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\1\1\uffff\6\1\15\uffff\1\37\7\uffff\1\1\6\uffff\1\1\16\uffff"+
            "\10\1\1\uffff\2\1\2\uffff\3\1\41\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "5711:47: (expressionGen+= expression )?";
        }
    }
    static final String DFA126_eotS =
        "\40\uffff";
    static final String DFA126_eofS =
        "\40\uffff";
    static final String DFA126_minS =
        "\1\4\37\uffff";
    static final String DFA126_maxS =
        "\1\161\37\uffff";
    static final String DFA126_acceptS =
        "\1\uffff\1\1\35\uffff\1\2";
    static final String DFA126_specialS =
        "\40\uffff}>";
    static final String[] DFA126_transitionS = {
            "\1\1\1\uffff\6\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\37\1\uffff\3\1\41\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA126_eot = DFA.unpackEncodedString(DFA126_eotS);
    static final short[] DFA126_eof = DFA.unpackEncodedString(DFA126_eofS);
    static final char[] DFA126_min = DFA.unpackEncodedStringToUnsignedChars(DFA126_minS);
    static final char[] DFA126_max = DFA.unpackEncodedStringToUnsignedChars(DFA126_maxS);
    static final short[] DFA126_accept = DFA.unpackEncodedString(DFA126_acceptS);
    static final short[] DFA126_special = DFA.unpackEncodedString(DFA126_specialS);
    static final short[][] DFA126_transition;

    static {
        int numStates = DFA126_transitionS.length;
        DFA126_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA126_transition[i] = DFA.unpackEncodedString(DFA126_transitionS[i]);
        }
    }

    class DFA126 extends DFA {

        public DFA126(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 126;
            this.eot = DFA126_eot;
            this.eof = DFA126_eof;
            this.min = DFA126_min;
            this.max = DFA126_max;
            this.accept = DFA126_accept;
            this.special = DFA126_special;
            this.transition = DFA126_transition;
        }
        public String getDescription() {
            return "5711:82: (forUpdateGen+= forUpdate )?";
        }
    }
    static final String DFA129_eotS =
        "\133\uffff";
    static final String DFA129_eofS =
        "\3\uffff\1\14\127\uffff";
    static final String DFA129_minS =
        "\1\4\2\uffff\11\4\25\uffff\3\0\37\uffff\1\0\2\uffff\1\0\2\uffff"+
        "\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff";
    static final String DFA129_maxS =
        "\1\161\2\uffff\1\155\10\51\25\uffff\3\0\37\uffff\1\0\2\uffff\1"+
        "\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2"+
        "\uffff\1\0\2\uffff";
    static final String DFA129_acceptS =
        "\1\uffff\1\1\12\uffff\1\2\116\uffff";
    static final String DFA129_specialS =
        "\41\uffff\1\0\1\1\1\2\37\uffff\1\3\2\uffff\1\4\2\uffff\1\5\2\uffff"+
        "\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff\1\11\2\uffff\1\12\2\uffff}>";
    static final String[] DFA129_transitionS = {
            "\1\3\1\uffff\6\14\25\uffff\1\14\6\uffff\1\14\10\uffff\1\1\5"+
            "\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\2\14\2\uffff"+
            "\3\14\1\1\40\uffff\2\14\2\uffff\6\14",
            "",
            "",
            "\1\1\24\uffff\1\14\2\uffff\1\42\1\14\3\uffff\1\41\3\14\4\uffff"+
            "\1\43\2\uffff\1\14\22\uffff\1\14\1\uffff\1\14\27\uffff\25\14",
            "\1\1\27\uffff\1\14\14\uffff\1\103",
            "\1\1\27\uffff\1\14\14\uffff\1\106",
            "\1\1\27\uffff\1\14\14\uffff\1\111",
            "\1\1\27\uffff\1\14\14\uffff\1\114",
            "\1\1\27\uffff\1\14\14\uffff\1\117",
            "\1\1\27\uffff\1\14\14\uffff\1\122",
            "\1\1\27\uffff\1\14\14\uffff\1\125",
            "\1\1\27\uffff\1\14\14\uffff\1\130",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA129_eot = DFA.unpackEncodedString(DFA129_eotS);
    static final short[] DFA129_eof = DFA.unpackEncodedString(DFA129_eofS);
    static final char[] DFA129_min = DFA.unpackEncodedStringToUnsignedChars(DFA129_minS);
    static final char[] DFA129_max = DFA.unpackEncodedStringToUnsignedChars(DFA129_maxS);
    static final short[] DFA129_accept = DFA.unpackEncodedString(DFA129_acceptS);
    static final short[] DFA129_special = DFA.unpackEncodedString(DFA129_specialS);
    static final short[][] DFA129_transition;

    static {
        int numStates = DFA129_transitionS.length;
        DFA129_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA129_transition[i] = DFA.unpackEncodedString(DFA129_transitionS[i]);
        }
    }

    class DFA129 extends DFA {

        public DFA129(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 129;
            this.eot = DFA129_eot;
            this.eof = DFA129_eof;
            this.min = DFA129_min;
            this.max = DFA129_max;
            this.accept = DFA129_accept;
            this.special = DFA129_special;
            this.transition = DFA129_transition;
        }
        public String getDescription() {
            return "5769:1: forInit returns [Node returnNode] : ( (variableModifierGen+= variableModifier )* typeGen+= type variableDeclaratorsGen+= variableDeclarators | expressionListGen+= expressionList );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA129_33 = input.LA(1);

                         
                        int index129_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_33);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA129_34 = input.LA(1);

                         
                        int index129_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_34);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA129_35 = input.LA(1);

                         
                        int index129_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_35);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA129_67 = input.LA(1);

                         
                        int index129_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_67);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA129_70 = input.LA(1);

                         
                        int index129_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_70);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA129_73 = input.LA(1);

                         
                        int index129_73 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_73);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA129_76 = input.LA(1);

                         
                        int index129_76 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_76);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA129_79 = input.LA(1);

                         
                        int index129_79 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_79);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA129_82 = input.LA(1);

                         
                        int index129_82 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_82);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA129_85 = input.LA(1);

                         
                        int index129_85 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_85);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA129_88 = input.LA(1);

                         
                        int index129_88 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred181_Java()) ) {s = 1;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index129_88);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 129, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA128_eotS =
        "\14\uffff";
    static final String DFA128_eofS =
        "\14\uffff";
    static final String DFA128_minS =
        "\1\4\13\uffff";
    static final String DFA128_maxS =
        "\1\107\13\uffff";
    static final String DFA128_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA128_specialS =
        "\14\uffff}>";
    static final String[] DFA128_transitionS = {
            "\1\1\54\uffff\1\12\5\uffff\10\1\10\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA128_eot = DFA.unpackEncodedString(DFA128_eotS);
    static final short[] DFA128_eof = DFA.unpackEncodedString(DFA128_eofS);
    static final char[] DFA128_min = DFA.unpackEncodedStringToUnsignedChars(DFA128_minS);
    static final char[] DFA128_max = DFA.unpackEncodedStringToUnsignedChars(DFA128_maxS);
    static final short[] DFA128_accept = DFA.unpackEncodedString(DFA128_acceptS);
    static final short[] DFA128_special = DFA.unpackEncodedString(DFA128_specialS);
    static final short[][] DFA128_transition;

    static {
        int numStates = DFA128_transitionS.length;
        DFA128_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA128_transition[i] = DFA.unpackEncodedString(DFA128_transitionS[i]);
        }
    }

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = DFA128_eot;
            this.eof = DFA128_eof;
            this.min = DFA128_min;
            this.max = DFA128_max;
            this.accept = DFA128_accept;
            this.special = DFA128_special;
            this.transition = DFA128_transition;
        }
        public String getDescription() {
            return "()* loopback of 5770:22: (variableModifierGen+= variableModifier )*";
        }
    }
    static final String DFA130_eotS =
        "\14\uffff";
    static final String DFA130_eofS =
        "\14\uffff";
    static final String DFA130_minS =
        "\1\4\13\uffff";
    static final String DFA130_maxS =
        "\1\107\13\uffff";
    static final String DFA130_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA130_specialS =
        "\14\uffff}>";
    static final String[] DFA130_transitionS = {
            "\1\1\54\uffff\1\12\5\uffff\10\1\10\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA130_eot = DFA.unpackEncodedString(DFA130_eotS);
    static final short[] DFA130_eof = DFA.unpackEncodedString(DFA130_eofS);
    static final char[] DFA130_min = DFA.unpackEncodedStringToUnsignedChars(DFA130_minS);
    static final char[] DFA130_max = DFA.unpackEncodedStringToUnsignedChars(DFA130_maxS);
    static final short[] DFA130_accept = DFA.unpackEncodedString(DFA130_acceptS);
    static final short[] DFA130_special = DFA.unpackEncodedString(DFA130_specialS);
    static final short[][] DFA130_transition;

    static {
        int numStates = DFA130_transitionS.length;
        DFA130_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA130_transition[i] = DFA.unpackEncodedString(DFA130_transitionS[i]);
        }
    }

    class DFA130 extends DFA {

        public DFA130(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 130;
            this.eot = DFA130_eot;
            this.eof = DFA130_eof;
            this.min = DFA130_min;
            this.max = DFA130_max;
            this.accept = DFA130_accept;
            this.special = DFA130_special;
            this.transition = DFA130_transition;
        }
        public String getDescription() {
            return "()* loopback of 5829:22: (variableModifierGen+= variableModifier )*";
        }
    }
    static final String DFA132_eotS =
        "\u0124\uffff";
    static final String DFA132_eofS =
        "\1\14\u0123\uffff";
    static final String DFA132_minS =
        "\1\31\13\0\u0118\uffff";
    static final String DFA132_maxS =
        "\1\140\13\0\u0118\uffff";
    static final String DFA132_acceptS =
        "\14\uffff\1\2\44\uffff\1\1\u00f2\uffff";
    static final String DFA132_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\u0118\uffff}>";
    static final String[] DFA132_transitionS = {
            "\1\14\7\uffff\1\12\1\14\1\13\2\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\1\25\uffff\1\14\7\uffff\1\14\16\uffff\1\2\1\3\1\4\1\5\1\6"+
            "\1\7\1\10\1\11",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA132_eot = DFA.unpackEncodedString(DFA132_eotS);
    static final short[] DFA132_eof = DFA.unpackEncodedString(DFA132_eofS);
    static final char[] DFA132_min = DFA.unpackEncodedStringToUnsignedChars(DFA132_minS);
    static final char[] DFA132_max = DFA.unpackEncodedStringToUnsignedChars(DFA132_maxS);
    static final short[] DFA132_accept = DFA.unpackEncodedString(DFA132_acceptS);
    static final short[] DFA132_special = DFA.unpackEncodedString(DFA132_specialS);
    static final short[][] DFA132_transition;

    static {
        int numStates = DFA132_transitionS.length;
        DFA132_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA132_transition[i] = DFA.unpackEncodedString(DFA132_transitionS[i]);
        }
    }

    class DFA132 extends DFA {

        public DFA132(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 132;
            this.eot = DFA132_eot;
            this.eof = DFA132_eof;
            this.min = DFA132_min;
            this.max = DFA132_max;
            this.accept = DFA132_accept;
            this.special = DFA132_special;
            this.transition = DFA132_transition;
        }
        public String getDescription() {
            return "6037:51: (assignmentOperatorGen+= assignmentOperator expressionGen+= expression )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA132_1 = input.LA(1);

                         
                        int index132_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA132_2 = input.LA(1);

                         
                        int index132_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA132_3 = input.LA(1);

                         
                        int index132_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA132_4 = input.LA(1);

                         
                        int index132_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA132_5 = input.LA(1);

                         
                        int index132_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA132_6 = input.LA(1);

                         
                        int index132_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA132_7 = input.LA(1);

                         
                        int index132_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA132_8 = input.LA(1);

                         
                        int index132_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA132_9 = input.LA(1);

                         
                        int index132_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA132_10 = input.LA(1);

                         
                        int index132_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA132_11 = input.LA(1);

                         
                        int index132_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred184_Java()) ) {s = 49;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index132_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 132, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA133_eotS =
        "\17\uffff";
    static final String DFA133_eofS =
        "\17\uffff";
    static final String DFA133_minS =
        "\1\41\12\uffff\1\43\1\0\2\uffff";
    static final String DFA133_maxS =
        "\1\140\12\uffff\1\43\1\0\2\uffff";
    static final String DFA133_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\2\uffff\1\13"+
        "\1\14";
    static final String DFA133_specialS =
        "\14\uffff\1\0\2\uffff}>";
    static final String[] DFA133_transitionS = {
            "\1\12\1\uffff\1\13\10\uffff\1\1\54\uffff\1\2\1\3\1\4\1\5\1"+
            "\6\1\7\1\10\1\11",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA133_eot = DFA.unpackEncodedString(DFA133_eotS);
    static final short[] DFA133_eof = DFA.unpackEncodedString(DFA133_eofS);
    static final char[] DFA133_min = DFA.unpackEncodedStringToUnsignedChars(DFA133_minS);
    static final char[] DFA133_max = DFA.unpackEncodedStringToUnsignedChars(DFA133_maxS);
    static final short[] DFA133_accept = DFA.unpackEncodedString(DFA133_acceptS);
    static final short[] DFA133_special = DFA.unpackEncodedString(DFA133_specialS);
    static final short[][] DFA133_transition;

    static {
        int numStates = DFA133_transitionS.length;
        DFA133_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA133_transition[i] = DFA.unpackEncodedString(DFA133_transitionS[i]);
        }
    }

    class DFA133 extends DFA {

        public DFA133(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 133;
            this.eot = DFA133_eot;
            this.eof = DFA133_eof;
            this.min = DFA133_min;
            this.max = DFA133_max;
            this.accept = DFA133_accept;
            this.special = DFA133_special;
            this.transition = DFA133_transition;
        }
        public String getDescription() {
            return "6077:1: assignmentOperator returns [Node returnNode] : (TK_0= '=' | TK_0= '+=' | TK_0= '-=' | TK_0= '*=' | TK_0= '/=' | TK_0= '&=' | TK_0= '|=' | TK_0= '^=' | TK_0= '%=' | TK_0= '<' TK_1= '<' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '=' | TK_0= '>' TK_1= '>' TK_2= '>' TK_3= '=' );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA133_12 = input.LA(1);

                         
                        int index133_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred195_Java()) ) {s = 13;}

                        else if ( (true) ) {s = 14;}

                         
                        input.seek(index133_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 133, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA134_eotS =
        "\24\uffff";
    static final String DFA134_eofS =
        "\1\2\23\uffff";
    static final String DFA134_minS =
        "\1\31\23\uffff";
    static final String DFA134_maxS =
        "\1\140\23\uffff";
    static final String DFA134_acceptS =
        "\1\uffff\1\1\1\2\21\uffff";
    static final String DFA134_specialS =
        "\24\uffff}>";
    static final String[] DFA134_transitionS = {
            "\1\2\7\uffff\3\2\2\uffff\1\2\3\uffff\1\2\1\uffff\1\2\22\uffff"+
            "\1\1\2\uffff\1\2\7\uffff\1\2\16\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA134_eot = DFA.unpackEncodedString(DFA134_eotS);
    static final short[] DFA134_eof = DFA.unpackEncodedString(DFA134_eofS);
    static final char[] DFA134_min = DFA.unpackEncodedStringToUnsignedChars(DFA134_minS);
    static final char[] DFA134_max = DFA.unpackEncodedStringToUnsignedChars(DFA134_maxS);
    static final short[] DFA134_accept = DFA.unpackEncodedString(DFA134_acceptS);
    static final short[] DFA134_special = DFA.unpackEncodedString(DFA134_specialS);
    static final short[][] DFA134_transition;

    static {
        int numStates = DFA134_transitionS.length;
        DFA134_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA134_transition[i] = DFA.unpackEncodedString(DFA134_transitionS[i]);
        }
    }

    class DFA134 extends DFA {

        public DFA134(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 134;
            this.eot = DFA134_eot;
            this.eof = DFA134_eof;
            this.min = DFA134_min;
            this.max = DFA134_max;
            this.accept = DFA134_accept;
            this.special = DFA134_special;
            this.transition = DFA134_transition;
        }
        public String getDescription() {
            return "6348:57: (TK_0= '?' expressionGen+= expression TK_1= ':' expressionGen_1+= expression )?";
        }
    }
    static final String DFA135_eotS =
        "\25\uffff";
    static final String DFA135_eofS =
        "\1\1\24\uffff";
    static final String DFA135_minS =
        "\1\31\24\uffff";
    static final String DFA135_maxS =
        "\1\141\24\uffff";
    static final String DFA135_acceptS =
        "\1\uffff\1\2\22\uffff\1\1";
    static final String DFA135_specialS =
        "\25\uffff}>";
    static final String[] DFA135_transitionS = {
            "\1\1\7\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\10\1\1\24",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA135_eot = DFA.unpackEncodedString(DFA135_eotS);
    static final short[] DFA135_eof = DFA.unpackEncodedString(DFA135_eofS);
    static final char[] DFA135_min = DFA.unpackEncodedStringToUnsignedChars(DFA135_minS);
    static final char[] DFA135_max = DFA.unpackEncodedStringToUnsignedChars(DFA135_maxS);
    static final short[] DFA135_accept = DFA.unpackEncodedString(DFA135_acceptS);
    static final short[] DFA135_special = DFA.unpackEncodedString(DFA135_specialS);
    static final short[][] DFA135_transition;

    static {
        int numStates = DFA135_transitionS.length;
        DFA135_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA135_transition[i] = DFA.unpackEncodedString(DFA135_transitionS[i]);
        }
    }

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = DFA135_eot;
            this.eof = DFA135_eof;
            this.min = DFA135_min;
            this.max = DFA135_max;
            this.accept = DFA135_accept;
            this.special = DFA135_special;
            this.transition = DFA135_transition;
        }
        public String getDescription() {
            return "()* loopback of 6407:59: (TK_0= '||' conditionalAndExpressionGen_1+= conditionalAndExpression )*";
        }
    }
    static final String DFA136_eotS =
        "\26\uffff";
    static final String DFA136_eofS =
        "\1\1\25\uffff";
    static final String DFA136_minS =
        "\1\31\25\uffff";
    static final String DFA136_maxS =
        "\1\142\25\uffff";
    static final String DFA136_acceptS =
        "\1\uffff\1\2\23\uffff\1\1";
    static final String DFA136_specialS =
        "\26\uffff}>";
    static final String[] DFA136_transitionS = {
            "\1\1\7\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\11\1\1\25",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA136_eot = DFA.unpackEncodedString(DFA136_eotS);
    static final short[] DFA136_eof = DFA.unpackEncodedString(DFA136_eofS);
    static final char[] DFA136_min = DFA.unpackEncodedStringToUnsignedChars(DFA136_minS);
    static final char[] DFA136_max = DFA.unpackEncodedStringToUnsignedChars(DFA136_maxS);
    static final short[] DFA136_accept = DFA.unpackEncodedString(DFA136_acceptS);
    static final short[] DFA136_special = DFA.unpackEncodedString(DFA136_specialS);
    static final short[][] DFA136_transition;

    static {
        int numStates = DFA136_transitionS.length;
        DFA136_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA136_transition[i] = DFA.unpackEncodedString(DFA136_transitionS[i]);
        }
    }

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = DFA136_eot;
            this.eof = DFA136_eof;
            this.min = DFA136_min;
            this.max = DFA136_max;
            this.accept = DFA136_accept;
            this.special = DFA136_special;
            this.transition = DFA136_transition;
        }
        public String getDescription() {
            return "()* loopback of 6452:53: (TK_0= '&&' inclusiveOrExpressionGen_1+= inclusiveOrExpression )*";
        }
    }
    static final String DFA137_eotS =
        "\27\uffff";
    static final String DFA137_eofS =
        "\1\1\26\uffff";
    static final String DFA137_minS =
        "\1\31\26\uffff";
    static final String DFA137_maxS =
        "\1\143\26\uffff";
    static final String DFA137_acceptS =
        "\1\uffff\1\2\24\uffff\1\1";
    static final String DFA137_specialS =
        "\27\uffff}>";
    static final String[] DFA137_transitionS = {
            "\1\1\7\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\12\1\1\26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA137_eot = DFA.unpackEncodedString(DFA137_eotS);
    static final short[] DFA137_eof = DFA.unpackEncodedString(DFA137_eofS);
    static final char[] DFA137_min = DFA.unpackEncodedStringToUnsignedChars(DFA137_minS);
    static final char[] DFA137_max = DFA.unpackEncodedStringToUnsignedChars(DFA137_maxS);
    static final short[] DFA137_accept = DFA.unpackEncodedString(DFA137_acceptS);
    static final short[] DFA137_special = DFA.unpackEncodedString(DFA137_specialS);
    static final short[][] DFA137_transition;

    static {
        int numStates = DFA137_transitionS.length;
        DFA137_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA137_transition[i] = DFA.unpackEncodedString(DFA137_transitionS[i]);
        }
    }

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = DFA137_eot;
            this.eof = DFA137_eof;
            this.min = DFA137_min;
            this.max = DFA137_max;
            this.accept = DFA137_accept;
            this.special = DFA137_special;
            this.transition = DFA137_transition;
        }
        public String getDescription() {
            return "()* loopback of 6497:53: (TK_0= '|' exclusiveOrExpressionGen_1+= exclusiveOrExpression )*";
        }
    }
    static final String DFA138_eotS =
        "\30\uffff";
    static final String DFA138_eofS =
        "\1\1\27\uffff";
    static final String DFA138_minS =
        "\1\31\27\uffff";
    static final String DFA138_maxS =
        "\1\144\27\uffff";
    static final String DFA138_acceptS =
        "\1\uffff\1\2\25\uffff\1\1";
    static final String DFA138_specialS =
        "\30\uffff}>";
    static final String[] DFA138_transitionS = {
            "\1\1\7\uffff\3\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\13\1\1\27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA138_eot = DFA.unpackEncodedString(DFA138_eotS);
    static final short[] DFA138_eof = DFA.unpackEncodedString(DFA138_eofS);
    static final char[] DFA138_min = DFA.unpackEncodedStringToUnsignedChars(DFA138_minS);
    static final char[] DFA138_max = DFA.unpackEncodedStringToUnsignedChars(DFA138_maxS);
    static final short[] DFA138_accept = DFA.unpackEncodedString(DFA138_acceptS);
    static final short[] DFA138_special = DFA.unpackEncodedString(DFA138_specialS);
    static final short[][] DFA138_transition;

    static {
        int numStates = DFA138_transitionS.length;
        DFA138_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA138_transition[i] = DFA.unpackEncodedString(DFA138_transitionS[i]);
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = DFA138_eot;
            this.eof = DFA138_eof;
            this.min = DFA138_min;
            this.max = DFA138_max;
            this.accept = DFA138_accept;
            this.special = DFA138_special;
            this.transition = DFA138_transition;
        }
        public String getDescription() {
            return "()* loopback of 6542:37: (TK_0= '^' andExpressionGen_1+= andExpression )*";
        }
    }
    static final String DFA139_eotS =
        "\31\uffff";
    static final String DFA139_eofS =
        "\1\1\30\uffff";
    static final String DFA139_minS =
        "\1\31\30\uffff";
    static final String DFA139_maxS =
        "\1\144\30\uffff";
    static final String DFA139_acceptS =
        "\1\uffff\1\2\26\uffff\1\1";
    static final String DFA139_specialS =
        "\31\uffff}>";
    static final String[] DFA139_transitionS = {
            "\1\1\7\uffff\3\1\1\30\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22"+
            "\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\14\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA139_eot = DFA.unpackEncodedString(DFA139_eotS);
    static final short[] DFA139_eof = DFA.unpackEncodedString(DFA139_eofS);
    static final char[] DFA139_min = DFA.unpackEncodedStringToUnsignedChars(DFA139_minS);
    static final char[] DFA139_max = DFA.unpackEncodedStringToUnsignedChars(DFA139_maxS);
    static final short[] DFA139_accept = DFA.unpackEncodedString(DFA139_acceptS);
    static final short[] DFA139_special = DFA.unpackEncodedString(DFA139_specialS);
    static final short[][] DFA139_transition;

    static {
        int numStates = DFA139_transitionS.length;
        DFA139_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA139_transition[i] = DFA.unpackEncodedString(DFA139_transitionS[i]);
        }
    }

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = DFA139_eot;
            this.eof = DFA139_eof;
            this.min = DFA139_min;
            this.max = DFA139_max;
            this.accept = DFA139_accept;
            this.special = DFA139_special;
            this.transition = DFA139_transition;
        }
        public String getDescription() {
            return "()* loopback of 6587:47: (TK_0= '&' equalityExpressionGen_1+= equalityExpression )*";
        }
    }
    static final String DFA141_eotS =
        "\33\uffff";
    static final String DFA141_eofS =
        "\1\1\32\uffff";
    static final String DFA141_minS =
        "\1\31\32\uffff";
    static final String DFA141_maxS =
        "\1\146\32\uffff";
    static final String DFA141_acceptS =
        "\1\uffff\1\2\27\uffff\1\1\1\uffff";
    static final String DFA141_specialS =
        "\33\uffff}>";
    static final String[] DFA141_transitionS = {
            "\1\1\7\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\14\1\2\31",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA141_eot = DFA.unpackEncodedString(DFA141_eotS);
    static final short[] DFA141_eof = DFA.unpackEncodedString(DFA141_eofS);
    static final char[] DFA141_min = DFA.unpackEncodedStringToUnsignedChars(DFA141_minS);
    static final char[] DFA141_max = DFA.unpackEncodedStringToUnsignedChars(DFA141_maxS);
    static final short[] DFA141_accept = DFA.unpackEncodedString(DFA141_acceptS);
    static final short[] DFA141_special = DFA.unpackEncodedString(DFA141_specialS);
    static final short[][] DFA141_transition;

    static {
        int numStates = DFA141_transitionS.length;
        DFA141_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA141_transition[i] = DFA.unpackEncodedString(DFA141_transitionS[i]);
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = DFA141_eot;
            this.eof = DFA141_eof;
            this.min = DFA141_min;
            this.max = DFA141_max;
            this.accept = DFA141_accept;
            this.special = DFA141_special;
            this.transition = DFA141_transition;
        }
        public String getDescription() {
            return "()* loopback of 6632:51: ( (TK_0= '==' | TK_1= '!=' ) instanceOfExpressionGen_1+= instanceOfExpression )*";
        }
    }
    static final String DFA142_eotS =
        "\34\uffff";
    static final String DFA142_eofS =
        "\1\2\33\uffff";
    static final String DFA142_minS =
        "\1\31\33\uffff";
    static final String DFA142_maxS =
        "\1\147\33\uffff";
    static final String DFA142_acceptS =
        "\1\uffff\1\1\1\2\31\uffff";
    static final String DFA142_specialS =
        "\34\uffff}>";
    static final String[] DFA142_transitionS = {
            "\1\2\7\uffff\4\2\1\uffff\1\2\3\uffff\1\2\1\uffff\1\2\22\uffff"+
            "\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\16\2\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA142_eot = DFA.unpackEncodedString(DFA142_eotS);
    static final short[] DFA142_eof = DFA.unpackEncodedString(DFA142_eofS);
    static final char[] DFA142_min = DFA.unpackEncodedStringToUnsignedChars(DFA142_minS);
    static final char[] DFA142_max = DFA.unpackEncodedStringToUnsignedChars(DFA142_maxS);
    static final short[] DFA142_accept = DFA.unpackEncodedString(DFA142_acceptS);
    static final short[] DFA142_special = DFA.unpackEncodedString(DFA142_specialS);
    static final short[][] DFA142_transition;

    static {
        int numStates = DFA142_transitionS.length;
        DFA142_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA142_transition[i] = DFA.unpackEncodedString(DFA142_transitionS[i]);
        }
    }

    class DFA142 extends DFA {

        public DFA142(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 142;
            this.eot = DFA142_eot;
            this.eof = DFA142_eof;
            this.min = DFA142_min;
            this.max = DFA142_max;
            this.accept = DFA142_accept;
            this.special = DFA142_special;
            this.transition = DFA142_transition;
        }
        public String getDescription() {
            return "6686:51: (TK_0= 'instanceof' typeGen+= type )?";
        }
    }
    static final String DFA143_eotS =
        "\133\uffff";
    static final String DFA143_eofS =
        "\1\1\132\uffff";
    static final String DFA143_minS =
        "\1\31\27\uffff\2\4\2\uffff\1\0\76\uffff";
    static final String DFA143_maxS =
        "\1\147\27\uffff\2\161\2\uffff\1\0\76\uffff";
    static final String DFA143_acceptS =
        "\1\uffff\1\2\33\uffff\1\1\75\uffff";
    static final String DFA143_specialS =
        "\34\uffff\1\0\76\uffff}>";
    static final String[] DFA143_transitionS = {
            "\1\1\7\uffff\1\30\1\1\1\31\1\1\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\17\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\1\uffff\6\35\25\uffff\1\34\6\uffff\1\35\3\uffff\1\35"+
            "\12\uffff\10\35\1\uffff\2\35\2\uffff\3\35\41\uffff\2\35\2\uffff"+
            "\6\35",
            "\1\35\1\uffff\6\35\25\uffff\1\35\1\uffff\1\1\4\uffff\1\35"+
            "\3\uffff\1\35\12\uffff\10\35\1\uffff\2\35\2\uffff\3\35\41\uffff"+
            "\2\35\2\uffff\6\35",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA143_eot = DFA.unpackEncodedString(DFA143_eotS);
    static final short[] DFA143_eof = DFA.unpackEncodedString(DFA143_eofS);
    static final char[] DFA143_min = DFA.unpackEncodedStringToUnsignedChars(DFA143_minS);
    static final char[] DFA143_max = DFA.unpackEncodedStringToUnsignedChars(DFA143_maxS);
    static final short[] DFA143_accept = DFA.unpackEncodedString(DFA143_acceptS);
    static final short[] DFA143_special = DFA.unpackEncodedString(DFA143_specialS);
    static final short[][] DFA143_transition;

    static {
        int numStates = DFA143_transitionS.length;
        DFA143_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA143_transition[i] = DFA.unpackEncodedString(DFA143_transitionS[i]);
        }
    }

    class DFA143 extends DFA {

        public DFA143(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 143;
            this.eot = DFA143_eot;
            this.eof = DFA143_eof;
            this.min = DFA143_min;
            this.max = DFA143_max;
            this.accept = DFA143_accept;
            this.special = DFA143_special;
            this.transition = DFA143_transition;
        }
        public String getDescription() {
            return "()* loopback of 6726:41: (relationalOpGen+= relationalOp shiftExpressionGen_1+= shiftExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA143_28 = input.LA(1);

                         
                        int index143_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred205_Java()) ) {s = 29;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index143_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 143, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA144_eotS =
        "\101\uffff";
    static final String DFA144_eofS =
        "\101\uffff";
    static final String DFA144_minS =
        "\1\41\2\4\76\uffff";
    static final String DFA144_maxS =
        "\1\43\2\161\76\uffff";
    static final String DFA144_acceptS =
        "\3\uffff\1\1\1\3\35\uffff\1\2\1\4\35\uffff";
    static final String DFA144_specialS =
        "\101\uffff}>";
    static final String[] DFA144_transitionS = {
            "\1\1\1\uffff\1\2",
            "\1\4\1\uffff\6\4\25\uffff\1\4\6\uffff\1\4\3\uffff\1\3\12\uffff"+
            "\10\4\1\uffff\2\4\2\uffff\3\4\41\uffff\2\4\2\uffff\6\4",
            "\1\43\1\uffff\6\43\25\uffff\1\43\6\uffff\1\43\3\uffff\1\42"+
            "\12\uffff\10\43\1\uffff\2\43\2\uffff\3\43\41\uffff\2\43\2\uffff"+
            "\6\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA144_eot = DFA.unpackEncodedString(DFA144_eotS);
    static final short[] DFA144_eof = DFA.unpackEncodedString(DFA144_eofS);
    static final char[] DFA144_min = DFA.unpackEncodedStringToUnsignedChars(DFA144_minS);
    static final char[] DFA144_max = DFA.unpackEncodedStringToUnsignedChars(DFA144_maxS);
    static final short[] DFA144_accept = DFA.unpackEncodedString(DFA144_acceptS);
    static final short[] DFA144_special = DFA.unpackEncodedString(DFA144_specialS);
    static final short[][] DFA144_transition;

    static {
        int numStates = DFA144_transitionS.length;
        DFA144_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA144_transition[i] = DFA.unpackEncodedString(DFA144_transitionS[i]);
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = DFA144_eot;
            this.eof = DFA144_eof;
            this.min = DFA144_min;
            this.max = DFA144_max;
            this.accept = DFA144_accept;
            this.special = DFA144_special;
            this.transition = DFA144_transition;
        }
        public String getDescription() {
            return "6770:3: (TK_0= '<' TK_1= '=' | TK_2= '>' TK_3= '=' | TK_4= '<' | TK_5= '>' )";
        }
    }
    static final String DFA145_eotS =
        "\134\uffff";
    static final String DFA145_eofS =
        "\1\3\133\uffff";
    static final String DFA145_minS =
        "\1\31\2\4\32\uffff\1\0\36\uffff\1\0\37\uffff";
    static final String DFA145_maxS =
        "\1\147\2\161\32\uffff\1\0\36\uffff\1\0\37\uffff";
    static final String DFA145_acceptS =
        "\3\uffff\1\2\127\uffff\1\1";
    static final String DFA145_specialS =
        "\35\uffff\1\0\36\uffff\1\1\37\uffff}>";
    static final String[] DFA145_transitionS = {
            "\1\3\7\uffff\1\1\1\3\1\2\1\3\1\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\1\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\17\3",
            "\1\3\1\uffff\6\3\25\uffff\1\35\6\uffff\1\3\3\uffff\1\3\12"+
            "\uffff\10\3\1\uffff\2\3\2\uffff\3\3\41\uffff\2\3\2\uffff\6\3",
            "\1\3\1\uffff\6\3\25\uffff\1\3\1\uffff\1\74\4\uffff\1\3\3\uffff"+
            "\1\3\12\uffff\10\3\1\uffff\2\3\2\uffff\3\3\41\uffff\2\3\2\uffff"+
            "\6\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA145_eot = DFA.unpackEncodedString(DFA145_eotS);
    static final short[] DFA145_eof = DFA.unpackEncodedString(DFA145_eofS);
    static final char[] DFA145_min = DFA.unpackEncodedStringToUnsignedChars(DFA145_minS);
    static final char[] DFA145_max = DFA.unpackEncodedStringToUnsignedChars(DFA145_maxS);
    static final short[] DFA145_accept = DFA.unpackEncodedString(DFA145_acceptS);
    static final short[] DFA145_special = DFA.unpackEncodedString(DFA145_specialS);
    static final short[][] DFA145_transition;

    static {
        int numStates = DFA145_transitionS.length;
        DFA145_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA145_transition[i] = DFA.unpackEncodedString(DFA145_transitionS[i]);
        }
    }

    class DFA145 extends DFA {

        public DFA145(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 145;
            this.eot = DFA145_eot;
            this.eof = DFA145_eof;
            this.min = DFA145_min;
            this.max = DFA145_max;
            this.accept = DFA145_accept;
            this.special = DFA145_special;
            this.transition = DFA145_transition;
        }
        public String getDescription() {
            return "()* loopback of 6835:47: (shiftOpGen+= shiftOp additiveExpressionGen_1+= additiveExpression )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA145_29 = input.LA(1);

                         
                        int index145_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 91;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index145_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA145_60 = input.LA(1);

                         
                        int index145_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred209_Java()) ) {s = 91;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index145_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 145, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA148_eotS =
        "\36\uffff";
    static final String DFA148_eofS =
        "\1\1\35\uffff";
    static final String DFA148_minS =
        "\1\31\35\uffff";
    static final String DFA148_maxS =
        "\1\151\35\uffff";
    static final String DFA148_acceptS =
        "\1\uffff\1\2\32\uffff\1\1\1\uffff";
    static final String DFA148_specialS =
        "\36\uffff}>";
    static final String[] DFA148_transitionS = {
            "\1\1\7\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff\1\1\22\uffff"+
            "\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\17\1\2\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA148_eot = DFA.unpackEncodedString(DFA148_eotS);
    static final short[] DFA148_eof = DFA.unpackEncodedString(DFA148_eofS);
    static final char[] DFA148_min = DFA.unpackEncodedStringToUnsignedChars(DFA148_minS);
    static final char[] DFA148_max = DFA.unpackEncodedStringToUnsignedChars(DFA148_maxS);
    static final short[] DFA148_accept = DFA.unpackEncodedString(DFA148_acceptS);
    static final short[] DFA148_special = DFA.unpackEncodedString(DFA148_specialS);
    static final short[][] DFA148_transition;

    static {
        int numStates = DFA148_transitionS.length;
        DFA148_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA148_transition[i] = DFA.unpackEncodedString(DFA148_transitionS[i]);
        }
    }

    class DFA148 extends DFA {

        public DFA148(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 148;
            this.eot = DFA148_eot;
            this.eof = DFA148_eof;
            this.min = DFA148_min;
            this.max = DFA148_max;
            this.accept = DFA148_accept;
            this.special = DFA148_special;
            this.transition = DFA148_transition;
        }
        public String getDescription() {
            return "()* loopback of 6955:59: ( (TK_0= '+' | TK_1= '-' ) multiplicativeExpressionGen_1+= multiplicativeExpression )*";
        }
    }
    static final String DFA150_eotS =
        "\41\uffff";
    static final String DFA150_eofS =
        "\1\1\40\uffff";
    static final String DFA150_minS =
        "\1\31\40\uffff";
    static final String DFA150_maxS =
        "\1\153\40\uffff";
    static final String DFA150_acceptS =
        "\1\uffff\1\2\34\uffff\1\1\2\uffff";
    static final String DFA150_specialS =
        "\41\uffff}>";
    static final String[] DFA150_transitionS = {
            "\1\1\3\uffff\1\36\3\uffff\4\1\1\uffff\1\1\3\uffff\1\1\1\uffff"+
            "\1\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\21\1\2\36",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA150_eot = DFA.unpackEncodedString(DFA150_eotS);
    static final short[] DFA150_eof = DFA.unpackEncodedString(DFA150_eofS);
    static final char[] DFA150_min = DFA.unpackEncodedStringToUnsignedChars(DFA150_minS);
    static final char[] DFA150_max = DFA.unpackEncodedStringToUnsignedChars(DFA150_maxS);
    static final short[] DFA150_accept = DFA.unpackEncodedString(DFA150_acceptS);
    static final short[] DFA150_special = DFA.unpackEncodedString(DFA150_specialS);
    static final short[][] DFA150_transition;

    static {
        int numStates = DFA150_transitionS.length;
        DFA150_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA150_transition[i] = DFA.unpackEncodedString(DFA150_transitionS[i]);
        }
    }

    class DFA150 extends DFA {

        public DFA150(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 150;
            this.eot = DFA150_eot;
            this.eof = DFA150_eof;
            this.min = DFA150_min;
            this.max = DFA150_max;
            this.accept = DFA150_accept;
            this.special = DFA150_special;
            this.transition = DFA150_transition;
        }
        public String getDescription() {
            return "()* loopback of 7009:41: ( (TK_0= '*' | TK_1= '/' | TK_2= '%' ) unaryExpressionGen_1+= unaryExpression )*";
        }
    }
    static final String DFA151_eotS =
        "\37\uffff";
    static final String DFA151_eofS =
        "\37\uffff";
    static final String DFA151_minS =
        "\1\4\36\uffff";
    static final String DFA151_maxS =
        "\1\161\36\uffff";
    static final String DFA151_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\31\uffff";
    static final String DFA151_specialS =
        "\37\uffff}>";
    static final String[] DFA151_transitionS = {
            "\1\5\1\uffff\6\5\25\uffff\1\5\6\uffff\1\5\16\uffff\10\5\1\uffff"+
            "\2\5\2\uffff\3\5\41\uffff\1\1\1\2\2\uffff\1\3\1\4\4\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA151_eot = DFA.unpackEncodedString(DFA151_eotS);
    static final short[] DFA151_eof = DFA.unpackEncodedString(DFA151_eofS);
    static final char[] DFA151_min = DFA.unpackEncodedStringToUnsignedChars(DFA151_minS);
    static final char[] DFA151_max = DFA.unpackEncodedStringToUnsignedChars(DFA151_maxS);
    static final short[] DFA151_accept = DFA.unpackEncodedString(DFA151_acceptS);
    static final short[] DFA151_special = DFA.unpackEncodedString(DFA151_specialS);
    static final short[][] DFA151_transition;

    static {
        int numStates = DFA151_transitionS.length;
        DFA151_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA151_transition[i] = DFA.unpackEncodedString(DFA151_transitionS[i]);
        }
    }

    class DFA151 extends DFA {

        public DFA151(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 151;
            this.eot = DFA151_eot;
            this.eof = DFA151_eof;
            this.min = DFA151_min;
            this.max = DFA151_max;
            this.accept = DFA151_accept;
            this.special = DFA151_special;
            this.transition = DFA151_transition;
        }
        public String getDescription() {
            return "7071:1: unaryExpression returns [Node returnNode] : (TK_0= '+' unaryExpressionGen+= unaryExpression | TK_0= '-' unaryExpressionGen+= unaryExpression | TK_0= '++' unaryExpressionGen+= unaryExpression | TK_0= '--' unaryExpressionGen+= unaryExpression | unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );";
        }
    }
    static final String DFA154_eotS =
        "\72\uffff";
    static final String DFA154_eofS =
        "\72\uffff";
    static final String DFA154_minS =
        "\1\4\2\uffff\1\4\27\uffff\36\0\1\uffff";
    static final String DFA154_maxS =
        "\1\161\2\uffff\1\161\27\uffff\36\0\1\uffff";
    static final String DFA154_acceptS =
        "\1\uffff\1\1\1\2\1\uffff\1\4\64\uffff\1\3";
    static final String DFA154_specialS =
        "\33\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\uffff}>";
    static final String[] DFA154_transitionS = {
            "\1\4\1\uffff\6\4\25\uffff\1\4\6\uffff\1\4\16\uffff\10\4\1\uffff"+
            "\1\4\1\3\2\uffff\3\4\47\uffff\1\1\1\2\2\4",
            "",
            "",
            "\1\57\1\uffff\1\50\1\51\1\52\1\45\1\46\1\47\25\uffff\1\42"+
            "\6\uffff\1\70\16\uffff\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1"+
            "\67\1\uffff\1\44\1\41\2\uffff\1\55\1\53\1\54\41\uffff\1\33\1"+
            "\34\2\uffff\1\35\1\36\1\37\1\40\1\43\1\56",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA154_eot = DFA.unpackEncodedString(DFA154_eotS);
    static final short[] DFA154_eof = DFA.unpackEncodedString(DFA154_eofS);
    static final char[] DFA154_min = DFA.unpackEncodedStringToUnsignedChars(DFA154_minS);
    static final char[] DFA154_max = DFA.unpackEncodedStringToUnsignedChars(DFA154_maxS);
    static final short[] DFA154_accept = DFA.unpackEncodedString(DFA154_acceptS);
    static final short[] DFA154_special = DFA.unpackEncodedString(DFA154_specialS);
    static final short[][] DFA154_transition;

    static {
        int numStates = DFA154_transitionS.length;
        DFA154_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA154_transition[i] = DFA.unpackEncodedString(DFA154_transitionS[i]);
        }
    }

    class DFA154 extends DFA {

        public DFA154(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 154;
            this.eot = DFA154_eot;
            this.eof = DFA154_eof;
            this.min = DFA154_min;
            this.max = DFA154_max;
            this.accept = DFA154_accept;
            this.special = DFA154_special;
            this.transition = DFA154_transition;
        }
        public String getDescription() {
            return "7200:1: unaryExpressionNotPlusMinus returns [Node returnNode] : (TK_0= '~' unaryExpressionGen+= unaryExpression | TK_0= '!' unaryExpressionGen+= unaryExpression | castExpressionGen+= castExpression | primaryGen+= primary (selectorGen+= selector )* (TK_0= '++' | TK_1= '--' )? );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA154_27 = input.LA(1);

                         
                        int index154_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_27);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA154_28 = input.LA(1);

                         
                        int index154_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_28);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA154_29 = input.LA(1);

                         
                        int index154_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_29);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA154_30 = input.LA(1);

                         
                        int index154_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_30);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA154_31 = input.LA(1);

                         
                        int index154_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_31);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA154_32 = input.LA(1);

                         
                        int index154_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_32);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA154_33 = input.LA(1);

                         
                        int index154_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_33);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA154_34 = input.LA(1);

                         
                        int index154_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_34);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA154_35 = input.LA(1);

                         
                        int index154_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_35);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA154_36 = input.LA(1);

                         
                        int index154_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_36);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA154_37 = input.LA(1);

                         
                        int index154_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_37);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA154_38 = input.LA(1);

                         
                        int index154_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_38);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA154_39 = input.LA(1);

                         
                        int index154_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_39);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA154_40 = input.LA(1);

                         
                        int index154_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_40);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA154_41 = input.LA(1);

                         
                        int index154_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_41);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA154_42 = input.LA(1);

                         
                        int index154_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_42);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA154_43 = input.LA(1);

                         
                        int index154_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_43);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA154_44 = input.LA(1);

                         
                        int index154_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_44);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA154_45 = input.LA(1);

                         
                        int index154_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_45);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA154_46 = input.LA(1);

                         
                        int index154_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_46);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA154_47 = input.LA(1);

                         
                        int index154_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_47);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA154_48 = input.LA(1);

                         
                        int index154_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_48);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA154_49 = input.LA(1);

                         
                        int index154_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_49);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA154_50 = input.LA(1);

                         
                        int index154_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_50);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA154_51 = input.LA(1);

                         
                        int index154_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_51);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA154_52 = input.LA(1);

                         
                        int index154_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_52);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA154_53 = input.LA(1);

                         
                        int index154_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_53);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA154_54 = input.LA(1);

                         
                        int index154_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_54);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA154_55 = input.LA(1);

                         
                        int index154_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_55);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA154_56 = input.LA(1);

                         
                        int index154_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_Java()) ) {s = 57;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index154_56);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 154, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA152_eotS =
        "\45\uffff";
    static final String DFA152_eofS =
        "\1\1\44\uffff";
    static final String DFA152_minS =
        "\1\31\44\uffff";
    static final String DFA152_maxS =
        "\1\155\44\uffff";
    static final String DFA152_acceptS =
        "\1\uffff\1\2\41\uffff\1\1\1\uffff";
    static final String DFA152_specialS =
        "\45\uffff}>";
    static final String[] DFA152_transitionS = {
            "\1\1\2\uffff\1\43\1\1\3\uffff\4\1\1\uffff\1\1\2\uffff\1\43"+
            "\1\1\1\uffff\1\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff"+
            "\25\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA152_eot = DFA.unpackEncodedString(DFA152_eotS);
    static final short[] DFA152_eof = DFA.unpackEncodedString(DFA152_eofS);
    static final char[] DFA152_min = DFA.unpackEncodedStringToUnsignedChars(DFA152_minS);
    static final char[] DFA152_max = DFA.unpackEncodedStringToUnsignedChars(DFA152_maxS);
    static final short[] DFA152_accept = DFA.unpackEncodedString(DFA152_acceptS);
    static final short[] DFA152_special = DFA.unpackEncodedString(DFA152_specialS);
    static final short[][] DFA152_transition;

    static {
        int numStates = DFA152_transitionS.length;
        DFA152_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA152_transition[i] = DFA.unpackEncodedString(DFA152_transitionS[i]);
        }
    }

    class DFA152 extends DFA {

        public DFA152(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 152;
            this.eot = DFA152_eot;
            this.eof = DFA152_eof;
            this.min = DFA152_min;
            this.max = DFA152_max;
            this.accept = DFA152_accept;
            this.special = DFA152_special;
            this.transition = DFA152_transition;
        }
        public String getDescription() {
            return "()* loopback of 7273:40: (selectorGen+= selector )*";
        }
    }
    static final String DFA153_eotS =
        "\43\uffff";
    static final String DFA153_eofS =
        "\1\3\42\uffff";
    static final String DFA153_minS =
        "\1\31\42\uffff";
    static final String DFA153_maxS =
        "\1\155\42\uffff";
    static final String DFA153_acceptS =
        "\1\uffff\1\1\1\2\1\3\37\uffff";
    static final String DFA153_specialS =
        "\43\uffff}>";
    static final String[] DFA153_transitionS = {
            "\1\3\3\uffff\1\3\3\uffff\4\3\1\uffff\1\3\3\uffff\1\3\1\uffff"+
            "\1\3\22\uffff\1\3\2\uffff\1\3\7\uffff\1\3\16\uffff\23\3\1\1"+
            "\1\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA153_eot = DFA.unpackEncodedString(DFA153_eotS);
    static final short[] DFA153_eof = DFA.unpackEncodedString(DFA153_eofS);
    static final char[] DFA153_min = DFA.unpackEncodedStringToUnsignedChars(DFA153_minS);
    static final char[] DFA153_max = DFA.unpackEncodedStringToUnsignedChars(DFA153_maxS);
    static final short[] DFA153_accept = DFA.unpackEncodedString(DFA153_acceptS);
    static final short[] DFA153_special = DFA.unpackEncodedString(DFA153_specialS);
    static final short[][] DFA153_transition;

    static {
        int numStates = DFA153_transitionS.length;
        DFA153_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA153_transition[i] = DFA.unpackEncodedString(DFA153_transitionS[i]);
        }
    }

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = DFA153_eot;
            this.eof = DFA153_eof;
            this.min = DFA153_min;
            this.max = DFA153_max;
            this.accept = DFA153_accept;
            this.special = DFA153_special;
            this.transition = DFA153_transition;
        }
        public String getDescription() {
            return "7273:52: (TK_0= '++' | TK_1= '--' )?";
        }
    }
    static final String DFA156_eotS =
        "\41\uffff";
    static final String DFA156_eofS =
        "\41\uffff";
    static final String DFA156_minS =
        "\1\101\1\4\10\0\27\uffff";
    static final String DFA156_maxS =
        "\1\101\1\161\10\0\27\uffff";
    static final String DFA156_acceptS =
        "\12\uffff\1\2\25\uffff\1\1";
    static final String DFA156_specialS =
        "\2\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\27\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\1",
            "\1\12\1\uffff\6\12\25\uffff\1\12\6\uffff\1\12\16\uffff\1\2"+
            "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\2\12\2\uffff\3\12\41"+
            "\uffff\2\12\2\uffff\6\12",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "7321:1: castExpression returns [Node returnNode] : (TK_0= '(' primitiveTypeGen+= primitiveType TK_1= ')' unaryExpressionGen+= unaryExpression | TK_0= '(' (typeGen+= type | expressionGen+= expression ) TK_1= ')' unaryExpressionNotPlusMinusGen+= unaryExpressionNotPlusMinus );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_2 = input.LA(1);

                         
                        int index156_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_3 = input.LA(1);

                         
                        int index156_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_3);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_4 = input.LA(1);

                         
                        int index156_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_4);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_5 = input.LA(1);

                         
                        int index156_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_6 = input.LA(1);

                         
                        int index156_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_7 = input.LA(1);

                         
                        int index156_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_8 = input.LA(1);

                         
                        int index156_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_9 = input.LA(1);

                         
                        int index156_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_Java()) ) {s = 32;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index156_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA155_eotS =
        "\127\uffff";
    static final String DFA155_eofS =
        "\127\uffff";
    static final String DFA155_minS =
        "\1\4\1\0\10\34\65\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0"+
        "\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA155_maxS =
        "\1\161\1\0\10\102\65\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff"+
        "\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff\1\0\2\uffff";
    static final String DFA155_acceptS =
        "\12\uffff\1\2\63\uffff\1\1\30\uffff";
    static final String DFA155_specialS =
        "\1\uffff\1\0\75\uffff\1\1\2\uffff\1\2\2\uffff\1\3\2\uffff\1\4\2"+
        "\uffff\1\5\2\uffff\1\6\2\uffff\1\7\2\uffff\1\10\2\uffff}>";
    static final String[] DFA155_transitionS = {
            "\1\1\1\uffff\6\12\25\uffff\1\12\6\uffff\1\12\16\uffff\1\2\1"+
            "\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\2\12\2\uffff\3\12\41\uffff"+
            "\2\12\2\uffff\6\12",
            "\1\uffff",
            "\1\12\14\uffff\1\77\30\uffff\1\76",
            "\1\12\14\uffff\1\102\30\uffff\1\76",
            "\1\12\14\uffff\1\105\30\uffff\1\76",
            "\1\12\14\uffff\1\110\30\uffff\1\76",
            "\1\12\14\uffff\1\113\30\uffff\1\76",
            "\1\12\14\uffff\1\116\30\uffff\1\76",
            "\1\12\14\uffff\1\121\30\uffff\1\76",
            "\1\12\14\uffff\1\124\30\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA155_eot = DFA.unpackEncodedString(DFA155_eotS);
    static final short[] DFA155_eof = DFA.unpackEncodedString(DFA155_eofS);
    static final char[] DFA155_min = DFA.unpackEncodedStringToUnsignedChars(DFA155_minS);
    static final char[] DFA155_max = DFA.unpackEncodedStringToUnsignedChars(DFA155_maxS);
    static final short[] DFA155_accept = DFA.unpackEncodedString(DFA155_acceptS);
    static final short[] DFA155_special = DFA.unpackEncodedString(DFA155_specialS);
    static final short[][] DFA155_transition;

    static {
        int numStates = DFA155_transitionS.length;
        DFA155_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA155_transition[i] = DFA.unpackEncodedString(DFA155_transitionS[i]);
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = DFA155_eot;
            this.eof = DFA155_eof;
            this.min = DFA155_min;
            this.max = DFA155_max;
            this.accept = DFA155_accept;
            this.special = DFA155_special;
            this.transition = DFA155_transition;
        }
        public String getDescription() {
            return "7368:17: (typeGen+= type | expressionGen+= expression )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_1 = input.LA(1);

                         
                        int index155_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA155_63 = input.LA(1);

                         
                        int index155_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_63);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA155_66 = input.LA(1);

                         
                        int index155_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_66);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA155_69 = input.LA(1);

                         
                        int index155_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_69);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA155_72 = input.LA(1);

                         
                        int index155_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_72);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA155_75 = input.LA(1);

                         
                        int index155_75 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_75);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA155_78 = input.LA(1);

                         
                        int index155_78 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_78);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA155_81 = input.LA(1);

                         
                        int index155_81 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_81);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA155_84 = input.LA(1);

                         
                        int index155_84 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_Java()) ) {s = 62;}

                        else if ( (true) ) {s = 10;}

                         
                        input.seek(index155_84);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA163_eotS =
        "\31\uffff";
    static final String DFA163_eofS =
        "\31\uffff";
    static final String DFA163_minS =
        "\1\4\30\uffff";
    static final String DFA163_maxS =
        "\1\161\30\uffff";
    static final String DFA163_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\10\uffff\1\6\1\7\1\10\7\uffff\1\11";
    static final String DFA163_specialS =
        "\31\uffff}>";
    static final String[] DFA163_transitionS = {
            "\1\17\1\uffff\6\5\25\uffff\1\2\6\uffff\1\30\16\uffff\10\20"+
            "\1\uffff\1\4\1\1\2\uffff\3\5\51\uffff\1\3\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA163_eot = DFA.unpackEncodedString(DFA163_eotS);
    static final short[] DFA163_eof = DFA.unpackEncodedString(DFA163_eofS);
    static final char[] DFA163_min = DFA.unpackEncodedStringToUnsignedChars(DFA163_minS);
    static final char[] DFA163_max = DFA.unpackEncodedStringToUnsignedChars(DFA163_maxS);
    static final short[] DFA163_accept = DFA.unpackEncodedString(DFA163_acceptS);
    static final short[] DFA163_special = DFA.unpackEncodedString(DFA163_specialS);
    static final short[][] DFA163_transition;

    static {
        int numStates = DFA163_transitionS.length;
        DFA163_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA163_transition[i] = DFA.unpackEncodedString(DFA163_transitionS[i]);
        }
    }

    class DFA163 extends DFA {

        public DFA163(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 163;
            this.eot = DFA163_eot;
            this.eof = DFA163_eof;
            this.min = DFA163_min;
            this.max = DFA163_max;
            this.accept = DFA163_accept;
            this.special = DFA163_special;
            this.transition = DFA163_transition;
        }
        public String getDescription() {
            return "7426:1: primary returns [Node returnNode] : (parExpressionGen+= parExpression | nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments (explicitGenericInvocationSuffixGen+= explicitGenericInvocationSuffix | TK_0= 'this' argumentsGen+= arguments ) | TK_0= 'this' (TK_1= '.' IdentifierGen_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | TK_0= 'super' superSuffixGen+= superSuffix | literalGen+= literal | TK_0= 'new' creatorGen+= creator | IdentifierGen= Identifier (TK_0= '.' IdentifierGen_1_List+= Identifier )* (identifierSuffixGen+= identifierSuffix )? | primitiveTypeGen+= primitiveType (TK_0= '[' TK_1= ']' )* TK_2= '.' TK_3= 'class' | TK_0= 'void' TK_1= '.' TK_2= 'class' );";
        }
    }
    static final String DFA158_eotS =
        "\55\uffff";
    static final String DFA158_eofS =
        "\1\1\54\uffff";
    static final String DFA158_minS =
        "\1\31\2\uffff\1\4\46\uffff\1\0\2\uffff";
    static final String DFA158_maxS =
        "\1\155\2\uffff\1\161\46\uffff\1\0\2\uffff";
    static final String DFA158_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA158_specialS =
        "\52\uffff\1\0\2\uffff}>";
    static final String[] DFA158_transitionS = {
            "\1\1\2\uffff\1\3\1\1\3\uffff\4\1\1\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\1\1\22\uffff\1\1\1\uffff\2\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "",
            "\1\52\31\uffff\1\1\2\uffff\1\1\36\uffff\1\1\57\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA158_eot = DFA.unpackEncodedString(DFA158_eotS);
    static final short[] DFA158_eof = DFA.unpackEncodedString(DFA158_eofS);
    static final char[] DFA158_min = DFA.unpackEncodedStringToUnsignedChars(DFA158_minS);
    static final char[] DFA158_max = DFA.unpackEncodedStringToUnsignedChars(DFA158_maxS);
    static final short[] DFA158_accept = DFA.unpackEncodedString(DFA158_acceptS);
    static final short[] DFA158_special = DFA.unpackEncodedString(DFA158_specialS);
    static final short[][] DFA158_transition;

    static {
        int numStates = DFA158_transitionS.length;
        DFA158_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA158_transition[i] = DFA.unpackEncodedString(DFA158_transitionS[i]);
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = DFA158_eot;
            this.eof = DFA158_eof;
            this.min = DFA158_min;
            this.max = DFA158_max;
            this.accept = DFA158_accept;
            this.special = DFA158_special;
            this.transition = DFA158_transition;
        }
        public String getDescription() {
            return "()* loopback of 7493:21: (TK_1= '.' IdentifierGen_List+= Identifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_42 = input.LA(1);

                         
                        int index158_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index158_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA159_eotS =
        "\113\uffff";
    static final String DFA159_eofS =
        "\1\4\112\uffff";
    static final String DFA159_minS =
        "\1\31\1\4\1\uffff\1\4\43\uffff\36\0\1\uffff\3\0\2\uffff";
    static final String DFA159_maxS =
        "\1\155\1\161\1\uffff\1\161\43\uffff\36\0\1\uffff\3\0\2\uffff";
    static final String DFA159_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\106\uffff";
    static final String DFA159_specialS =
        "\47\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\uffff\1\36\1\37\1\40\2\uffff}>";
    static final String[] DFA159_transitionS = {
            "\1\4\2\uffff\1\3\1\4\3\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\22\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\25\4",
            "\1\73\1\uffff\1\64\1\65\1\66\1\61\1\62\1\63\25\uffff\1\56"+
            "\6\uffff\1\104\1\uffff\1\2\14\uffff\1\74\1\75\1\76\1\77\1\100"+
            "\1\101\1\102\1\103\1\uffff\1\60\1\55\2\uffff\1\71\1\67\1\70"+
            "\41\uffff\1\47\1\50\2\uffff\1\51\1\52\1\53\1\54\1\57\1\72",
            "",
            "\1\4\31\uffff\1\2\2\uffff\1\2\36\uffff\1\107\57\uffff\1\106"+
            "\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA159_eot = DFA.unpackEncodedString(DFA159_eotS);
    static final short[] DFA159_eof = DFA.unpackEncodedString(DFA159_eofS);
    static final char[] DFA159_min = DFA.unpackEncodedStringToUnsignedChars(DFA159_minS);
    static final char[] DFA159_max = DFA.unpackEncodedStringToUnsignedChars(DFA159_maxS);
    static final short[] DFA159_accept = DFA.unpackEncodedString(DFA159_acceptS);
    static final short[] DFA159_special = DFA.unpackEncodedString(DFA159_specialS);
    static final short[][] DFA159_transition;

    static {
        int numStates = DFA159_transitionS.length;
        DFA159_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA159_transition[i] = DFA.unpackEncodedString(DFA159_transitionS[i]);
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = DFA159_eot;
            this.eof = DFA159_eof;
            this.min = DFA159_min;
            this.max = DFA159_max;
            this.accept = DFA159_accept;
            this.special = DFA159_special;
            this.transition = DFA159_transition;
        }
        public String getDescription() {
            return "7493:64: (identifierSuffixGen+= identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_39 = input.LA(1);

                         
                        int index159_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA159_40 = input.LA(1);

                         
                        int index159_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA159_41 = input.LA(1);

                         
                        int index159_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA159_42 = input.LA(1);

                         
                        int index159_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA159_43 = input.LA(1);

                         
                        int index159_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA159_44 = input.LA(1);

                         
                        int index159_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA159_45 = input.LA(1);

                         
                        int index159_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA159_46 = input.LA(1);

                         
                        int index159_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA159_47 = input.LA(1);

                         
                        int index159_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA159_48 = input.LA(1);

                         
                        int index159_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_48);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA159_49 = input.LA(1);

                         
                        int index159_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA159_50 = input.LA(1);

                         
                        int index159_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_50);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA159_51 = input.LA(1);

                         
                        int index159_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA159_52 = input.LA(1);

                         
                        int index159_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA159_53 = input.LA(1);

                         
                        int index159_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA159_54 = input.LA(1);

                         
                        int index159_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA159_55 = input.LA(1);

                         
                        int index159_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA159_56 = input.LA(1);

                         
                        int index159_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA159_57 = input.LA(1);

                         
                        int index159_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA159_58 = input.LA(1);

                         
                        int index159_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA159_59 = input.LA(1);

                         
                        int index159_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA159_60 = input.LA(1);

                         
                        int index159_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_60);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA159_61 = input.LA(1);

                         
                        int index159_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_61);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA159_62 = input.LA(1);

                         
                        int index159_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA159_63 = input.LA(1);

                         
                        int index159_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA159_64 = input.LA(1);

                         
                        int index159_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_64);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA159_65 = input.LA(1);

                         
                        int index159_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_65);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA159_66 = input.LA(1);

                         
                        int index159_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA159_67 = input.LA(1);

                         
                        int index159_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_67);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA159_68 = input.LA(1);

                         
                        int index159_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_68);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA159_70 = input.LA(1);

                         
                        int index159_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA159_71 = input.LA(1);

                         
                        int index159_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA159_72 = input.LA(1);

                         
                        int index159_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index159_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA160_eotS =
        "\55\uffff";
    static final String DFA160_eofS =
        "\1\1\54\uffff";
    static final String DFA160_minS =
        "\1\31\2\uffff\1\4\46\uffff\1\0\2\uffff";
    static final String DFA160_maxS =
        "\1\155\2\uffff\1\161\46\uffff\1\0\2\uffff";
    static final String DFA160_acceptS =
        "\1\uffff\1\2\52\uffff\1\1";
    static final String DFA160_specialS =
        "\52\uffff\1\0\2\uffff}>";
    static final String[] DFA160_transitionS = {
            "\1\1\2\uffff\1\3\1\1\3\uffff\4\1\1\uffff\1\1\2\uffff\2\1\1"+
            "\uffff\1\1\22\uffff\1\1\1\uffff\2\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "",
            "\1\52\31\uffff\1\1\2\uffff\1\1\36\uffff\1\1\57\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA160_eot = DFA.unpackEncodedString(DFA160_eotS);
    static final short[] DFA160_eof = DFA.unpackEncodedString(DFA160_eofS);
    static final char[] DFA160_min = DFA.unpackEncodedStringToUnsignedChars(DFA160_minS);
    static final char[] DFA160_max = DFA.unpackEncodedStringToUnsignedChars(DFA160_maxS);
    static final short[] DFA160_accept = DFA.unpackEncodedString(DFA160_acceptS);
    static final short[] DFA160_special = DFA.unpackEncodedString(DFA160_specialS);
    static final short[][] DFA160_transition;

    static {
        int numStates = DFA160_transitionS.length;
        DFA160_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA160_transition[i] = DFA.unpackEncodedString(DFA160_transitionS[i]);
        }
    }

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = DFA160_eot;
            this.eof = DFA160_eof;
            this.min = DFA160_min;
            this.max = DFA160_max;
            this.accept = DFA160_accept;
            this.special = DFA160_special;
            this.transition = DFA160_transition;
        }
        public String getDescription() {
            return "()* loopback of 7618:34: (TK_0= '.' IdentifierGen_1_List+= Identifier )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_42 = input.LA(1);

                         
                        int index160_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_Java()) ) {s = 44;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index160_42);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA161_eotS =
        "\113\uffff";
    static final String DFA161_eofS =
        "\1\4\112\uffff";
    static final String DFA161_minS =
        "\1\31\1\4\1\uffff\1\4\43\uffff\36\0\1\uffff\3\0\2\uffff";
    static final String DFA161_maxS =
        "\1\155\1\161\1\uffff\1\161\43\uffff\36\0\1\uffff\3\0\2\uffff";
    static final String DFA161_acceptS =
        "\2\uffff\1\1\1\uffff\1\2\106\uffff";
    static final String DFA161_specialS =
        "\47\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\uffff\1\36\1\37\1\40\2\uffff}>";
    static final String[] DFA161_transitionS = {
            "\1\4\2\uffff\1\3\1\4\3\uffff\4\4\1\uffff\1\4\2\uffff\1\1\1"+
            "\4\1\uffff\1\4\22\uffff\1\4\1\uffff\1\2\1\4\7\uffff\1\4\16\uffff"+
            "\25\4",
            "\1\73\1\uffff\1\64\1\65\1\66\1\61\1\62\1\63\25\uffff\1\56"+
            "\6\uffff\1\104\1\uffff\1\2\14\uffff\1\74\1\75\1\76\1\77\1\100"+
            "\1\101\1\102\1\103\1\uffff\1\60\1\55\2\uffff\1\71\1\67\1\70"+
            "\41\uffff\1\47\1\50\2\uffff\1\51\1\52\1\53\1\54\1\57\1\72",
            "",
            "\1\4\31\uffff\1\2\2\uffff\1\2\36\uffff\1\107\57\uffff\1\106"+
            "\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA161_eot = DFA.unpackEncodedString(DFA161_eotS);
    static final short[] DFA161_eof = DFA.unpackEncodedString(DFA161_eofS);
    static final char[] DFA161_min = DFA.unpackEncodedStringToUnsignedChars(DFA161_minS);
    static final char[] DFA161_max = DFA.unpackEncodedStringToUnsignedChars(DFA161_maxS);
    static final short[] DFA161_accept = DFA.unpackEncodedString(DFA161_acceptS);
    static final short[] DFA161_special = DFA.unpackEncodedString(DFA161_specialS);
    static final short[][] DFA161_transition;

    static {
        int numStates = DFA161_transitionS.length;
        DFA161_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA161_transition[i] = DFA.unpackEncodedString(DFA161_transitionS[i]);
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = DFA161_eot;
            this.eof = DFA161_eof;
            this.min = DFA161_min;
            this.max = DFA161_max;
            this.accept = DFA161_accept;
            this.special = DFA161_special;
            this.transition = DFA161_transition;
        }
        public String getDescription() {
            return "7618:79: (identifierSuffixGen+= identifierSuffix )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_39 = input.LA(1);

                         
                        int index161_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_39);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA161_40 = input.LA(1);

                         
                        int index161_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_40);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA161_41 = input.LA(1);

                         
                        int index161_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_41);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA161_42 = input.LA(1);

                         
                        int index161_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_42);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA161_43 = input.LA(1);

                         
                        int index161_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA161_44 = input.LA(1);

                         
                        int index161_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA161_45 = input.LA(1);

                         
                        int index161_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_45);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA161_46 = input.LA(1);

                         
                        int index161_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_46);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA161_47 = input.LA(1);

                         
                        int index161_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA161_48 = input.LA(1);

                         
                        int index161_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_48);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA161_49 = input.LA(1);

                         
                        int index161_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_49);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA161_50 = input.LA(1);

                         
                        int index161_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_50);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA161_51 = input.LA(1);

                         
                        int index161_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_51);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA161_52 = input.LA(1);

                         
                        int index161_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_52);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA161_53 = input.LA(1);

                         
                        int index161_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_53);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA161_54 = input.LA(1);

                         
                        int index161_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_54);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA161_55 = input.LA(1);

                         
                        int index161_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_55);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA161_56 = input.LA(1);

                         
                        int index161_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_56);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA161_57 = input.LA(1);

                         
                        int index161_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_57);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA161_58 = input.LA(1);

                         
                        int index161_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_58);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA161_59 = input.LA(1);

                         
                        int index161_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_59);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA161_60 = input.LA(1);

                         
                        int index161_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_60);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA161_61 = input.LA(1);

                         
                        int index161_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_61);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA161_62 = input.LA(1);

                         
                        int index161_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_62);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA161_63 = input.LA(1);

                         
                        int index161_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_63);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA161_64 = input.LA(1);

                         
                        int index161_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_64);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA161_65 = input.LA(1);

                         
                        int index161_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_65);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA161_66 = input.LA(1);

                         
                        int index161_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_66);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA161_67 = input.LA(1);

                         
                        int index161_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_67);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA161_68 = input.LA(1);

                         
                        int index161_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_68);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA161_70 = input.LA(1);

                         
                        int index161_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_70);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA161_71 = input.LA(1);

                         
                        int index161_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_71);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA161_72 = input.LA(1);

                         
                        int index161_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred239_Java()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index161_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA167_eotS =
        "\50\uffff";
    static final String DFA167_eofS =
        "\50\uffff";
    static final String DFA167_minS =
        "\1\34\1\4\1\uffff\1\36\44\uffff";
    static final String DFA167_maxS =
        "\1\101\1\161\1\uffff\1\161\44\uffff";
    static final String DFA167_acceptS =
        "\2\uffff\1\3\1\uffff\1\1\1\2\35\uffff\1\4\1\6\1\7\1\10\1\5";
    static final String DFA167_specialS =
        "\50\uffff}>";
    static final String[] DFA167_transitionS = {
            "\1\3\14\uffff\1\1\27\uffff\1\2",
            "\1\5\1\uffff\6\5\25\uffff\1\5\6\uffff\1\5\1\uffff\1\4\14\uffff"+
            "\10\5\1\uffff\2\5\2\uffff\3\5\41\uffff\2\5\2\uffff\6\5",
            "",
            "\1\43\2\uffff\1\47\36\uffff\1\45\57\uffff\1\44\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA167_eot = DFA.unpackEncodedString(DFA167_eotS);
    static final short[] DFA167_eof = DFA.unpackEncodedString(DFA167_eofS);
    static final char[] DFA167_min = DFA.unpackEncodedStringToUnsignedChars(DFA167_minS);
    static final char[] DFA167_max = DFA.unpackEncodedStringToUnsignedChars(DFA167_maxS);
    static final short[] DFA167_accept = DFA.unpackEncodedString(DFA167_acceptS);
    static final short[] DFA167_special = DFA.unpackEncodedString(DFA167_specialS);
    static final short[][] DFA167_transition;

    static {
        int numStates = DFA167_transitionS.length;
        DFA167_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA167_transition[i] = DFA.unpackEncodedString(DFA167_transitionS[i]);
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = DFA167_eot;
            this.eof = DFA167_eof;
            this.min = DFA167_min;
            this.max = DFA167_max;
            this.accept = DFA167_accept;
            this.special = DFA167_special;
            this.transition = DFA167_transition;
        }
        public String getDescription() {
            return "7762:1: identifierSuffix returns [Node returnNode] : ( (TK_0= '[' TK_1= ']' )+ TK_2= '.' TK_3= 'class' | (TK_0= '[' expressionGen+= expression TK_1= ']' )+ | argumentsGen+= arguments | TK_0= '.' TK_1= 'class' | TK_0= '.' explicitGenericInvocationGen+= explicitGenericInvocation | TK_0= '.' TK_1= 'this' | TK_0= '.' TK_1= 'super' argumentsGen+= arguments | TK_0= '.' TK_1= 'new' (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )? innerCreatorGen+= innerCreator );";
        }
    }
    static final String DFA165_eotS =
        "\104\uffff";
    static final String DFA165_eofS =
        "\1\1\103\uffff";
    static final String DFA165_minS =
        "\1\31\1\uffff\1\4\42\uffff\36\0\1\uffff";
    static final String DFA165_maxS =
        "\1\155\1\uffff\1\161\42\uffff\36\0\1\uffff";
    static final String DFA165_acceptS =
        "\1\uffff\1\2\101\uffff\1\1";
    static final String DFA165_specialS =
        "\45\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\uffff}>";
    static final String[] DFA165_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "\1\71\1\uffff\1\62\1\63\1\64\1\57\1\60\1\61\25\uffff\1\54"+
            "\6\uffff\1\102\16\uffff\1\72\1\73\1\74\1\75\1\76\1\77\1\100"+
            "\1\101\1\uffff\1\56\1\53\2\uffff\1\67\1\65\1\66\41\uffff\1\45"+
            "\1\46\2\uffff\1\47\1\50\1\51\1\52\1\55\1\70",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA165_eot = DFA.unpackEncodedString(DFA165_eotS);
    static final short[] DFA165_eof = DFA.unpackEncodedString(DFA165_eofS);
    static final char[] DFA165_min = DFA.unpackEncodedStringToUnsignedChars(DFA165_minS);
    static final char[] DFA165_max = DFA.unpackEncodedStringToUnsignedChars(DFA165_maxS);
    static final short[] DFA165_accept = DFA.unpackEncodedString(DFA165_acceptS);
    static final short[] DFA165_special = DFA.unpackEncodedString(DFA165_specialS);
    static final short[][] DFA165_transition;

    static {
        int numStates = DFA165_transitionS.length;
        DFA165_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA165_transition[i] = DFA.unpackEncodedString(DFA165_transitionS[i]);
        }
    }

    class DFA165 extends DFA {

        public DFA165(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 165;
            this.eot = DFA165_eot;
            this.eof = DFA165_eof;
            this.min = DFA165_min;
            this.max = DFA165_max;
            this.accept = DFA165_accept;
            this.special = DFA165_special;
            this.transition = DFA165_transition;
        }
        public String getDescription() {
            return "()+ loopback of 7807:4: (TK_0= '[' expressionGen+= expression TK_1= ']' )+";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA165_37 = input.LA(1);

                         
                        int index165_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_37);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA165_38 = input.LA(1);

                         
                        int index165_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_38);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA165_39 = input.LA(1);

                         
                        int index165_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_39);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA165_40 = input.LA(1);

                         
                        int index165_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_40);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA165_41 = input.LA(1);

                         
                        int index165_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_41);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA165_42 = input.LA(1);

                         
                        int index165_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA165_43 = input.LA(1);

                         
                        int index165_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_43);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA165_44 = input.LA(1);

                         
                        int index165_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA165_45 = input.LA(1);

                         
                        int index165_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_45);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA165_46 = input.LA(1);

                         
                        int index165_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_46);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA165_47 = input.LA(1);

                         
                        int index165_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_47);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA165_48 = input.LA(1);

                         
                        int index165_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_48);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA165_49 = input.LA(1);

                         
                        int index165_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_49);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA165_50 = input.LA(1);

                         
                        int index165_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_50);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA165_51 = input.LA(1);

                         
                        int index165_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_51);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA165_52 = input.LA(1);

                         
                        int index165_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_52);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA165_53 = input.LA(1);

                         
                        int index165_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_53);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA165_54 = input.LA(1);

                         
                        int index165_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_54);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA165_55 = input.LA(1);

                         
                        int index165_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA165_56 = input.LA(1);

                         
                        int index165_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_56);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA165_57 = input.LA(1);

                         
                        int index165_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_57);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA165_58 = input.LA(1);

                         
                        int index165_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_58);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA165_59 = input.LA(1);

                         
                        int index165_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_59);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA165_60 = input.LA(1);

                         
                        int index165_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_60);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA165_61 = input.LA(1);

                         
                        int index165_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_61);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA165_62 = input.LA(1);

                         
                        int index165_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_62);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA165_63 = input.LA(1);

                         
                        int index165_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_63);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA165_64 = input.LA(1);

                         
                        int index165_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_64);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA165_65 = input.LA(1);

                         
                        int index165_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_65);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA165_66 = input.LA(1);

                         
                        int index165_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred245_Java()) ) {s = 67;}

                        else if ( (true) ) {s = 1;}

                         
                        input.seek(index165_66);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 165, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA168_eotS =
        "\13\uffff";
    static final String DFA168_eofS =
        "\13\uffff";
    static final String DFA168_minS =
        "\1\4\12\uffff";
    static final String DFA168_maxS =
        "\1\76\12\uffff";
    static final String DFA168_acceptS =
        "\1\uffff\1\1\1\2\10\uffff";
    static final String DFA168_specialS =
        "\13\uffff}>";
    static final String[] DFA168_transitionS = {
            "\1\2\34\uffff\1\1\25\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA168_eot = DFA.unpackEncodedString(DFA168_eotS);
    static final short[] DFA168_eof = DFA.unpackEncodedString(DFA168_eofS);
    static final char[] DFA168_min = DFA.unpackEncodedStringToUnsignedChars(DFA168_minS);
    static final char[] DFA168_max = DFA.unpackEncodedStringToUnsignedChars(DFA168_maxS);
    static final short[] DFA168_accept = DFA.unpackEncodedString(DFA168_acceptS);
    static final short[] DFA168_special = DFA.unpackEncodedString(DFA168_specialS);
    static final short[][] DFA168_transition;

    static {
        int numStates = DFA168_transitionS.length;
        DFA168_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA168_transition[i] = DFA.unpackEncodedString(DFA168_transitionS[i]);
        }
    }

    class DFA168 extends DFA {

        public DFA168(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 168;
            this.eot = DFA168_eot;
            this.eof = DFA168_eof;
            this.min = DFA168_min;
            this.max = DFA168_max;
            this.accept = DFA168_accept;
            this.special = DFA168_special;
            this.transition = DFA168_transition;
        }
        public String getDescription() {
            return "8030:30: (nonWildcardTypeArgumentsGen+= nonWildcardTypeArguments )?";
        }
    }
    static final String DFA173_eotS =
        "\12\uffff";
    static final String DFA173_eofS =
        "\12\uffff";
    static final String DFA173_minS =
        "\1\4\11\uffff";
    static final String DFA173_maxS =
        "\1\76\11\uffff";
    static final String DFA173_acceptS =
        "\1\uffff\1\1\1\2\7\uffff";
    static final String DFA173_specialS =
        "\12\uffff}>";
    static final String[] DFA173_transitionS = {
            "\1\1\62\uffff\10\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA173_eot = DFA.unpackEncodedString(DFA173_eotS);
    static final short[] DFA173_eof = DFA.unpackEncodedString(DFA173_eofS);
    static final char[] DFA173_min = DFA.unpackEncodedStringToUnsignedChars(DFA173_minS);
    static final char[] DFA173_max = DFA.unpackEncodedStringToUnsignedChars(DFA173_maxS);
    static final short[] DFA173_accept = DFA.unpackEncodedString(DFA173_acceptS);
    static final short[] DFA173_special = DFA.unpackEncodedString(DFA173_specialS);
    static final short[][] DFA173_transition;

    static {
        int numStates = DFA173_transitionS.length;
        DFA173_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA173_transition[i] = DFA.unpackEncodedString(DFA173_transitionS[i]);
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = DFA173_eot;
            this.eof = DFA173_eof;
            this.min = DFA173_min;
            this.max = DFA173_max;
            this.accept = DFA173_accept;
            this.special = DFA173_special;
            this.transition = DFA173_transition;
        }
        public String getDescription() {
            return "8081:1: createdName returns [Node returnNode] : (IdentifierGen= Identifier (typeArgumentsGen+= typeArguments )? (TK_0= '.' IdentifierGen_1_List+= Identifier (typeArgumentsGen_1+= typeArguments )? )* | primitiveTypeGen+= primitiveType );";
        }
    }
    static final String DFA177_eotS =
        "\40\uffff";
    static final String DFA177_eofS =
        "\40\uffff";
    static final String DFA177_minS =
        "\1\4\37\uffff";
    static final String DFA177_maxS =
        "\1\161\37\uffff";
    static final String DFA177_acceptS =
        "\1\uffff\1\1\1\2\35\uffff";
    static final String DFA177_specialS =
        "\40\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\2\1\uffff\6\2\25\uffff\1\2\6\uffff\1\2\1\uffff\1\1\14\uffff"+
            "\10\2\1\uffff\2\2\2\uffff\3\2\41\uffff\2\2\2\uffff\6\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "8196:9: (TK_1= ']' (TK_2= '[' TK_3= ']' )* arrayInitializerGen+= arrayInitializer | expressionGen+= expression TK_4= ']' (TK_5= '[' expressionGen_1+= expression TK_6= ']' )* (TK_7= '[' TK_8= ']' )* )";
        }
    }
    static final String DFA175_eotS =
        "\105\uffff";
    static final String DFA175_eofS =
        "\1\2\104\uffff";
    static final String DFA175_minS =
        "\1\31\1\4\44\uffff\36\0\1\uffff";
    static final String DFA175_maxS =
        "\1\155\1\161\44\uffff\36\0\1\uffff";
    static final String DFA175_acceptS =
        "\2\uffff\1\2\101\uffff\1\1";
    static final String DFA175_specialS =
        "\46\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1"+
        "\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
        "\1\31\1\32\1\33\1\34\1\35\1\uffff}>";
    static final String[] DFA175_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\2\uffff\1\1\1\2\1"+
            "\uffff\1\2\22\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\25"+
            "\2",
            "\1\72\1\uffff\1\63\1\64\1\65\1\60\1\61\1\62\25\uffff\1\55"+
            "\6\uffff\1\103\1\uffff\1\2\14\uffff\1\73\1\74\1\75\1\76\1\77"+
            "\1\100\1\101\1\102\1\uffff\1\57\1\54\2\uffff\1\70\1\66\1\67"+
            "\41\uffff\1\46\1\47\2\uffff\1\50\1\51\1\52\1\53\1\56\1\71",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] DFA175_eot = DFA.unpackEncodedString(DFA175_eotS);
    static final short[] DFA175_eof = DFA.unpackEncodedString(DFA175_eofS);
    static final char[] DFA175_min = DFA.unpackEncodedStringToUnsignedChars(DFA175_minS);
    static final char[] DFA175_max = DFA.unpackEncodedStringToUnsignedChars(DFA175_maxS);
    static final short[] DFA175_accept = DFA.unpackEncodedString(DFA175_acceptS);
    static final short[] DFA175_special = DFA.unpackEncodedString(DFA175_specialS);
    static final short[][] DFA175_transition;

    static {
        int numStates = DFA175_transitionS.length;
        DFA175_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA175_transition[i] = DFA.unpackEncodedString(DFA175_transitionS[i]);
        }
    }

    class DFA175 extends DFA {

        public DFA175(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 175;
            this.eot = DFA175_eot;
            this.eof = DFA175_eof;
            this.min = DFA175_min;
            this.max = DFA175_max;
            this.accept = DFA175_accept;
            this.special = DFA175_special;
            this.transition = DFA175_transition;
        }
        public String getDescription() {
            return "()* loopback of 8197:48: (TK_5= '[' expressionGen_1+= expression TK_6= ']' )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA175_38 = input.LA(1);

                         
                        int index175_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_38);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA175_39 = input.LA(1);

                         
                        int index175_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_39);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA175_40 = input.LA(1);

                         
                        int index175_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_40);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA175_41 = input.LA(1);

                         
                        int index175_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_41);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA175_42 = input.LA(1);

                         
                        int index175_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_42);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA175_43 = input.LA(1);

                         
                        int index175_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_43);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA175_44 = input.LA(1);

                         
                        int index175_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_44);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA175_45 = input.LA(1);

                         
                        int index175_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_45);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA175_46 = input.LA(1);

                         
                        int index175_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_46);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA175_47 = input.LA(1);

                         
                        int index175_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_47);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA175_48 = input.LA(1);

                         
                        int index175_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_48);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA175_49 = input.LA(1);

                         
                        int index175_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_49);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA175_50 = input.LA(1);

                         
                        int index175_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_50);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA175_51 = input.LA(1);

                         
                        int index175_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_51);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA175_52 = input.LA(1);

                         
                        int index175_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_52);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA175_53 = input.LA(1);

                         
                        int index175_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_53);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA175_54 = input.LA(1);

                         
                        int index175_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_54);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA175_55 = input.LA(1);

                         
                        int index175_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_55);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA175_56 = input.LA(1);

                         
                        int index175_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_56);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA175_57 = input.LA(1);

                         
                        int index175_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_57);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA175_58 = input.LA(1);

                         
                        int index175_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA175_59 = input.LA(1);

                         
                        int index175_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_59);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA175_60 = input.LA(1);

                         
                        int index175_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA175_61 = input.LA(1);

                         
                        int index175_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_61);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA175_62 = input.LA(1);

                         
                        int index175_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_62);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA175_63 = input.LA(1);

                         
                        int index175_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_63);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA175_64 = input.LA(1);

                         
                        int index175_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_64);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA175_65 = input.LA(1);

                         
                        int index175_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_65);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA175_66 = input.LA(1);

                         
                        int index175_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_66);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA175_67 = input.LA(1);

                         
                        int index175_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_Java()) ) {s = 68;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index175_67);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 175, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA176_eotS =
        "\104\uffff";
    static final String DFA176_eofS =
        "\1\1\103\uffff";
    static final String DFA176_minS =
        "\1\31\1\uffff\1\4\101\uffff";
    static final String DFA176_maxS =
        "\1\155\1\uffff\1\161\101\uffff";
    static final String DFA176_acceptS =
        "\1\uffff\1\2\43\uffff\1\1\36\uffff";
    static final String DFA176_specialS =
        "\104\uffff}>";
    static final String[] DFA176_transitionS = {
            "\1\1\2\uffff\2\1\3\uffff\4\1\1\uffff\1\1\2\uffff\1\2\1\1\1"+
            "\uffff\1\1\22\uffff\1\1\2\uffff\1\1\7\uffff\1\1\16\uffff\25"+
            "\1",
            "",
            "\1\1\1\uffff\6\1\25\uffff\1\1\6\uffff\1\1\1\uffff\1\45\14"+
            "\uffff\10\1\1\uffff\2\1\2\uffff\3\1\41\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA176_eot = DFA.unpackEncodedString(DFA176_eotS);
    static final short[] DFA176_eof = DFA.unpackEncodedString(DFA176_eofS);
    static final char[] DFA176_min = DFA.unpackEncodedStringToUnsignedChars(DFA176_minS);
    static final char[] DFA176_max = DFA.unpackEncodedStringToUnsignedChars(DFA176_maxS);
    static final short[] DFA176_accept = DFA.unpackEncodedString(DFA176_acceptS);
    static final short[] DFA176_special = DFA.unpackEncodedString(DFA176_specialS);
    static final short[][] DFA176_transition;

    static {
        int numStates = DFA176_transitionS.length;
        DFA176_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA176_transition[i] = DFA.unpackEncodedString(DFA176_transitionS[i]);
        }
    }

    class DFA176 extends DFA {

        public DFA176(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 176;
            this.eot = DFA176_eot;
            this.eof = DFA176_eof;
            this.min = DFA176_min;
            this.max = DFA176_max;
            this.accept = DFA176_accept;
            this.special = DFA176_special;
            this.transition = DFA176_transition;
        }
        public String getDescription() {
            return "()* loopback of 8197:97: (TK_7= '[' TK_8= ']' )*";
        }
    }
    static final String DFA178_eotS =
        "\46\uffff";
    static final String DFA178_eofS =
        "\1\2\45\uffff";
    static final String DFA178_minS =
        "\1\31\45\uffff";
    static final String DFA178_maxS =
        "\1\155\45\uffff";
    static final String DFA178_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA178_specialS =
        "\46\uffff}>";
    static final String[] DFA178_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\1\1\2\2\uffff\2\2\1\uffff\1"+
            "\2\22\uffff\1\2\2\uffff\1\2\7\uffff\1\2\16\uffff\25\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA178_eot = DFA.unpackEncodedString(DFA178_eotS);
    static final short[] DFA178_eof = DFA.unpackEncodedString(DFA178_eofS);
    static final char[] DFA178_min = DFA.unpackEncodedStringToUnsignedChars(DFA178_minS);
    static final char[] DFA178_max = DFA.unpackEncodedStringToUnsignedChars(DFA178_maxS);
    static final short[] DFA178_accept = DFA.unpackEncodedString(DFA178_acceptS);
    static final short[] DFA178_special = DFA.unpackEncodedString(DFA178_specialS);
    static final short[][] DFA178_transition;

    static {
        int numStates = DFA178_transitionS.length;
        DFA178_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA178_transition[i] = DFA.unpackEncodedString(DFA178_transitionS[i]);
        }
    }

    class DFA178 extends DFA {

        public DFA178(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 178;
            this.eot = DFA178_eot;
            this.eof = DFA178_eof;
            this.min = DFA178_min;
            this.max = DFA178_max;
            this.accept = DFA178_accept;
            this.special = DFA178_special;
            this.transition = DFA178_transition;
        }
        public String getDescription() {
            return "8325:39: (classBodyGen+= classBody )?";
        }
    }
    static final String DFA180_eotS =
        "\46\uffff";
    static final String DFA180_eofS =
        "\1\2\45\uffff";
    static final String DFA180_minS =
        "\1\31\45\uffff";
    static final String DFA180_maxS =
        "\1\155\45\uffff";
    static final String DFA180_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA180_specialS =
        "\46\uffff}>";
    static final String[] DFA180_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\22\uffff\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\25\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA180_eot = DFA.unpackEncodedString(DFA180_eotS);
    static final short[] DFA180_eof = DFA.unpackEncodedString(DFA180_eofS);
    static final char[] DFA180_min = DFA.unpackEncodedStringToUnsignedChars(DFA180_minS);
    static final char[] DFA180_max = DFA.unpackEncodedStringToUnsignedChars(DFA180_maxS);
    static final short[] DFA180_accept = DFA.unpackEncodedString(DFA180_acceptS);
    static final short[] DFA180_special = DFA.unpackEncodedString(DFA180_specialS);
    static final short[][] DFA180_transition;

    static {
        int numStates = DFA180_transitionS.length;
        DFA180_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA180_transition[i] = DFA.unpackEncodedString(DFA180_transitionS[i]);
        }
    }

    class DFA180 extends DFA {

        public DFA180(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 180;
            this.eot = DFA180_eot;
            this.eof = DFA180_eof;
            this.min = DFA180_min;
            this.max = DFA180_max;
            this.accept = DFA180_accept;
            this.special = DFA180_special;
            this.transition = DFA180_transition;
        }
        public String getDescription() {
            return "8483:37: (argumentsGen+= arguments )?";
        }
    }
    static final String DFA183_eotS =
        "\46\uffff";
    static final String DFA183_eofS =
        "\1\2\45\uffff";
    static final String DFA183_minS =
        "\1\31\45\uffff";
    static final String DFA183_maxS =
        "\1\155\45\uffff";
    static final String DFA183_acceptS =
        "\1\uffff\1\1\1\2\43\uffff";
    static final String DFA183_specialS =
        "\46\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\2\2\uffff\2\2\3\uffff\4\2\1\uffff\1\2\2\uffff\2\2\1\uffff"+
            "\1\2\22\uffff\1\2\1\uffff\1\1\1\2\7\uffff\1\2\16\uffff\25\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "8684:40: (argumentsGen+= arguments )?";
        }
    }
    static final String DFA185_eotS =
        "\40\uffff";
    static final String DFA185_eofS =
        "\40\uffff";
    static final String DFA185_minS =
        "\1\4\37\uffff";
    static final String DFA185_maxS =
        "\1\161\37\uffff";
    static final String DFA185_acceptS =
        "\1\uffff\1\1\35\uffff\1\2";
    static final String DFA185_specialS =
        "\40\uffff}>";
    static final String[] DFA185_transitionS = {
            "\1\1\1\uffff\6\1\25\uffff\1\1\6\uffff\1\1\16\uffff\10\1\1\uffff"+
            "\2\1\1\37\1\uffff\3\1\41\uffff\2\1\2\uffff\6\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
    static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
    static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
    static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
    static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
    static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
    static final short[][] DFA185_transition;

    static {
        int numStates = DFA185_transitionS.length;
        DFA185_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
        }
    }

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = DFA185_eot;
            this.eof = DFA185_eof;
            this.min = DFA185_min;
            this.max = DFA185_max;
            this.accept = DFA185_accept;
            this.special = DFA185_special;
            this.transition = DFA185_transition;
        }
        public String getDescription() {
            return "8723:29: (expressionListGen+= expressionList )?";
        }
    }
    static final String DFA211_eotS =
        "\14\uffff";
    static final String DFA211_eofS =
        "\14\uffff";
    static final String DFA211_minS =
        "\1\4\13\uffff";
    static final String DFA211_maxS =
        "\1\107\13\uffff";
    static final String DFA211_acceptS =
        "\1\uffff\1\2\10\uffff\1\1\1\uffff";
    static final String DFA211_specialS =
        "\14\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\1\54\uffff\1\12\5\uffff\10\1\10\uffff\1\12",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "()* loopback of 5770:22: (variableModifierGen+= variableModifier )*";
        }
    }
 

    public static final BitSet FOLLOW_annotations_in_compilationUnit62 = new BitSet(new long[]{0x007FE0804F000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_packageDeclaration_in_compilationUnit69 = new BitSet(new long[]{0x007FE0804E000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_importDeclaration_in_compilationUnit82 = new BitSet(new long[]{0x007FE0804E000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_typeDeclaration_in_compilationUnit95 = new BitSet(new long[]{0x007FE0804A000022L,0x0000000000000080L});
    public static final BitSet FOLLOW_24_in_packageDeclaration117 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_packageDeclaration121 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_packageDeclaration125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_26_in_importDeclaration147 = new BitSet(new long[]{0x0000000008000010L});
    public static final BitSet FOLLOW_27_in_importDeclaration151 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration156 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration161 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_importDeclaration165 = new BitSet(new long[]{0x0000000012000000L});
    public static final BitSet FOLLOW_28_in_importDeclaration172 = new BitSet(new long[]{0x0000000020000000L});
    public static final BitSet FOLLOW_29_in_importDeclaration176 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_importDeclaration182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_typeDeclaration204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_typeDeclaration220 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classOrInterfaceDeclaration242 = new BitSet(new long[]{0x007FE08048000020L,0x0000000000000080L});
    public static final BitSet FOLLOW_classDeclaration_in_classOrInterfaceDeclaration248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_classOrInterfaceDeclaration254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_normalClassDeclaration_in_classDeclaration277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_classDeclaration293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_30_in_normalClassDeclaration315 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalClassDeclaration319 = new BitSet(new long[]{0x0000002380000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalClassDeclaration324 = new BitSet(new long[]{0x0000002380000000L});
    public static final BitSet FOLLOW_31_in_normalClassDeclaration339 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_normalClassDeclaration343 = new BitSet(new long[]{0x0000002380000000L});
    public static final BitSet FOLLOW_32_in_normalClassDeclaration358 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalClassDeclaration362 = new BitSet(new long[]{0x0000002380000000L});
    public static final BitSet FOLLOW_classBody_in_normalClassDeclaration376 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_typeParameters398 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters402 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_34_in_typeParameters407 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_typeParameter_in_typeParameters411 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_35_in_typeParameters417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeParameter438 = new BitSet(new long[]{0x0000000080000002L});
    public static final BitSet FOLLOW_31_in_typeParameter443 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_bound_in_typeParameter447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_bound472 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_bound477 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_bound481 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_ENUM_in_enumDeclaration504 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumDeclaration508 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_32_in_enumDeclaration513 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_enumDeclaration517 = new BitSet(new long[]{0x0000002100000000L});
    public static final BitSet FOLLOW_enumBody_in_enumDeclaration523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_enumBody545 = new BitSet(new long[]{0x0000004402000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_enumConstants_in_enumBody549 = new BitSet(new long[]{0x0000004402000000L});
    public static final BitSet FOLLOW_34_in_enumBody554 = new BitSet(new long[]{0x0000004002000000L});
    public static final BitSet FOLLOW_enumBodyDeclarations_in_enumBody559 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_enumBody564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants585 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_enumConstants590 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_enumConstant_in_enumConstants594 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_annotations_in_enumConstant618 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_enumConstant623 = new BitSet(new long[]{0x0000002380000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_enumConstant628 = new BitSet(new long[]{0x0000002380000002L});
    public static final BitSet FOLLOW_classBody_in_enumConstant635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_enumBodyDeclarations659 = new BitSet(new long[]{0x7FFFE1A24A000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_enumBodyDeclarations664 = new BitSet(new long[]{0x7FFFE1A24A000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_normalInterfaceDeclaration_in_interfaceDeclaration688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_interfaceDeclaration700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_39_in_normalInterfaceDeclaration722 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_normalInterfaceDeclaration726 = new BitSet(new long[]{0x0000002280000000L});
    public static final BitSet FOLLOW_typeParameters_in_normalInterfaceDeclaration730 = new BitSet(new long[]{0x0000002280000000L});
    public static final BitSet FOLLOW_31_in_normalInterfaceDeclaration736 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_normalInterfaceDeclaration740 = new BitSet(new long[]{0x0000002280000000L});
    public static final BitSet FOLLOW_interfaceBody_in_normalInterfaceDeclaration746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeList768 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_typeList773 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_typeList777 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_37_in_classBody801 = new BitSet(new long[]{0x7FFFE1E24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_classBodyDeclaration_in_classBody805 = new BitSet(new long[]{0x7FFFE1E24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_38_in_classBody810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_interfaceBody832 = new BitSet(new long[]{0x7FFFE1C24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceBodyDeclaration_in_interfaceBody836 = new BitSet(new long[]{0x7FFFE1C24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_38_in_interfaceBody841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_classBodyDeclaration862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_classBodyDeclaration873 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_classBodyDeclaration878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_classBodyDeclaration889 = new BitSet(new long[]{0x7FFFE1A24A000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_memberDecl_in_classBodyDeclaration894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_genericMethodOrConstructorDecl_in_memberDecl916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_memberDecl927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_memberDecl938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_memberDecl949 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_voidMethodDeclaratorRest_in_memberDecl957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_memberDecl968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_memberDecl972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_memberDecl983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_memberDecl994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_genericMethodOrConstructorDecl1016 = new BitSet(new long[]{0x7F80010000000010L});
    public static final BitSet FOLLOW_genericMethodOrConstructorRest_in_genericMethodOrConstructorDecl1020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_genericMethodOrConstructorRest1043 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_40_in_genericMethodOrConstructorRest1049 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1054 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_genericMethodOrConstructorRest1058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_genericMethodOrConstructorRest1069 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_constructorDeclaratorRest_in_genericMethodOrConstructorRest1073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_methodDeclaration1094 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_methodDeclaration1098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaratorRest_in_methodDeclaration1102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_fieldDeclaration1123 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_fieldDeclaration1127 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_fieldDeclaration1131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_modifier_in_interfaceBodyDeclaration1154 = new BitSet(new long[]{0x7FFFE18248000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_interfaceMemberDecl_in_interfaceBodyDeclaration1159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_interfaceBodyDeclaration1172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldDecl_in_interfaceMemberDecl1193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceGenericMethodDecl_in_interfaceMemberDecl1206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_interfaceMemberDecl1222 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMemberDecl1226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_voidInterfaceMethodDeclaratorRest_in_interfaceMemberDecl1230 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_interfaceMemberDecl1246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_interfaceMemberDecl1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_interfaceMethodOrFieldDecl1284 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceMethodOrFieldDecl1288 = new BitSet(new long[]{0x0000120000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodOrFieldRest_in_interfaceMethodOrFieldDecl1292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorsRest_in_interfaceMethodOrFieldRest1314 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_interfaceMethodOrFieldRest1318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceMethodOrFieldRest1329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_methodDeclaratorRest1351 = new BitSet(new long[]{0x00000A200A000000L});
    public static final BitSet FOLLOW_41_in_methodDeclaratorRest1356 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_methodDeclaratorRest1360 = new BitSet(new long[]{0x00000A200A000000L});
    public static final BitSet FOLLOW_43_in_methodDeclaratorRest1375 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_methodDeclaratorRest1379 = new BitSet(new long[]{0x000000200A000000L});
    public static final BitSet FOLLOW_methodBody_in_methodDeclaratorRest1397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_methodDeclaratorRest1413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidMethodDeclaratorRest1445 = new BitSet(new long[]{0x000008200A000000L});
    public static final BitSet FOLLOW_43_in_voidMethodDeclaratorRest1450 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidMethodDeclaratorRest1454 = new BitSet(new long[]{0x000000200A000000L});
    public static final BitSet FOLLOW_methodBody_in_voidMethodDeclaratorRest1472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_voidMethodDeclaratorRest1488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_interfaceMethodDeclaratorRest1520 = new BitSet(new long[]{0x00000A0002000000L});
    public static final BitSet FOLLOW_41_in_interfaceMethodDeclaratorRest1525 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_interfaceMethodDeclaratorRest1529 = new BitSet(new long[]{0x00000A0002000000L});
    public static final BitSet FOLLOW_43_in_interfaceMethodDeclaratorRest1536 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_interfaceMethodDeclaratorRest1540 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_interfaceMethodDeclaratorRest1546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_typeParameters_in_interfaceGenericMethodDecl1568 = new BitSet(new long[]{0x7F80010000000010L});
    public static final BitSet FOLLOW_type_in_interfaceGenericMethodDecl1573 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_40_in_interfaceGenericMethodDecl1579 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_interfaceGenericMethodDecl1584 = new BitSet(new long[]{0x0000120000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceMethodDeclaratorRest_in_interfaceGenericMethodDecl1596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_voidInterfaceMethodDeclaratorRest1618 = new BitSet(new long[]{0x0000080002000000L});
    public static final BitSet FOLLOW_43_in_voidInterfaceMethodDeclaratorRest1623 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_voidInterfaceMethodDeclaratorRest1627 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_voidInterfaceMethodDeclaratorRest1633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_formalParameters_in_constructorDeclaratorRest1655 = new BitSet(new long[]{0x0000082008000000L});
    public static final BitSet FOLLOW_43_in_constructorDeclaratorRest1660 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedNameList_in_constructorDeclaratorRest1664 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_methodBody_in_constructorDeclaratorRest1670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_constantDeclarator1691 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclarator1695 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1717 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_variableDeclarators1722 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarator_in_variableDeclarators1726 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclarator1749 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_variableDeclaratorRest_in_variableDeclarator1753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclaratorRest1776 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_variableDeclaratorRest1780 = new BitSet(new long[]{0x0000120000000002L});
    public static final BitSet FOLLOW_44_in_variableDeclaratorRest1787 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest1791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_variableDeclaratorRest1804 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_variableDeclaratorRest1808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constantDeclaratorRest_in_constantDeclaratorsRest1835 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_constantDeclaratorsRest1840 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_constantDeclarator_in_constantDeclaratorsRest1844 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_41_in_constantDeclaratorRest1871 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_constantDeclaratorRest1875 = new BitSet(new long[]{0x0000120000000000L});
    public static final BitSet FOLLOW_44_in_constantDeclaratorRest1881 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_constantDeclaratorRest1885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_variableDeclaratorId1907 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_variableDeclaratorId1912 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_variableDeclaratorId1916 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arrayInitializer_in_variableInitializer1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_variableInitializer1955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_arrayInitializer1977 = new BitSet(new long[]{0x7F80016200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer1982 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_arrayInitializer1987 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_variableInitializer_in_arrayInitializer1991 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_arrayInitializer1998 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_arrayInitializer2007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_modifier2030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_45_in_modifier2046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_46_in_modifier2062 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_47_in_modifier2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_27_in_modifier2094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_48_in_modifier2110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_modifier2126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_50_in_modifier2142 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_modifier2158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_52_in_modifier2174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_53_in_modifier2190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_54_in_modifier2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2230 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_packageOrTypeName2235 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_packageOrTypeName2239 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_Identifier_in_enumConstantName2264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_typeName2290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_packageOrTypeName_in_typeName2306 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_typeName2310 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_typeName2314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_type2335 = new BitSet(new long[]{0x0000020210000002L});
    public static final BitSet FOLLOW_typeArguments_in_type2340 = new BitSet(new long[]{0x0000020010000002L});
    public static final BitSet FOLLOW_28_in_type2347 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_type2351 = new BitSet(new long[]{0x0000020210000002L});
    public static final BitSet FOLLOW_typeArguments_in_type2356 = new BitSet(new long[]{0x0000020010000002L});
    public static final BitSet FOLLOW_41_in_type2366 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_type2370 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_primitiveType_in_type2383 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_type2388 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_type2392 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_55_in_primitiveType2417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_56_in_primitiveType2431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_57_in_primitiveType2445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_58_in_primitiveType2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_59_in_primitiveType2473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_60_in_primitiveType2487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_61_in_primitiveType2501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_62_in_primitiveType2515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_49_in_variableModifier2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_variableModifier2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_typeArguments2576 = new BitSet(new long[]{0xFF80000000000010L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2580 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_34_in_typeArguments2585 = new BitSet(new long[]{0xFF80000000000010L});
    public static final BitSet FOLLOW_typeArgument_in_typeArguments2589 = new BitSet(new long[]{0x0000000C00000000L});
    public static final BitSet FOLLOW_35_in_typeArguments2595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_typeArgument2617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_63_in_typeArgument2628 = new BitSet(new long[]{0x0000000080000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_31_in_typeArgument2634 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_64_in_typeArgument2640 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_typeArgument2645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2669 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_qualifiedNameList2674 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_qualifiedName_in_qualifiedNameList2678 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_65_in_formalParameters2702 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000084L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameters2706 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_formalParameters2711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameterDecls2733 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_formalParameterDecls2738 = new BitSet(new long[]{0x0000000000000012L,0x0000000000000008L});
    public static final BitSet FOLLOW_formalParameterDeclsRest_in_formalParameterDecls2742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2765 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_formalParameterDeclsRest2770 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameterDecls_in_formalParameterDeclsRest2774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_67_in_formalParameterDeclsRest2789 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameterDeclsRest2793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_methodBody2815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2836 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_qualifiedName2841 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_qualifiedName2845 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_integerLiteral_in_literal2871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FloatingPointLiteral_in_literal2887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CharacterLiteral_in_literal2903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_StringLiteral_in_literal2919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_booleanLiteral_in_literal2935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_68_in_literal2951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_HexLiteral_in_integerLiteral2974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OctalLiteral_in_integerLiteral2990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DecimalLiteral_in_integerLiteral3006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_69_in_booleanLiteral3032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_70_in_booleanLiteral3048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_annotations3074 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_71_in_annotation3096 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationName_in_annotation3100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotation3105 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F7L});
    public static final BitSet FOLLOW_elementValuePairs_in_annotation3109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotation3114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3138 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_annotationName3143 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationName3147 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3171 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_elementValuePairs3176 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValuePair_in_elementValuePairs3180 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_Identifier_in_elementValuePair3205 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_elementValuePair3209 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValuePair3215 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_elementValue3237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_elementValue3250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayInitializer_in_elementValue3263 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_elementValueArrayInitializer3285 = new BitSet(new long[]{0x7F80016200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3290 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_34_in_elementValueArrayInitializer3295 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_elementValueArrayInitializer3299 = new BitSet(new long[]{0x0000004400000000L});
    public static final BitSet FOLLOW_38_in_elementValueArrayInitializer3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_71_in_annotationTypeDeclaration3330 = new BitSet(new long[]{0x0000008000000000L});
    public static final BitSet FOLLOW_39_in_annotationTypeDeclaration3334 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_annotationTypeDeclaration3338 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_annotationTypeBody_in_annotationTypeDeclaration3342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_annotationTypeBody3364 = new BitSet(new long[]{0x7FFFE0C048000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementDeclarations_in_annotationTypeBody3369 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_annotationTypeBody3375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3398 = new BitSet(new long[]{0x7FFFE08048000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementDeclaration_in_annotationTypeElementDeclarations3404 = new BitSet(new long[]{0x7FFFE08048000032L,0x0000000000000080L});
    public static final BitSet FOLLOW_modifier_in_annotationTypeElementDeclaration3429 = new BitSet(new long[]{0x7FFFE08048000030L,0x0000000000000080L});
    public static final BitSet FOLLOW_annotationTypeElementRest_in_annotationTypeElementDeclaration3435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_annotationTypeElementRest3457 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_annotationMethodOrConstantRest_in_annotationTypeElementRest3461 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_annotationTypeElementRest3478 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_annotationTypeElementRest3496 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_annotationTypeElementRest3514 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationTypeDeclaration_in_annotationTypeElementRest3532 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_annotationTypeElementRest3536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationMethodRest_in_annotationMethodOrConstantRest3559 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationConstantRest_in_annotationMethodOrConstantRest3572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_annotationMethodRest3594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_annotationMethodRest3598 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_annotationMethodRest3602 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_defaultValue_in_annotationMethodRest3607 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableDeclarators_in_annotationConstantRest3633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_defaultValue3657 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_elementValue_in_defaultValue3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_37_in_block3685 = new BitSet(new long[]{0x7FFFE1E24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_blockStatement_in_block3689 = new BitSet(new long[]{0x7FFFE1E24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_38_in_block3694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_blockStatement3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_blockStatement3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statement_in_blockStatement3742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_localVariableDeclaration3764 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_localVariableDeclaration3769 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_localVariableDeclaration3773 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_localVariableDeclaration3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_block_in_statement3799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_73_in_statement3813 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3817 = new BitSet(new long[]{0x0000000002000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement3822 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement3826 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_75_in_statement3846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3850 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_statement3854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001000L});
    public static final BitSet FOLLOW_76_in_statement3866 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_statement3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_77_in_statement3886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_statement3890 = new BitSet(new long[]{0x7F82012202000FD0L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_forControl_in_statement3894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_statement3898 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_statement3902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_78_in_statement3916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3920 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_statement3924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_79_in_statement3938 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_statement3942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_78_in_statement3946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement3950 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement3954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_80_in_statement3968 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_statement3972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000820000L});
    public static final BitSet FOLLOW_catches_in_statement3984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_statement3988 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_statement3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_statement4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_81_in_statement4016 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_statement4020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_82_in_statement4042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement4046 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_37_in_statement4050 = new BitSet(new long[]{0x0000004000000000L,0x0000000001000100L});
    public static final BitSet FOLLOW_switchBlockStatementGroups_in_statement4054 = new BitSet(new long[]{0x0000004000000000L});
    public static final BitSet FOLLOW_38_in_statement4058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_51_in_statement4072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_statement4076 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_statement4080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_83_in_statement4094 = new BitSet(new long[]{0x7F80012202000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement4098 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_84_in_statement4117 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_statement4121 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_85_in_statement4139 = new BitSet(new long[]{0x0000000002000010L});
    public static final BitSet FOLLOW_Identifier_in_statement4143 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_86_in_statement4162 = new BitSet(new long[]{0x0000000002000010L});
    public static final BitSet FOLLOW_Identifier_in_statement4166 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_25_in_statement4185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_statementExpression_in_statement4199 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_statement4203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_statement4217 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_statement4221 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_statement4225 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catchClause_in_catches4247 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_catchClause_in_catches4252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000800000L});
    public static final BitSet FOLLOW_87_in_catchClause4276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_catchClause4280 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_formalParameter_in_catchClause4284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_catchClause4288 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_catchClause4292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_formalParameter4313 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_formalParameter4318 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclaratorId_in_formalParameter4322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_switchBlockStatementGroup_in_switchBlockStatementGroups4346 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000100L});
    public static final BitSet FOLLOW_switchLabel_in_switchBlockStatementGroup4370 = new BitSet(new long[]{0x7FFFE1A24A000FF2L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_blockStatement_in_switchBlockStatementGroup4374 = new BitSet(new long[]{0x7FFFE1A24A000FF2L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_88_in_switchLabel4397 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_constantExpression_in_switchLabel4401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_switchLabel4418 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_switchLabel4422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_72_in_switchLabel4439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_switchLabel4443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_34_in_moreStatementExpressions4466 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_statementExpression_in_moreStatementExpressions4470 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_forVarControl_in_forControl4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forInit_in_forControl4513 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_forControl4518 = new BitSet(new long[]{0x7F80012202000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_forControl4522 = new BitSet(new long[]{0x0000000002000000L});
    public static final BitSet FOLLOW_25_in_forControl4527 = new BitSet(new long[]{0x7F82012200000FD2L,0x0003F300000000F3L});
    public static final BitSet FOLLOW_forUpdate_in_forControl4531 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forInit4553 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_forInit4558 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_forInit4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forInit4573 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_forVarControl4595 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_forVarControl4600 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_forVarControl4604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_forVarControl4608 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_forVarControl4612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forUpdate4633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_parExpression4656 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_parExpression4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_parExpression4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList4688 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_34_in_expressionList4693 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_expressionList4697 = new BitSet(new long[]{0x0000000400000002L});
    public static final BitSet FOLLOW_expression_in_statementExpression4723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_constantExpression4745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalExpression_in_expression4767 = new BitSet(new long[]{0x0000100A00000002L,0x00000001FE000000L});
    public static final BitSet FOLLOW_assignmentOperator_in_expression4772 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_expression4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_89_in_assignmentOperator4816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_90_in_assignmentOperator4832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_91_in_assignmentOperator4848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_92_in_assignmentOperator4864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_93_in_assignmentOperator4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_94_in_assignmentOperator4896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_95_in_assignmentOperator4912 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_96_in_assignmentOperator4928 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_assignmentOperator4944 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_assignmentOperator4948 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4968 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4972 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4992 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator4996 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_assignmentOperator5000 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_assignmentOperator5004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalOrExpression_in_conditionalExpression5027 = new BitSet(new long[]{0x8000000000000002L});
    public static final BitSet FOLLOW_63_in_conditionalExpression5033 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_conditionalExpression5041 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_conditionalExpression5045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5071 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_97_in_conditionalOrExpression5077 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_conditionalAndExpression_in_conditionalOrExpression5081 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5107 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_98_in_conditionalAndExpression5113 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_inclusiveOrExpression_in_conditionalAndExpression5117 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5143 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_99_in_inclusiveOrExpression5149 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_exclusiveOrExpression_in_inclusiveOrExpression5153 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5179 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_100_in_exclusiveOrExpression5185 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_andExpression_in_exclusiveOrExpression5189 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5215 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_36_in_andExpression5221 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_equalityExpression_in_andExpression5225 = new BitSet(new long[]{0x0000001000000002L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5251 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_101_in_equalityExpression5258 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_102_in_equalityExpression5264 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_instanceOfExpression_in_equalityExpression5269 = new BitSet(new long[]{0x0000000000000002L,0x0000006000000000L});
    public static final BitSet FOLLOW_relationalExpression_in_instanceOfExpression5295 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_103_in_instanceOfExpression5300 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_type_in_instanceOfExpression5304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5329 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_relationalOp_in_relationalExpression5335 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_shiftExpression_in_relationalExpression5339 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_33_in_relationalOp5365 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_relationalOp5369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_relationalOp5375 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_relationalOp5379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_relationalOp5385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_relationalOp5391 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5415 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_shiftOp_in_shiftExpression5421 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_additiveExpression_in_shiftExpression5425 = new BitSet(new long[]{0x0000000A00000002L});
    public static final BitSet FOLLOW_33_in_shiftOp5459 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_33_in_shiftOp5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_shiftOp5469 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp5473 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_shiftOp5483 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_shiftOp5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5512 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_104_in_additiveExpression5519 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_105_in_additiveExpression5525 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_multiplicativeExpression_in_additiveExpression5530 = new BitSet(new long[]{0x0000000000000002L,0x0000030000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5556 = new BitSet(new long[]{0x0000000020000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_29_in_multiplicativeExpression5564 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_106_in_multiplicativeExpression5570 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_107_in_multiplicativeExpression5576 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplicativeExpression5582 = new BitSet(new long[]{0x0000000020000002L,0x00000C0000000000L});
    public static final BitSet FOLLOW_104_in_unaryExpression5609 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_105_in_unaryExpression5627 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_108_in_unaryExpression5647 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpression5667 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpression5671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_unaryExpression5687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_110_in_unaryExpressionNotPlusMinus5713 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_111_in_unaryExpressionNotPlusMinus5732 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_unaryExpressionNotPlusMinus5736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_unaryExpressionNotPlusMinus5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primary_in_unaryExpressionNotPlusMinus5768 = new BitSet(new long[]{0x0000020010000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_selector_in_unaryExpressionNotPlusMinus5772 = new BitSet(new long[]{0x0000020010000002L,0x0000300000000000L});
    public static final BitSet FOLLOW_108_in_unaryExpressionNotPlusMinus5778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_109_in_unaryExpressionNotPlusMinus5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_castExpression5809 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_primitiveType_in_castExpression5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_castExpression5817 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_castExpression5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_castExpression5836 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_type_in_castExpression5841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_expression_in_castExpression5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_castExpression5852 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpressionNotPlusMinus_in_castExpression5856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_parExpression_in_primary5880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_primary5896 = new BitSet(new long[]{0x0000000000000010L,0x0001000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_primary5909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_primary5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_primary5919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_112_in_primary5936 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_primary5941 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary5945 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_primary5970 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_primary5974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_literal_in_primary5990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_113_in_primary6006 = new BitSet(new long[]{0x7F80000200000010L});
    public static final BitSet FOLLOW_creator_in_primary6010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_primary6026 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_primary6031 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_primary6035 = new BitSet(new long[]{0x0000020010000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_primary6042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_primitiveType_in_primary6060 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_41_in_primary6065 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_primary6069 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_28_in_primary6075 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_primary6079 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_40_in_primary6095 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_28_in_primary6099 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_primary6103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_identifierSuffix6125 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_identifierSuffix6129 = new BitSet(new long[]{0x0000020010000000L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6135 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_identifierSuffix6139 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_identifierSuffix6151 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_identifierSuffix6155 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_identifierSuffix6159 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix6178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6194 = new BitSet(new long[]{0x0000000040000000L});
    public static final BitSet FOLLOW_30_in_identifierSuffix6198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6214 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_explicitGenericInvocation_in_identifierSuffix6218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6234 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_identifierSuffix6238 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_identifierSuffix6258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_identifierSuffix6262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_identifierSuffix6278 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_identifierSuffix6282 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_identifierSuffix6287 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_innerCreator_in_identifierSuffix6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_creator6315 = new BitSet(new long[]{0x7F80000200000010L});
    public static final BitSet FOLLOW_createdName_in_creator6320 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arrayCreatorRest_in_creator6333 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_creator6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_createdName6361 = new BitSet(new long[]{0x0000000210000002L});
    public static final BitSet FOLLOW_typeArguments_in_createdName6365 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_28_in_createdName6379 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_createdName6383 = new BitSet(new long[]{0x0000000210000002L});
    public static final BitSet FOLLOW_typeArguments_in_createdName6387 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_primitiveType_in_createdName6404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_innerCreator6426 = new BitSet(new long[]{0x0000020000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_classCreatorRest_in_innerCreator6430 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6451 = new BitSet(new long[]{0x7F80052200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6467 = new BitSet(new long[]{0x0000022000000000L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6472 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6476 = new BitSet(new long[]{0x0000022000000000L});
    public static final BitSet FOLLOW_arrayInitializer_in_arrayCreatorRest6482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest6498 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6502 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6507 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_arrayCreatorRest6511 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6515 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_41_in_arrayCreatorRest6522 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_arrayCreatorRest6526 = new BitSet(new long[]{0x0000020000000002L});
    public static final BitSet FOLLOW_arguments_in_classCreatorRest6559 = new BitSet(new long[]{0x0000002380000002L});
    public static final BitSet FOLLOW_classBody_in_classCreatorRest6563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_explicitGenericInvocation6586 = new BitSet(new long[]{0x0000000000000010L,0x0000000000000001L});
    public static final BitSet FOLLOW_explicitGenericInvocationSuffix_in_explicitGenericInvocation6590 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_33_in_nonWildcardTypeArguments6612 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_typeList_in_nonWildcardTypeArguments6616 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_nonWildcardTypeArguments6620 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_64_in_explicitGenericInvocationSuffix6642 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_explicitGenericInvocationSuffix6646 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_Identifier_in_explicitGenericInvocationSuffix6659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_explicitGenericInvocationSuffix6663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6685 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_selector6689 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_selector6694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6709 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_112_in_selector6713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_64_in_selector6730 = new BitSet(new long[]{0x0000000010000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_superSuffix_in_selector6734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_selector6747 = new BitSet(new long[]{0x0000000000000000L,0x0002000000000000L});
    public static final BitSet FOLLOW_113_in_selector6751 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_nonWildcardTypeArguments_in_selector6756 = new BitSet(new long[]{0x0000000200000010L});
    public static final BitSet FOLLOW_innerCreator_in_selector6762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_selector6775 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_selector6779 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_selector6783 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_superSuffix6818 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_superSuffix6822 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000002L});
    public static final BitSet FOLLOW_arguments_in_superSuffix6827 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_arguments6853 = new BitSet(new long[]{0x7F82012200000FD0L,0x0003F300000000F7L});
    public static final BitSet FOLLOW_expressionList_in_arguments6857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_arguments6862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotations_in_synpred1_Java62 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_methodDeclaration_in_synpred38_Java927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fieldDeclaration_in_synpred39_Java938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred85_Java2235 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred85_Java2239 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotation_in_synpred120_Java3074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classDeclaration_in_synpred135_Java3478 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred135_Java3482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_interfaceDeclaration_in_synpred137_Java3496 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred137_Java3500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_enumDeclaration_in_synpred139_Java3514 = new BitSet(new long[]{0x0000000002000002L});
    public static final BitSet FOLLOW_25_in_synpred139_Java3518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_localVariableDeclaration_in_synpred144_Java3716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classOrInterfaceDeclaration_in_synpred145_Java3727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_76_in_synpred150_Java3866 = new BitSet(new long[]{0x7FFFE1A24A000FF0L,0x0003F300007DEAF3L});
    public static final BitSet FOLLOW_statement_in_synpred150_Java3870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred155_Java3984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_81_in_synpred155_Java3988 = new BitSet(new long[]{0x0000002008000000L});
    public static final BitSet FOLLOW_block_in_synpred155_Java3992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_catches_in_synpred156_Java4004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_synpred173_Java4397 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_constantExpression_in_synpred173_Java4401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred173_Java4405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_88_in_synpred174_Java4418 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_enumConstantName_in_synpred174_Java4422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_74_in_synpred174_Java4426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_forVarControl_in_synpred176_Java4502 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variableModifier_in_synpred181_Java4553 = new BitSet(new long[]{0x7F82000000000010L,0x0000000000000080L});
    public static final BitSet FOLLOW_type_in_synpred181_Java4558 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_variableDeclarators_in_synpred181_Java4562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assignmentOperator_in_synpred184_Java4772 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred184_Java4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred195_Java4968 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred195_Java4972 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_44_in_synpred195_Java4976 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_relationalOp_in_synpred205_Java5335 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_shiftExpression_in_synpred205_Java5339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_shiftOp_in_synpred209_Java5421 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_additiveExpression_in_synpred209_Java5425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_35_in_synpred211_Java5469 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred211_Java5473 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_35_in_synpred211_Java5477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_castExpression_in_synpred223_Java5752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_65_in_synpred227_Java5809 = new BitSet(new long[]{0x7F80000000000010L});
    public static final BitSet FOLLOW_primitiveType_in_synpred227_Java5813 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_66_in_synpred227_Java5817 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_unaryExpression_in_synpred227_Java5821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_type_in_synpred228_Java5841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred232_Java5941 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred232_Java5945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred233_Java5952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_28_in_synpred238_Java6031 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_Identifier_in_synpred238_Java6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_identifierSuffix_in_synpred239_Java6042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_synpred245_Java6151 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred245_Java6155 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred245_Java6159 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_41_in_synpred261_Java6507 = new BitSet(new long[]{0x7F80012200000FD0L,0x0003F30000000073L});
    public static final BitSet FOLLOW_expression_in_synpred261_Java6511 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_42_in_synpred261_Java6515 = new BitSet(new long[]{0x0000000000000002L});

}